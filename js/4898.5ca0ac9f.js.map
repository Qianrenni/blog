{"version":3,"file":"js/4898.5ca0ac9f.js","mappings":"oHAAA,4pE","sources":["webpack://myblog/./src/assets/md/java/content/052-1 数据加密.md"],"sourcesContent":["export default \"## **1. 数据加密**\\r\\n\\r\\n加密是保护数据安全的重要手段，通过将明文数据转换为密文，确保只有拥有正确密钥的人才能解密并读取数据。\\r\\n\\r\\n### **1.1 对称加密**\\r\\n对称加密使用同一个密钥进行加密和解密，适合快速加密大量数据。常见的对称加密算法包括 AES 和 DES。\\r\\n\\r\\n#### **AES 加密示例**\\r\\n```java\\r\\nimport javax.crypto.Cipher;\\r\\nimport javax.crypto.KeyGenerator;\\r\\nimport javax.crypto.SecretKey;\\r\\n\\r\\npublic class AESExample {\\r\\n    public static void main(String[] args) throws Exception {\\r\\n        // 生成密钥\\r\\n        KeyGenerator keyGen = KeyGenerator.getInstance(\\\"AES\\\");\\r\\n        keyGen.init(128); // 密钥长度\\r\\n        SecretKey secretKey = keyGen.generateKey();\\r\\n\\r\\n        // 加密\\r\\n        Cipher cipher = Cipher.getInstance(\\\"AES\\\");\\r\\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\\r\\n        byte[] encryptedData = cipher.doFinal(\\\"Sensitive Data\\\".getBytes());\\r\\n        System.out.println(\\\"Encrypted: \\\" + new String(encryptedData));\\r\\n\\r\\n        // 解密\\r\\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\\r\\n        byte[] decryptedData = cipher.doFinal(encryptedData);\\r\\n        System.out.println(\\\"Decrypted: \\\" + new String(decryptedData));\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n### **1.2 非对称加密**\\r\\n非对称加密使用一对密钥（公钥和私钥），其中一个用于加密，另一个用于解密。常见的非对称加密算法包括 RSA。\\r\\n\\r\\n#### **RSA 加密示例**\\r\\n```java\\r\\nimport java.security.*;\\r\\nimport javax.crypto.Cipher;\\r\\n\\r\\npublic class RSAExample {\\r\\n    public static void main(String[] args) throws Exception {\\r\\n        // 生成密钥对\\r\\n        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\\\"RSA\\\");\\r\\n        keyGen.initialize(2048);\\r\\n        KeyPair keyPair = keyGen.generateKeyPair();\\r\\n        PublicKey publicKey = keyPair.getPublic();\\r\\n        PrivateKey privateKey = keyPair.getPrivate();\\r\\n\\r\\n        // 加密\\r\\n        Cipher cipher = Cipher.getInstance(\\\"RSA\\\");\\r\\n        cipher.init(Cipher.ENCRYPT_MODE, publicKey);\\r\\n        byte[] encryptedData = cipher.doFinal(\\\"Sensitive Data\\\".getBytes());\\r\\n        System.out.println(\\\"Encrypted: \\\" + new String(encryptedData));\\r\\n\\r\\n        // 解密\\r\\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\\r\\n        byte[] decryptedData = cipher.doFinal(encryptedData);\\r\\n        System.out.println(\\\"Decrypted: \\\" + new String(decryptedData));\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}