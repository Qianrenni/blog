"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[8030],{78030:function(n,r,e){e.r(r),r["default"]='## **描述符**\r\n\r\n描述符（Descriptor）是 Python 中一种强大的工具，用于控制对类属性的访问、赋值和删除操作。它通过实现特定的协议（`__get__`、`__set__` 和 `__delete__` 方法）来定义这些行为。描述符通常用于封装属性访问逻辑，提升代码的可复用性和灵活性。\r\n\r\n### 描述符的核心概念\r\n\r\n1. **描述符协议**：\r\n   - 描述符是一个实现了以下方法之一或多个的类：\r\n     - `__get__(self, instance, owner)`：用于获取属性值。\r\n     - `__set__(self, instance, value)`：用于设置属性值。\r\n     - `__delete__(self, instance)`：用于删除属性值。\r\n\r\n2. **工作原理**：\r\n   - 当一个类的属性是描述符实例时，对该属性的访问（读取、写入或删除）会被描述符的方法拦截并处理。\r\n   - 这使得描述符可以自定义属性的行为，比如验证数据、延迟加载、日志记录等。\r\n\r\n3. **分类**：\r\n   - **数据描述符**：同时实现了 `__get__` 和 `__set__` 的描述符。\r\n   - **非数据描述符**：只实现了 `__get__` 的描述符。\r\n\r\n---\r\n\r\n### 示例代码解析\r\n\r\n```python\r\nclass Descriptor:\r\n    def __get__(self, instance, owner):\r\n        # 获取属性值\r\n        return instance._value\r\n\r\n    def __set__(self, instance, value):\r\n        # 设置属性值\r\n        instance._value = value\r\n\r\n\r\nclass MyClass:\r\n    attribute = Descriptor()  # 将描述符绑定到类属性上\r\n\r\n\r\nobj = MyClass()\r\nobj.attribute = 42  # 调用描述符的 __set__ 方法\r\nprint(obj.attribute)  # 调用描述符的 __get__ 方法，输出：42\r\n```\r\n\r\n### 分析\r\n\r\n1. **描述符类 (`Descriptor`)**：\r\n   - `__get__`：当访问 `obj.attribute` 时被调用，返回 `instance._value`。\r\n   - `__set__`：当执行 `obj.attribute = 42` 时被调用，将值存储在 `instance._value` 中。\r\n\r\n2. **使用描述符的类 (`MyClass`)**：\r\n   - `attribute` 是 `Descriptor` 的实例，因此对它的访问和赋值会触发描述符的方法。\r\n\r\n3. **实例对象 (`obj`)**：\r\n   - `obj.attribute = 42` 实际上调用了 `Descriptor.__set__` 方法，将值存储在 `obj._value` 中。\r\n   - `print(obj.attribute)` 实际上调用了 `Descriptor.__get__` 方法，返回存储的值。\r\n\r\n---\r\n\r\n### 描述符的应用场景\r\n\r\n1. **属性验证**：\r\n   描述符可以用来确保属性值满足某些条件。\r\n\r\n   ```python\r\n   class PositiveNumber:\r\n       def __get__(self, instance, owner):\r\n           return instance._value\r\n\r\n       def __set__(self, instance, value):\r\n           if value < 0:\r\n               raise ValueError("Value must be positive")\r\n           instance._value = value\r\n\r\n   class Item:\r\n       price = PositiveNumber()\r\n\r\n   item = Item()\r\n   item.price = 100  # 正常\r\n   item.price = -10  # 抛出 ValueError\r\n   ```\r\n\r\n2. **延迟加载**：\r\n   描述符可以实现延迟加载属性值的功能。\r\n\r\n   ```python\r\n   class LazyProperty:\r\n       def __init__(self, func):\r\n           self.func = func\r\n\r\n       def __get__(self, instance, owner):\r\n           if instance is None:\r\n               return self\r\n           value = self.func(instance)\r\n           setattr(instance, self.func.__name__, value)\r\n           return value\r\n\r\n   class MyClass:\r\n       @LazyProperty\r\n       def expensive_calculation(self):\r\n           print("Calculating...")\r\n           return 42\r\n\r\n   obj = MyClass()\r\n   print(obj.expensive_calculation)  # 计算一次\r\n   print(obj.expensive_calculation)  # 直接返回缓存值\r\n   ```\r\n\r\n3. **日志记录**：\r\n   描述符可以记录对属性的访问。\r\n\r\n   ```python\r\n   class LoggedAttribute:\r\n       def __get__(self, instance, owner):\r\n           print(f"Accessing attribute")\r\n           return instance._value\r\n\r\n       def __set__(self, instance, value):\r\n           print(f"Setting attribute to {value}")\r\n           instance._value = value\r\n\r\n   class MyClass:\r\n       attribute = LoggedAttribute()\r\n\r\n   obj = MyClass()\r\n   obj.attribute = 42\r\n   print(obj.attribute)\r\n   ```'}}]);
//# sourceMappingURL=8030.1bfcb01e.js.map