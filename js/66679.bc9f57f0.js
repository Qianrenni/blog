"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[66679],{66679:function(r,n,i){i.r(n),n["default"]='## **5. 指针与函数**\r\n\r\n### **5.1 函数参数传递中的指针**\r\n\r\n- 指针作为函数参数可以实现按地址传递，从而修改原始变量。\r\n- 示例：\r\n\r\n  ```c\r\n  void increment(int *x) {\r\n      (*x)++;\r\n  }\r\n\r\n  int main() {\r\n      int a = 5;\r\n      increment(&a);  // 按地址传递\r\n      printf("a = %d\\n", a);  // 输出：6\r\n      return 0;\r\n  }\r\n  ```\r\n\r\n### **5.2 返回指针的函数**\r\n\r\n- 函数可以返回指针，指向动态分配的内存或其他数据。\r\n- 示例：\r\n\r\n  ```c\r\n  int* createArray(int size) {\r\n      int *arr = (int *)malloc(size * sizeof(int));\r\n      for (int i = 0; i < size; i++) {\r\n          arr[i] = i + 1;\r\n      }\r\n      return arr;\r\n  }\r\n\r\n  int main() {\r\n      int *arr = createArray(5);\r\n      for (int i = 0; i < 5; i++) {\r\n          printf("%d ", arr[i]);\r\n      }\r\n      free(arr);  // 释放动态分配的内存\r\n      return 0;\r\n  }\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=66679.bc9f57f0.js.map