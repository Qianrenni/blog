{"version":3,"file":"js/75143.2311d982.js","mappings":"qHAAA,ylB","sources":["webpack://myblog/./src/assets/md/database/content/042-SQL注入及其防范.md"],"sourcesContent":["export default \"## **SQL注入及其防范**\\r\\n\\r\\n**SQL注入**是一种代码注入技术，攻击者通过将恶意的SQL语句插入到查询字符串中，从而执行非授权的SQL命令。这可能导致数据泄露、数据丢失或系统被完全控制等严重后果。\\r\\n\\r\\n- **防范措施**:\\r\\n  - **使用参数化查询**: 不要直接拼接用户输入到SQL查询中，而是使用占位符并传递参数。\\r\\n\\r\\n    ```sql\\r\\n    -- 不安全的方式\\r\\n    SELECT * FROM users WHERE username = 'admin' --'; DROP TABLE users; --\\r\\n    \\r\\n    -- 安全的方式（以Python为例）\\r\\n    cursor.execute(\\\"SELECT * FROM users WHERE username = %s\\\", (username,))\\r\\n    ```\\r\\n\\r\\n  - **存储过程和函数**: 使用存储过程可以减少SQL注入的风险，因为它们限制了可以直接执行的SQL语句。\\r\\n  - **最小权限原则**: 对数据库用户的权限进行严格控制，确保应用程序仅能访问必要的资源。\\r\\n  - **输入验证**: 验证所有来自外部的数据，确保其符合预期格式。\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}