"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[2202],{82202:function(n,r,e){e.r(r),r["default"]='## **6.6 命令模式**\r\n\r\n### **定义与特点**\r\n\r\n命令模式将请求封装为对象，从而使你可以用不同的请求对客户进行参数化。\r\n\r\n### **将请求封装为对象**\r\n\r\n- 命令对象包含执行操作的方法。\r\n- 调用者通过命令对象间接调用接收者。\r\n\r\n### **示例：遥控器控制家电**\r\n\r\n```python\r\nfrom abc import ABC, abstractmethod\r\n\r\n# 命令接口\r\nclass Command(ABC):\r\n    @abstractmethod\r\n    def execute(self):\r\n        pass\r\n\r\n# 具体命令A\r\nclass LightOnCommand(Command):\r\n    def __init__(self, light):\r\n        self.light = light\r\n\r\n    def execute(self):\r\n        self.light.turn_on()\r\n\r\n# 接收者\r\nclass Light:\r\n    def turn_on(self):\r\n        print("Light is on.")\r\n\r\n# 遥控器\r\nclass RemoteControl:\r\n    def __init__(self):\r\n        self.command = None\r\n\r\n    def set_command(self, command):\r\n        self.command = command\r\n\r\n    def press_button(self):\r\n        self.command.execute()\r\n\r\n# 使用示例\r\nlight = Light()\r\nlight_on = LightOnCommand(light)\r\n\r\nremote = RemoteControl()\r\nremote.set_command(light_on)\r\nremote.press_button()  # 输出: Light is on.\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=2202.9de86f85.js.map