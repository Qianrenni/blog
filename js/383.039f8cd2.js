"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[383],{20383:function(n,r,a){a.r(r),r["default"]='## **二、Java 9-17 的新特性**\r\n\r\n### **1. 模块化系统（JPMS）**\r\n\r\nJava 9 引入了模块化系统（Java Platform Module System, JPMS），通过 `module-info.java` 文件定义模块及其依赖关系，增强了项目的可维护性和安全性。\r\n\r\n#### **示例：**\r\n\r\n```java\r\n// module-info.java\r\nmodule com.example.myapp {\r\n    requires java.sql; // 声明依赖\r\n    exports com.example.myapp.api; // 导出包\r\n}\r\n```\r\n\r\n#### **优势：**\r\n\r\n- 提高封装性：模块间明确依赖关系。\r\n- 减少运行时依赖冲突。\r\n- 支持更小的运行时镜像。\r\n\r\n---\r\n\r\n### **2. var 关键字（局部变量类型推断）**\r\n\r\nJava 10 引入了 `var` 关键字，允许编译器根据赋值自动推断局部变量的类型。\r\n\r\n#### **示例：**\r\n\r\n```java\r\nvar list = new ArrayList<String>(); // 编译器推断为 ArrayList<String>\r\nlist.add("Java");\r\nSystem.out.println(list); // 输出: [Java]\r\n```\r\n\r\n#### **限制：**\r\n\r\n- 仅适用于局部变量。\r\n- 不适用于方法参数、字段或返回值。\r\n\r\n#### **优势：**\r\n\r\n- 简化代码，减少冗长的类型声明。\r\n\r\n---\r\n\r\n### **3. 新增的集合工厂方法**\r\n\r\nJava 9 引入了 `List.of`、`Set.of` 和 `Map.of` 等工厂方法，用于快速创建不可变集合。\r\n\r\n#### **示例：**\r\n\r\n```java\r\nList<String> list = List.of("A", "B", "C");\r\nSet<Integer> set = Set.of(1, 2, 3);\r\nMap<String, Integer> map = Map.of("Alice", 25, "Bob", 30);\r\n\r\nSystem.out.println(list); // 输出: [A, B, C]\r\nSystem.out.println(set);  // 输出: [1, 2, 3]\r\nSystem.out.println(map);  // 输出: {Alice=25, Bob=30}\r\n```\r\n\r\n#### **特点：**\r\n\r\n- 创建的集合是不可变的。\r\n- 避免空指针异常（不允许包含 `null` 值）。\r\n\r\n---\r\n\r\n### **4. 文本块（Text Blocks）**\r\n\r\nJava 15 引入了文本块（Text Blocks），用于简化多行字符串的书写。\r\n\r\n#### **语法：**\r\n\r\n```java\r\nString json = """\r\n{\r\n    "name": "Alice",\r\n    "age": 25\r\n}\r\n""";\r\nSystem.out.println(json);\r\n```\r\n\r\n#### **优势：**\r\n\r\n- 自动处理换行符和缩进。\r\n- 提高代码可读性。\r\n\r\n---'}}]);
//# sourceMappingURL=383.039f8cd2.js.map