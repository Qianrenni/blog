{"version":3,"file":"js/64682.9c09bbe8.js","mappings":"qHAAA,m1B","sources":["webpack://myblog/./src/assets/md/c/content/027-4 位域.md"],"sourcesContent":["export default \"## **4. 位域**\\r\\n\\r\\n位域（bit field）是一种特殊的结构体成员，用于精确控制每个成员占用的位数。\\r\\n\\r\\n### **4.1 位域的概念与应用场景**\\r\\n\\r\\n#### **1. 定义**\\r\\n\\r\\n- 在结构体中定义位域，限制成员占用的位数。\\r\\n- **语法**：\\r\\n\\r\\n  ```c\\r\\n  struct bit_field_name {\\r\\n      unsigned int member1 : num_bits;\\r\\n      unsigned int member2 : num_bits;\\r\\n      ...\\r\\n  };\\r\\n  ```\\r\\n\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  struct BitField {\\r\\n      unsigned int flag1 : 1;  // 占用 1 位\\r\\n      unsigned int flag2 : 1;  // 占用 1 位\\r\\n      unsigned int value : 6;  // 占用 6 位\\r\\n  };\\r\\n  ```\\r\\n\\r\\n#### **2. 应用场景**\\r\\n\\r\\n- **节省内存**：当需要存储大量布尔值或小范围整数时，位域可以显著减少内存占用。\\r\\n- **硬件编程**：在嵌入式系统中，位域常用于操作寄存器或协议头。\\r\\n\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  struct BitField bf = {1, 0, 42};  // 初始化位域\\r\\n  printf(\\\"flag1: %u\\\\n\\\", bf.flag1);\\r\\n  printf(\\\"flag2: %u\\\\n\\\", bf.flag2);\\r\\n  printf(\\\"value: %u\\\\n\\\", bf.value);\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}