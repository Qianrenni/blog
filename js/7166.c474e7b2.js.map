{"version":3,"file":"js/7166.c474e7b2.js","mappings":"oHAAA,inC","sources":["webpack://myblog/./src/assets/md/c/content/037-1 内存布局.md"],"sourcesContent":["export default \"## **1. 内存布局**\\r\\n\\r\\nC 程序的内存可以划分为以下几个区域，每个区域有不同的用途和特性：\\r\\n\\r\\n### **1.1 栈（Stack）**\\r\\n\\r\\n- **特点**：\\r\\n  - 用于存储函数调用时的局部变量、函数参数和返回地址。\\r\\n  - 内存分配和释放由编译器自动管理。\\r\\n  - 分配速度快，但容量有限。\\r\\n  - 遵循“后进先出”（LIFO）原则。\\r\\n- **示例**：\\r\\n\\r\\n  ```c\\r\\n  void func() {\\r\\n      int x = 10;  // 局部变量存储在栈上\\r\\n  }\\r\\n  ```\\r\\n\\r\\n  - 当 `func` 被调用时，`x` 在栈上分配；当 `func` 返回时，`x` 自动释放。\\r\\n\\r\\n---\\r\\n\\r\\n### **1.2 堆（Heap）**\\r\\n\\r\\n- **特点**：\\r\\n  - 用于动态内存分配（如 `malloc`, `calloc`, `realloc`）。\\r\\n  - 内存分配和释放需要程序员手动管理。\\r\\n  - 容量较大，但分配速度较慢。\\r\\n  - 动态分配的内存如果不释放会导致内存泄漏。\\r\\n- **示例**：\\r\\n\\r\\n  ```c\\r\\n  int *arr = (int *)malloc(5 * sizeof(int));  // 动态分配内存\\r\\n  free(arr);  // 手动释放内存\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **1.3 全局/静态区**\\r\\n\\r\\n- **特点**：\\r\\n  - 存储全局变量和静态变量。\\r\\n  - 内存在程序启动时分配，在程序结束时释放。\\r\\n  - 生命周期贯穿整个程序运行期间。\\r\\n- **示例**：\\r\\n\\r\\n  ```c\\r\\n  int global_var = 42;  // 全局变量\\r\\n  static int static_var = 10;  // 静态变量\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **1.4 常量区**\\r\\n\\r\\n- **特点**：\\r\\n  - 存储常量数据（如字符串字面量、`const` 变量）。\\r\\n  - 内容不可修改。\\r\\n  - 生命周期贯穿整个程序运行期间。\\r\\n- **示例**：\\r\\n\\r\\n  ```c\\r\\n  const char *str = \\\"Hello\\\";  // 字符串 \\\"Hello\\\" 存储在常量区\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}