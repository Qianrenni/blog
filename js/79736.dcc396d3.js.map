{"version":3,"file":"js/79736.dcc396d3.js","mappings":"qHAAA,qsC","sources":["webpack://myblog/./src/assets/md/software/content/026-53 代理模式.md"],"sourcesContent":["export default \"## **5.3 代理模式**\\r\\n\\r\\n### **定义与特点**\\r\\n\\r\\n代理模式为某对象提供一个代理，以控制对该对象的访问。代理可以在访问对象时添加额外的操作，例如权限检查、延迟加载等。\\r\\n\\r\\n### **静态代理与动态代理**\\r\\n\\r\\n- **静态代理**：手动编写代理类。\\r\\n- **动态代理**：运行时动态生成代理类。\\r\\n\\r\\n### **示例：远程代理、虚拟代理**\\r\\n\\r\\n```python\\r\\n# 抽象主题\\r\\nclass Subject:\\r\\n    def request(self):\\r\\n        pass\\r\\n\\r\\n# 真实主题\\r\\nclass RealSubject(Subject):\\r\\n    def request(self):\\r\\n        return \\\"RealSubject: Handling request.\\\"\\r\\n\\r\\n# 代理\\r\\nclass Proxy(Subject):\\r\\n    def __init__(self, real_subject):\\r\\n        self.real_subject = real_subject\\r\\n\\r\\n    def request(self):\\r\\n        if self.check_access():\\r\\n            result = self.real_subject.request()\\r\\n            self.log_access()\\r\\n            return result\\r\\n\\r\\n    def check_access(self):\\r\\n        print(\\\"Proxy: Checking access prior to firing a real request.\\\")\\r\\n        return True\\r\\n\\r\\n    def log_access(self):\\r\\n        print(\\\"Proxy: Logging the time of request.\\\")\\r\\n\\r\\n# 使用示例\\r\\nreal_subject = RealSubject()\\r\\nproxy = Proxy(real_subject)\\r\\nprint(proxy.request())\\r\\n# 输出:\\r\\n# Proxy: Checking access prior to firing a real request.\\r\\n# RealSubject: Handling request.\\r\\n# Proxy: Logging the time of request.\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}