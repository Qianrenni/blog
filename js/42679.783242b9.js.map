{"version":3,"file":"js/42679.783242b9.js","mappings":"qHAAA,izB","sources":["webpack://myblog/./src/assets/md/database/content/028-3 事务隔离级别.md"],"sourcesContent":["export default \"## **3. 事务隔离级别**\\r\\n\\r\\n事务的隔离级别定义了事务之间如何相互影响，以及事务对未提交数据的可见性。不同的隔离级别可以平衡性能和一致性需求。常见的隔离级别包括以下四种：\\r\\n\\r\\n1. **READ UNCOMMITTED（读未提交）**:\\r\\n   - 最低的隔离级别。\\r\\n   - 事务可以读取其他事务尚未提交的数据。\\r\\n   - 可能导致 **脏读（Dirty Read）**、**不可重复读（Non-Repeatable Read）** 和 **幻读（Phantom Read）**。\\r\\n\\r\\n2. **READ COMMITTED（读已提交）**:\\r\\n   - 事务只能读取其他事务已经提交的数据。\\r\\n   - 避免了脏读，但可能发生不可重复读和幻读。\\r\\n\\r\\n3. **REPEATABLE READ（可重复读）**:\\r\\n   - 确保在同一事务中多次读取同一数据时，结果是一致的。\\r\\n   - 避免了脏读和不可重复读，但可能发生幻读。\\r\\n\\r\\n4. **SERIALIZABLE（可串行化）**:\\r\\n   - 最高的隔离级别。\\r\\n   - 完全避免脏读、不可重复读和幻读。\\r\\n   - 事务逐个执行，严格保证一致性，但性能开销最大。\\r\\n\\r\\n**设置隔离级别的语法：**\\r\\n\\r\\n```sql\\r\\nSET TRANSACTION ISOLATION LEVEL isolation_level;\\r\\n```\\r\\n\\r\\n**示例：**\\r\\n\\r\\n```sql\\r\\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED;\\r\\nBEGIN TRANSACTION;\\r\\n-- 执行事务操作\\r\\nCOMMIT;\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}