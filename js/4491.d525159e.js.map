{"version":3,"file":"js/4491.d525159e.js","mappings":"oHAAA,m1O","sources":["webpack://myblog/./src/assets/md/java/content/004-四集合框架.md"],"sourcesContent":["export default \"# **四、集合框架**\\r\\n\\r\\n以下是关于 **Java 集合框架** 的详细讲解，涵盖集合概述、具体实现类、工具类以及泛型的使用。\\r\\n\\r\\n---\\r\\n\\r\\n## **1. 集合概述**\\r\\n\\r\\n### **1.1 集合框架的层次结构**\\r\\n\\r\\nJava 集合框架（Collection Framework）提供了一组接口和类，用于存储和操作对象的集合。它的主要接口包括 `Collection` 和 `Map`，其层次结构如下：\\r\\n\\r\\n#### **1.1.1 Collection 接口**\\r\\n\\r\\n- **定义**：\\r\\n  - 是集合的根接口，表示一组对象（称为元素）。\\r\\n- **子接口**：\\r\\n  - `List`：有序集合，允许重复元素。\\r\\n  - `Set`：无序集合，不允许重复元素。\\r\\n  - `Queue`：队列，用于按特定顺序处理元素。\\r\\n- **实现类**：\\r\\n  - `ArrayList`, `LinkedList`（实现 `List`）\\r\\n  - `HashSet`, `TreeSet`, `LinkedHashSet`（实现 `Set`）\\r\\n\\r\\n#### **1.1.2 Map 接口**\\r\\n\\r\\n- **定义**：\\r\\n  - 表示键值对的集合，每个键最多对应一个值。\\r\\n- **实现类**：\\r\\n  - `HashMap`：基于哈希表实现，无序。\\r\\n  - `TreeMap`：基于红黑树实现，按键排序。\\r\\n  - `LinkedHashMap`：基于哈希表和链表实现，保持插入顺序。\\r\\n\\r\\n---\\r\\n\\r\\n### **1.2 Collection 接口与 Map 接口的区别**\\r\\n\\r\\n| 特性                   | Collection                          | Map                              |\\r\\n|------------------------|-------------------------------------|----------------------------------|\\r\\n| **数据结构**            | 存储单个元素                       | 存储键值对                      |\\r\\n| **是否允许重复**        | 允许（`List`）或不允许（`Set`）     | 键不允许重复，值可以重复        |\\r\\n| **遍历方式**            | 使用迭代器或增强型 for 循环         | 遍历键、值或键值对              |\\r\\n| **典型实现**            | `ArrayList`, `HashSet`             | `HashMap`, `TreeMap`            |\\r\\n\\r\\n---\\r\\n\\r\\n## **2. List**\\r\\n\\r\\n### **2.1 ArrayList 与 LinkedList 的区别与使用场景**\\r\\n\\r\\n#### **2.1.1 ArrayList**\\r\\n\\r\\n- **特点**：\\r\\n  - 基于动态数组实现。\\r\\n  - 查询快（通过索引访问），增删慢（需要移动元素）。\\r\\n- **适用场景**：\\r\\n  - 需要频繁随机访问元素时。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  List<String> list = new ArrayList<>();\\r\\n  list.add(\\\"A\\\");\\r\\n  list.add(\\\"B\\\");\\r\\n  System.out.println(list.get(0)); // 输出：A\\r\\n  ```\\r\\n\\r\\n#### **2.1.2 LinkedList**\\r\\n\\r\\n- **特点**：\\r\\n  - 基于双向链表实现。\\r\\n  - 插入和删除快（只需调整指针），查询慢（需要从头或尾遍历）。\\r\\n- **适用场景**：\\r\\n  - 需要频繁插入或删除元素时。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  List<String> list = new LinkedList<>();\\r\\n  list.add(\\\"A\\\");\\r\\n  list.add(\\\"B\\\");\\r\\n  list.remove(0); // 删除第一个元素\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **2.2 遍历方式**\\r\\n\\r\\n#### **2.2.1 for 循环**\\r\\n\\r\\n```java\\r\\nList<String> list = Arrays.asList(\\\"A\\\", \\\"B\\\", \\\"C\\\");\\r\\nfor (int i = 0; i < list.size(); i++) {\\r\\n    System.out.println(list.get(i));\\r\\n}\\r\\n```\\r\\n\\r\\n#### **2.2.2 foreach 循环**\\r\\n\\r\\n```java\\r\\nList<String> list = Arrays.asList(\\\"A\\\", \\\"B\\\", \\\"C\\\");\\r\\nfor (String item : list) {\\r\\n    System.out.println(item);\\r\\n}\\r\\n```\\r\\n\\r\\n#### **2.2.3 Iterator**\\r\\n\\r\\n```java\\r\\nList<String> list = Arrays.asList(\\\"A\\\", \\\"B\\\", \\\"C\\\");\\r\\nIterator<String> iterator = list.iterator();\\r\\nwhile (iterator.hasNext()) {\\r\\n    System.out.println(iterator.next());\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## **3. Set**\\r\\n\\r\\n### **3.1 HashSet**\\r\\n\\r\\n- **特点**：\\r\\n  - 基于哈希表实现。\\r\\n  - 无序且不允许重复元素。\\r\\n- **适用场景**：\\r\\n  - 需要快速查找元素时。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  Set<String> set = new HashSet<>();\\r\\n  set.add(\\\"A\\\");\\r\\n  set.add(\\\"B\\\");\\r\\n  set.add(\\\"A\\\"); // 不会添加重复元素\\r\\n  System.out.println(set); // 输出：[A, B]\\r\\n  ```\\r\\n\\r\\n### **3.2 TreeSet**\\r\\n\\r\\n- **特点**：\\r\\n  - 基于红黑树实现。\\r\\n  - 按自然顺序或自定义顺序排序。\\r\\n- **适用场景**：\\r\\n  - 需要有序存储且不重复的元素时。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  Set<Integer> set = new TreeSet<>();\\r\\n  set.add(3);\\r\\n  set.add(1);\\r\\n  set.add(2);\\r\\n  System.out.println(set); // 输出：[1, 2, 3]\\r\\n  ```\\r\\n\\r\\n### **3.3 LinkedHashSet**\\r\\n\\r\\n- **特点**：\\r\\n  - 基于哈希表和链表实现。\\r\\n  - 保持插入顺序且不允许重复元素。\\r\\n- **适用场景**：\\r\\n  - 需要保持插入顺序时。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  Set<String> set = new LinkedHashSet<>();\\r\\n  set.add(\\\"A\\\");\\r\\n  set.add(\\\"B\\\");\\r\\n  set.add(\\\"C\\\");\\r\\n  System.out.println(set); // 输出：[A, B, C]\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n## **4. Map**\\r\\n\\r\\n### **4.1 HashMap**\\r\\n\\r\\n- **特点**：\\r\\n  - 基于哈希表实现。\\r\\n  - 无序且允许一个 `null` 键和多个 `null` 值。\\r\\n- **适用场景**：\\r\\n  - 需要快速查找键值对时。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  Map<String, Integer> map = new HashMap<>();\\r\\n  map.put(\\\"A\\\", 1);\\r\\n  map.put(\\\"B\\\", 2);\\r\\n  System.out.println(map.get(\\\"A\\\")); // 输出：1\\r\\n  ```\\r\\n\\r\\n### **4.2 TreeMap**\\r\\n\\r\\n- **特点**：\\r\\n  - 基于红黑树实现。\\r\\n  - 按键排序（自然顺序或自定义顺序）。\\r\\n- **适用场景**：\\r\\n  - 需要按键排序的键值对时。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  Map<String, Integer> map = new TreeMap<>();\\r\\n  map.put(\\\"C\\\", 3);\\r\\n  map.put(\\\"A\\\", 1);\\r\\n  map.put(\\\"B\\\", 2);\\r\\n  System.out.println(map); // 输出：{A=1, B=2, C=3}\\r\\n  ```\\r\\n\\r\\n### **4.3 LinkedHashMap**\\r\\n\\r\\n- **特点**：\\r\\n  - 基于哈希表和链表实现。\\r\\n  - 保持插入顺序。\\r\\n- **适用场景**：\\r\\n  - 需要保持插入顺序的键值对时。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  Map<String, Integer> map = new LinkedHashMap<>();\\r\\n  map.put(\\\"A\\\", 1);\\r\\n  map.put(\\\"B\\\", 2);\\r\\n  map.put(\\\"C\\\", 3);\\r\\n  System.out.println(map); // 输出：{A=1, B=2, C=3}\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n## **5. 工具类**\\r\\n\\r\\n### **5.1 Collections 工具类**\\r\\n\\r\\n- **常用方法**：\\r\\n  - `sort(List<T> list)`：对列表进行排序。\\r\\n  - `reverse(List<T> list)`：反转列表。\\r\\n  - `shuffle(List<T> list)`：随机打乱列表。\\r\\n  - `synchronizedList(List<T> list)`：返回线程安全的列表。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  List<Integer> list = new ArrayList<>(Arrays.asList(3, 1, 2));\\r\\n  Collections.sort(list); // 排序\\r\\n  System.out.println(list); // 输出：[1, 2, 3]\\r\\n\\r\\n  Collections.reverse(list); // 反转\\r\\n  System.out.println(list); // 输出：[3, 2, 1]\\r\\n  ```\\r\\n\\r\\n### **5.2 Arrays 工具类**\\r\\n\\r\\n- **常用方法**：\\r\\n  - `sort(T[] array)`：对数组进行排序。\\r\\n  - `binarySearch(T[] array, T key)`：在已排序数组中查找元素。\\r\\n  - `asList(T... a)`：将数组转换为列表。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  int[] array = {3, 1, 2};\\r\\n  Arrays.sort(array); // 排序\\r\\n  System.out.println(Arrays.toString(array)); // 输出：[1, 2, 3]\\r\\n\\r\\n  int index = Arrays.binarySearch(array, 2); // 查找\\r\\n  System.out.println(index); // 输出：1\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n## **6. 泛型**\\r\\n\\r\\n### **6.1 泛型的基本概念**\\r\\n\\r\\n- **定义**：\\r\\n  - 泛型允许在编译时指定类型参数，从而提高代码的安全性和复用性。\\r\\n- **语法**：\\r\\n  - `<T>` 表示类型参数。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  List<String> list = new ArrayList<>();\\r\\n  list.add(\\\"A\\\");\\r\\n  String value = list.get(0); // 不需要强制类型转换\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **6.2 泛型类、泛型方法、通配符的使用**\\r\\n\\r\\n#### **6.2.1 泛型类**\\r\\n\\r\\n- **定义**：\\r\\n  - 类中定义类型参数。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  public class Box<T> {\\r\\n      private T item;\\r\\n\\r\\n      public void setItem(T item) {\\r\\n          this.item = item;\\r\\n      }\\r\\n\\r\\n      public T getItem() {\\r\\n          return item;\\r\\n      }\\r\\n  }\\r\\n\\r\\n  Box<String> box = new Box<>();\\r\\n  box.setItem(\\\"Hello\\\");\\r\\n  System.out.println(box.getItem()); // 输出：Hello\\r\\n  ```\\r\\n\\r\\n#### **6.2.2 泛型方法**\\r\\n\\r\\n- **定义**：\\r\\n  - 方法中定义类型参数。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  public <T> void printArray(T[] array) {\\r\\n      for (T element : array) {\\r\\n          System.out.println(element);\\r\\n      }\\r\\n  }\\r\\n\\r\\n  String[] array = {\\\"A\\\", \\\"B\\\", \\\"C\\\"};\\r\\n  printArray(array);\\r\\n  ```\\r\\n\\r\\n#### **6.2.3 通配符**\\r\\n\\r\\n- **定义**：\\r\\n  - `?` 表示未知类型。\\r\\n  - `? extends T`：上限，表示类型必须是 `T` 或其子类。\\r\\n  - `? super T`：下限，表示类型必须是 `T` 或其父类。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  public static void processElements(List<? extends Number> list) {\\r\\n      for (Number num : list) {\\r\\n          System.out.println(num);\\r\\n      }\\r\\n  }\\r\\n\\r\\n  List<Integer> integers = Arrays.asList(1, 2, 3);\\r\\n  processElements(integers);\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **6.3 泛型的限制**\\r\\n\\r\\n- 不能实例化泛型类型的数组：\\r\\n\\r\\n  ```java\\r\\n  T[] array = new T[10]; // 编译错误\\r\\n  ```\\r\\n\\r\\n- 不能使用基本类型作为泛型参数：\\r\\n\\r\\n  ```java\\r\\n  List<int> list = new ArrayList<>(); // 编译错误\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n## **总结**\\r\\n\\r\\n- **集合框架** 提供了丰富的接口和实现类，用于存储和操作对象集合。\\r\\n- **List** 强调有序性，`Set` 强调唯一性，`Map` 强调键值对。\\r\\n- **工具类** 如 `Collections` 和 `Arrays` 提供了便捷的操作方法。\\r\\n- **泛型** 提高了代码的类型安全性和复用性。\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}