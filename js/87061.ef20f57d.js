"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[87061],{87061:function(r,n,e){e.r(n),n["default"]='## **1. 链表（Linked List）**\r\n\r\n链表是一种线性数据结构，由一系列节点组成，每个节点包含数据和指向下一个节点的指针。\r\n\r\n### **1.1 单向链表**\r\n\r\n- **特点**：\r\n  - 每个节点包含两个部分：数据部分和指向下一个节点的指针。\r\n  - 最后一个节点的指针为 `NULL`，表示链表结束。\r\n\r\n- **定义**：\r\n\r\n  ```c\r\n  struct Node {\r\n      int data;\r\n      struct Node *next;\r\n  };\r\n  ```\r\n\r\n- **实现**：\r\n\r\n  ```c\r\n  #include <stdio.h>\r\n  #include <stdlib.h>\r\n\r\n  // 定义链表节点\r\n  struct Node {\r\n      int data;\r\n      struct Node *next;\r\n  };\r\n\r\n  // 插入节点到链表头部\r\n  void insert(struct Node **head, int value) {\r\n      struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));\r\n      newNode->data = value;\r\n      newNode->next = *head;\r\n      *head = newNode;\r\n  }\r\n\r\n  // 打印链表\r\n  void printList(struct Node *head) {\r\n      struct Node *current = head;\r\n      while (current != NULL) {\r\n          printf("%d -> ", current->data);\r\n          current = current->next;\r\n      }\r\n      printf("NULL\\n");\r\n  }\r\n\r\n  // 释放链表内存\r\n  void freeList(struct Node *head) {\r\n      struct Node *tmp;\r\n      while (head != NULL) {\r\n          tmp = head;\r\n          head = head->next;\r\n          free(tmp);\r\n      }\r\n  }\r\n\r\n  int main() {\r\n      struct Node *head = NULL;\r\n\r\n      insert(&head, 10);\r\n      insert(&head, 20);\r\n      insert(&head, 30);\r\n\r\n      printList(head);  // 输出：30 -> 20 -> 10 -> NULL\r\n\r\n      freeList(head);\r\n      return 0;\r\n  }\r\n  ```\r\n\r\n---\r\n\r\n### **1.2 双向链表**\r\n\r\n- **特点**：\r\n  - 每个节点包含三个部分：数据部分、指向前一个节点的指针和指向下一个节点的指针。\r\n\r\n- **定义**：\r\n\r\n  ```c\r\n  struct Node {\r\n      int data;\r\n      struct Node *prev;\r\n      struct Node *next;\r\n  };\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=87061.ef20f57d.js.map