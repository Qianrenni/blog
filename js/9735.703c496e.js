"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[9735],{59735:function(n,e,r){r.r(e),e["default"]='## **6.7 迭代器模式**\r\n\r\n### **定义与特点**\r\n\r\n迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而不需要暴露其底层表示。\r\n\r\n### **提供统一访问集合元素的方式**\r\n\r\n- 迭代器封装了遍历逻辑。\r\n\r\n### **示例：遍历集合**\r\n\r\n```python\r\nclass Iterator:\r\n    def has_next(self):\r\n        pass\r\n\r\n    def next(self):\r\n        pass\r\n\r\nclass ConcreteIterator(Iterator):\r\n    def __init__(self, collection):\r\n        self.collection = collection\r\n        self.index = 0\r\n\r\n    def has_next(self):\r\n        return self.index < len(self.collection)\r\n\r\n    def next(self):\r\n        if self.has_next():\r\n            item = self.collection[self.index]\r\n            self.index += 1\r\n            return item\r\n\r\nclass Collection:\r\n    def __init__(self):\r\n        self.items = []\r\n\r\n    def add_item(self, item):\r\n        self.items.append(item)\r\n\r\n    def create_iterator(self):\r\n        return ConcreteIterator(self.items)\r\n\r\n# 使用示例\r\ncollection = Collection()\r\ncollection.add_item("Item1")\r\ncollection.add_item("Item2")\r\n\r\niterator = collection.create_iterator()\r\nwhile iterator.has_next():\r\n    print(iterator.next())\r\n# 输出:\r\n# Item1\r\n# Item2\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=9735.703c496e.js.map