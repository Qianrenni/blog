"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[96647],{96647:function(n,r,t){t.r(r),r["default"]="## **文件读写**\r\n\r\n### **1. 基于字节流的文件读写**\r\n\r\n#### **1.1 字节流简介**\r\n\r\n- **定义**：字节流是以二进制形式读写文件的方式，适用于处理非文本数据（如图片、音频、视频等）或需要精确控制数据格式的场景。\r\n- **模式**：\r\n  - `'rb'`：以只读模式打开二进制文件。\r\n  - `'wb'`：以写入模式打开二进制文件（会覆盖原有内容）。\r\n  - `'ab'`：以追加模式打开二进制文件。\r\n  - `'r+b'` 或 `'rb+'`：以读写模式打开二进制文件。\r\n\r\n#### **1.2 示例代码**\r\n\r\n- **(1) 写入二进制文件**\r\n\r\n```python\r\n# 写入字节数据到文件\r\ndata = b'\\x00\\xFF\\x7F\\x80'  # 字节数据\r\nwith open('binary_file.bin', 'wb') as file:\r\n    file.write(data)\r\n```\r\n\r\n- **(2) 读取二进制文件**\r\n\r\n```python\r\n# 从文件中读取字节数据\r\nwith open('binary_file.bin', 'rb') as file:\r\n    content = file.read()\r\nprint(content)  # 输出: b'\\x00\\xFF\\x7F\\x80'\r\n```\r\n\r\n- **(3) 追加二进制数据**\r\n\r\n```python\r\n# 向文件追加字节数据\r\nnew_data = b'\\x01\\x02'\r\nwith open('binary_file.bin', 'ab') as file:\r\n    file.write(new_data)\r\n```\r\n\r\n#### **1.3 注意事项**\r\n\r\n- 字节流直接操作的是原始的字节数据，不会对数据进行任何编码或解码。\r\n- 适合处理非文本文件（如图片、音频、视频等），或者需要逐字节处理数据的场景。\r\n\r\n---\r\n\r\n### **2. 基于字符流的文件读写**\r\n\r\n#### **2.1 字符流简介**\r\n\r\n- **定义**：字符流是以文本形式读写文件的方式，适用于处理文本数据。Python 会在内部自动进行字符编码和解码。\r\n- **模式**：\r\n  - `'r'`：以只读模式打开文本文件（默认模式）。\r\n  - `'w'`：以写入模式打开文本文件（会覆盖原有内容）。\r\n  - `'a'`：以追加模式打开文本文件。\r\n  - `'r+'` 或 `'w+'`：以读写模式打开文本文件。\r\n\r\n#### **2.2 示例代码**\r\n\r\n- **(1) 写入文本文件**\r\n\r\n```python\r\n# 写入字符串到文件\r\ntext = \"Hello, World!\"\r\nwith open('text_file.txt', 'w', encoding='utf-8') as file:\r\n    file.write(text)\r\n```\r\n\r\n- **(2) 读取文本文件**\r\n\r\n```python\r\n# 从文件中读取字符串\r\nwith open('text_file.txt', 'r', encoding='utf-8') as file:\r\n    content = file.read()\r\nprint(content)  # 输出: Hello, World!\r\n```\r\n\r\n- **(3) 追加文本数据**\r\n\r\n```python\r\n# 向文件追加字符串\r\nnew_text = \"\\nThis is a new line.\"\r\nwith open('text_file.txt', 'a', encoding='utf-8') as file:\r\n    file.write(new_text)\r\n```\r\n\r\n#### **2.3 编码与解码**\r\n\r\n- **编码**：将字符串转换为字节序列（写入时）。\r\n- **解码**：将字节序列转换为字符串（读取时）。\r\n- 在字符流中，`encoding` 参数指定了使用的字符编码（如 `utf-8`, `ascii`, `latin-1` 等）。如果不指定，默认使用系统的默认编码。\r\n\r\n    ```python\r\n    # 使用不同的编码写入和读取文件\r\n    text = \"你好，世界！\"\r\n    with open('text_file.txt', 'w', encoding='utf-8') as file:\r\n        file.write(text)\r\n\r\n    with open('text_file.txt', 'r', encoding='utf-8') as file:\r\n        content = file.read()\r\n    print(content)  # 输出: 你好，世界！\r\n    ```\r\n\r\n#### **2.4 注意事项**\r\n\r\n- 字符流会根据指定的编码自动进行编码和解码。\r\n- 如果文件包含非 ASCII 字符（如中文、日文等），必须正确设置编码（推荐使用 `utf-8`）。\r\n\r\n---\r\n\r\n### **3. 字节流与字符流的区别**\r\n\r\n| 特性               | 字节流                          | 字符流                          |\r\n|--------------------|---------------------------------|---------------------------------|\r\n| **数据类型**       | 字节（`bytes` 类型）            | 字符（`str` 类型）              |\r\n| **适用场景**       | 非文本文件（图片、音频、视频等） | 文本文件                        |\r\n| **编码/解码**      | 不涉及编码/解码                 | 自动进行编码和解码              |\r\n| **文件模式**       | `'rb'`, `'wb'`, `'ab'` 等       | `'r'`, `'w'`, `'a'` 等          |\r\n| **是否支持换行符** | 不支持自动处理换行符             | 支持自动处理换行符（`\\n` -> `\\r\\n` 等） |\r\n\r\n---\r\n\r\n### **4. 混合使用字节流与字符流**\r\n\r\n有时候需要同时处理字节流和字符流，例如在网络通信中接收字节数据并将其解码为字符串。\r\n\r\n**示例：字节流与字符流结合**\r\n\r\n```python\r\n# 将字节数据解码为字符串\r\nbyte_data = b'Hello, \\xe4\\xb8\\x96\\xe7\\x95\\x8c!'  # 包含 UTF-8 编码的中文\r\ntext = byte_data.decode('utf-8')\r\nprint(text)  # 输出: Hello, 世界!\r\n\r\n# 将字符串编码为字节数据\r\nnew_text = \"你好，Python!\"\r\nnew_byte_data = new_text.encode('utf-8')\r\nprint(new_byte_data)  # 输出: b'\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd\\xef\\xbc\\x8cPython!'\r\n```\r\n\r\n---"}}]);
//# sourceMappingURL=96647.6fbea4d8.js.map