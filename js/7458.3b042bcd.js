"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[7458],{97458:function(n,r,e){e.r(r),r["default"]="## **3.2. 分段（Segmentation）**\r\n\r\n### **基本概念**\r\n\r\n分段是一种将进程的虚拟地址空间按逻辑意义划分为若干段的技术。每个段代表一个独立的逻辑单元（如代码段、数据段、堆栈段等）。每个段有自己的起始地址和长度。\r\n\r\n- **段表（Segment Table）**：记录每个段的基地址（Base Address）和段的长度（Limit）。\r\n- **虚拟地址**：由**段号（Segment Number）**和**段内偏移量（Offset）**组成。\r\n\r\n### **工作原理**\r\n\r\n1. 虚拟地址被划分为两部分：\r\n   - **段号**：标识虚拟地址属于哪个段。\r\n   - **段内偏移量**：标识段内的具体位置。\r\n2. 操作系统通过段表查找段号对应的基地址。\r\n3. 如果偏移量小于段的长度，则计算物理地址为“基地址 + 偏移量”；否则触发段错误（Segment Fault）。\r\n\r\n### **优点**\r\n\r\n- **逻辑清晰**：段的划分符合程序的逻辑结构，便于程序员理解。\r\n- **支持动态增长**：段的大小可以根据需要动态调整。\r\n\r\n### **缺点**\r\n\r\n- **外部碎片**：由于段的大小不固定，容易产生外部碎片。\r\n- **段表管理复杂**：需要维护每个段的基地址和长度。\r\n\r\n---"}}]);
//# sourceMappingURL=7458.3b042bcd.js.map