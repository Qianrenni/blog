"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[71],{80071:function(n,r,c){c.r(r),r["default"]='## **3. 继承**\r\n\r\n### **3.1 单继承与多继承**\r\n\r\n- **单继承**：\r\n  子类从一个父类派生。\r\n\r\n  ```cpp\r\n  class Animal {\r\n  public:\r\n      void eat() { cout << "Eating..." << endl; }\r\n  };\r\n\r\n  class Dog : public Animal {\r\n  public:\r\n      void bark() { cout << "Barking..." << endl; }\r\n  };\r\n  ```\r\n\r\n- **多继承**：\r\n  子类从多个父类派生。\r\n\r\n  ```cpp\r\n  class A {\r\n  public:\r\n      void funcA() { cout << "A" << endl; }\r\n  };\r\n\r\n  class B {\r\n  public:\r\n      void funcB() { cout << "B" << endl; }\r\n  };\r\n\r\n  class C : public A, public B {};\r\n  ```\r\n\r\n### **3.2 虚继承与虚基类**\r\n\r\n虚继承用于解决多继承中的菱形问题，避免重复继承。\r\n\r\n- **示例**：\r\n\r\n  ```cpp\r\n  class Base {\r\n  public:\r\n      int data;\r\n  };\r\n\r\n  class Derived1 : virtual public Base {};\r\n  class Derived2 : virtual public Base {};\r\n\r\n  class Final : public Derived1, public Derived2 {};\r\n  ```\r\n\r\n### **3.3 子类对父类成员的访问规则**\r\n\r\n- 子类可以直接访问父类的 `public` 和 `protected` 成员。\r\n- 子类无法直接访问父类的 `private` 成员。\r\n\r\n---'}}]);
//# sourceMappingURL=71.46dd1562.js.map