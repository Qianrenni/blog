{"version":3,"file":"js/91954.fa1eb6c1.js","mappings":"qHAAA,63B","sources":["webpack://myblog/./src/assets/md/c/content/014-3 递归函数.md"],"sourcesContent":["export default \"## **3. 递归函数**\\r\\n\\r\\n递归函数是指在其定义中调用自身的函数。\\r\\n\\r\\n### **3.1 递归的概念与实现**\\r\\n\\r\\n- **递归三要素**：\\r\\n  1. **基准条件（Base Case）**：终止递归的条件。\\r\\n  2. **递归条件（Recursive Case）**：函数调用自身的方式。\\r\\n  3. **状态变化**：每次递归调用必须改变状态，逐渐接近基准条件。\\r\\n\\r\\n- 示例：计算阶乘\\r\\n\\r\\n  ```c\\r\\n  int factorial(int n) {\\r\\n      if (n == 0 || n == 1) {  // 基准条件\\r\\n          return 1;\\r\\n      }\\r\\n      return n * factorial(n - 1);  // 递归条件\\r\\n  }\\r\\n  ```\\r\\n\\r\\n### **3.2 经典递归问题**\\r\\n\\r\\n#### **1. 阶乘**\\r\\n\\r\\n- 公式：`n! = n * (n-1)!`\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  int factorial(int n) {\\r\\n      if (n <= 1) return 1;\\r\\n      return n * factorial(n - 1);\\r\\n  }\\r\\n  ```\\r\\n\\r\\n#### **2. 斐波那契数列**\\r\\n\\r\\n- 公式：`F(n) = F(n-1) + F(n-2)`\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  int fibonacci(int n) {\\r\\n      if (n == 0) return 0;\\r\\n      if (n == 1) return 1;\\r\\n      return fibonacci(n - 1) + fibonacci(n - 2);\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}