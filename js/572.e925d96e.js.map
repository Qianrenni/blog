{"version":3,"file":"js/572.e925d96e.js","mappings":"iHAAA,khC","sources":["webpack://myblog/./src/assets/md/software/content/030-57 享元模式.md"],"sourcesContent":["export default \"## **5.7 享元模式**\\r\\n\\r\\n### **定义与特点**\\r\\n\\r\\n享元模式通过共享技术实现相同或相似对象的重用，从而节省内存。\\r\\n\\r\\n### **共享对象以节省内存**\\r\\n\\r\\n- 适用于需要大量细粒度对象的场景。\\r\\n\\r\\n### **示例：字符串池**\\r\\n\\r\\n```python\\r\\nclass Flyweight:\\r\\n    def __init__(self, shared_state):\\r\\n        self.shared_state = shared_state\\r\\n\\r\\n    def operation(self, unique_state):\\r\\n        return f\\\"Flyweight: Shared ({self.shared_state}) and Unique ({unique_state})\\\"\\r\\n\\r\\nclass FlyweightFactory:\\r\\n    _flyweights = {}\\r\\n\\r\\n    def get_flyweight(self, shared_state):\\r\\n        if shared_state not in self._flyweights:\\r\\n            self._flyweights[shared_state] = Flyweight(shared_state)\\r\\n        return self._flyweights[shared_state]\\r\\n\\r\\n# 使用示例\\r\\nfactory = FlyweightFactory()\\r\\nflyweight1 = factory.get_flyweight(\\\"shared_state_1\\\")\\r\\nflyweight2 = factory.get_flyweight(\\\"shared_state_1\\\")\\r\\nprint(flyweight1 is flyweight2)  # 输出: True\\r\\nprint(flyweight1.operation(\\\"unique_state_1\\\"))\\r\\n# 输出: Flyweight: Shared (shared_state_1) and Unique (unique_state_1)\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}