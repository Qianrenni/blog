{"version":3,"file":"js/91471.36c30ff2.js","mappings":"qHAAA,mmG","sources":["webpack://myblog/./src/assets/md/c-plus/content/038-3C 刷题常用模板  技巧.md"],"sourcesContent":["export default \"## 🧱 3、C++ 刷题常用模板 & 技巧\\r\\n\\r\\n### ✅ 1. 输入输出模板（LeetCode/牛客风格）\\r\\n\\r\\n```cpp\\r\\n#include <iostream>\\r\\n#include <vector>\\r\\n#include <string>\\r\\nusing namespace std;\\r\\n\\r\\nclass Solution {\\r\\npublic:\\r\\n    // 示例：最长公共子串\\r\\n    string LCS(string str1, string str2) {\\r\\n        // 实现逻辑\\r\\n    }\\r\\n};\\r\\n\\r\\nint main() {\\r\\n    string s1, s2;\\r\\n    cin >> s1 >> s2;\\r\\n    Solution sol;\\r\\n    cout << sol.LCS(s1, s2) << endl;\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### ✅ 2. 常用容器初始化与使用方式\\r\\n\\r\\n#### 🧩 vector 初始化\\r\\n\\r\\n```cpp\\r\\nvector<int> v1;               // 空数组\\r\\nvector<int> v2(5);            // 5个0\\r\\nvector<int> v3{1, 2, 3};      // 初始化列表\\r\\nvector<int> v4(v3);           // 拷贝构造\\r\\nvector<int> v5(v3.begin(), v3.end()); // 从迭代器构造\\r\\n```\\r\\n\\r\\n#### 🧩 map 使用\\r\\n\\r\\n```cpp\\r\\nunordered_map<string, int> mp;\\r\\nmp[\\\"a\\\"] = 1;\\r\\nif (mp.count(\\\"a\\\")) { /* 存在 */ }\\r\\nfor (auto& p : mp) {\\r\\n    cout << p.first << \\\" \\\" << p.second << endl;\\r\\n}\\r\\n```\\r\\n\\r\\n#### 🧩 set 使用\\r\\n\\r\\n```cpp\\r\\nunordered_set<int> st;\\r\\nst.insert(1);\\r\\nif (st.find(1) != st.end()) {\\r\\n    // 找到了\\r\\n}\\r\\n```\\r\\n\\r\\n#### 🧩 queue / stack / priority_queue\\r\\n\\r\\n```cpp\\r\\nqueue<int> q;\\r\\nq.push(1);\\r\\ncout << q.front(); q.pop();\\r\\n\\r\\nstack<int> st;\\r\\nst.push(1);\\r\\ncout << st.top();\\r\\n\\r\\npriority_queue<int> max_heap;       // 最大堆\\r\\npriority_queue<int, vector<int>, greater<>> min_heap;  // 最小堆\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### ✅ 3. 常用函数库\\r\\n\\r\\n| 作用 | Python | C++ |\\r\\n|------|--------|-----|\\r\\n| 排序 | `sorted()` / `.sort()` | `sort(arr.begin(), arr.end())` |\\r\\n| 二分查找 | `bisect` | `lower_bound`, `upper_bound` |\\r\\n| 数组拷贝 | `arr[:]` | `vector<int> copy(arr.begin(), arr.end())` |\\r\\n| 字符串转数字 | `int(s)` | `stoi(s)` |\\r\\n| 数字转字符串 | `str(x)` | `to_string(x)` |\\r\\n| 最大最小 | `max(a, b)` | `max(a, b)` |\\r\\n| 绝对值 | `abs(x)` | `abs(x)` |\\r\\n| 数组长度 | `len(arr)` | `arr.size()` |\\r\\n| 字符串长度 | `len(s)` | `s.size()` |\\r\\n| 打印调试 | `print()` | `cout << ... << endl;` |\\r\\n\\r\\n---\\r\\n\\r\\n### ✅ 4. 常用算法函数（头文件 `<algorithm>`）\\r\\n\\r\\n```cpp\\r\\n#include <algorithm>\\r\\n\\r\\nsort(vec.begin(), vec.end());         // 升序排序\\r\\nreverse(vec.begin(), vec.end());       // 反转\\r\\nint sum = accumulate(vec.begin(), vec.end(), 0); // 求和\\r\\nint cnt = count(vec.begin(), vec.end(), x);       // 统计x出现次数\\r\\nauto it = find(vec.begin(), vec.end(), x);        // 查找x的位置\\r\\nmin_element(vec.begin(), vec.end());             // 最小值指针\\r\\nmax_element(vec.begin(), vec.end());             // 最大值指针\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### ✅ 5. 字符串常用操作\\r\\n\\r\\n```cpp\\r\\nstring s = \\\"hello world\\\";\\r\\nint pos = s.find(\\\"world\\\");     // 返回索引\\r\\nstring sub = s.substr(6, 5);   // 截取 \\\"world\\\"\\r\\nreplace(s.begin(), s.end(), ' ', '_');  // 替换空格为下划线\\r\\nstringstream ss(s);\\r\\nstring word;\\r\\nwhile (ss >> word) {  // 分割单词\\r\\n    cout << word << endl;\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### ✅ 6. C++11 新特性简化代码\\r\\n\\r\\n```cpp\\r\\n// 范围 for 循环\\r\\nfor (int num : nums) {\\r\\n    cout << num << \\\" \\\";\\r\\n}\\r\\n\\r\\n// auto 自动推导类型\\r\\nauto it = mp.find(key);\\r\\nauto res = to_string(123);\\r\\n\\r\\n// lambda 表达式 + sort 自定义排序\\r\\nsort(vec.begin(), vec.end(), [](int a, int b) {\\r\\n    return abs(a) < abs(b);\\r\\n});\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}