{"version":3,"file":"js/43389.a8fd3d63.js","mappings":"qHAAA,mvC","sources":["webpack://myblog/./src/assets/md/c-plus/content/016-2 构造函数与析构函数.md"],"sourcesContent":["export default \"## **2. 构造函数与析构函数**\\r\\n\\r\\n### **2.1 默认构造函数与参数化构造函数**\\r\\n\\r\\n- **默认构造函数**：\\r\\n  如果未定义任何构造函数，编译器会生成一个默认构造函数。\\r\\n\\r\\n  ```cpp\\r\\n  class Point {\\r\\n  public:\\r\\n      int x, y;\\r\\n      Point() : x(0), y(0) {} // 默认构造函数\\r\\n  };\\r\\n  ```\\r\\n\\r\\n- **参数化构造函数**：\\r\\n  用于初始化对象时传递参数。\\r\\n\\r\\n  ```cpp\\r\\n  class Point {\\r\\n  public:\\r\\n      int x, y;\\r\\n      Point(int a, int b) : x(a), y(b) {} // 参数化构造函数\\r\\n  };\\r\\n  ```\\r\\n\\r\\n### **2.2 拷贝构造函数与赋值操作符**\\r\\n\\r\\n- **拷贝构造函数**：\\r\\n  用于通过现有对象初始化新对象。\\r\\n\\r\\n  ```cpp\\r\\n  class Point {\\r\\n  public:\\r\\n      int x, y;\\r\\n      Point(const Point& other) : x(other.x), y(other.y) {} // 拷贝构造函数\\r\\n  };\\r\\n  ```\\r\\n\\r\\n- **赋值操作符**：\\r\\n  用于将一个对象的值赋给另一个对象。\\r\\n\\r\\n  ```cpp\\r\\n  Point& operator=(const Point& other) {\\r\\n      if (this != &other) { // 防止自赋值\\r\\n          x = other.x;\\r\\n          y = other.y;\\r\\n      }\\r\\n      return *this;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n### **2.3 析构函数的作用**\\r\\n\\r\\n析构函数在对象销毁时自动调用，用于释放资源。\\r\\n\\r\\n- **定义析构函数**：\\r\\n\\r\\n  ```cpp\\r\\n  class FileHandler {\\r\\n  public:\\r\\n      FILE* file;\\r\\n      FileHandler(const char* filename) {\\r\\n          file = fopen(filename, \\\"r\\\");\\r\\n      }\\r\\n      ~FileHandler() { // 析构函数\\r\\n          if (file) fclose(file);\\r\\n      }\\r\\n  };\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}