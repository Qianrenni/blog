{"version":3,"file":"js/4672.5b7371b8.js","mappings":"oHAAA,6oB","sources":["webpack://myblog/./src/assets/md/algorithm/content/023-4 NP完全理论.md"],"sourcesContent":["export default \"## **4. NP完全理论**\\r\\n\\r\\n**P** 是能在多项式时间内解决的问题；  \\r\\n**NP** 是解能在多项式时间内验证的问题，包含 P；  \\r\\n**NPC** 是 NP 中最难的问题，其他 NP 问题都能规约到它。  \\r\\n\\r\\n核心问题是：是否 **P = NP**？ 目前未知。\\r\\n\\r\\n### **子集和问题**\\r\\n\\r\\n```python\\r\\ndef canPartition(nums, target):\\r\\n    # 如果目标值大于数组总和，直接返回 False\\r\\n    if sum(nums) < target:\\r\\n        return False\\r\\n    \\r\\n    # 初始化 DP 数组\\r\\n    dp = [False] * (target + 1)\\r\\n    dp[0] = True  # 和为 0 的子集总是存在（空集）\\r\\n    \\r\\n    # 动态规划填充 DP 数组\\r\\n    for num in nums:\\r\\n        for j in range(target, num - 1, -1):  # 从后向前更新\\r\\n            dp[j] = dp[j] or dp[j - num]\\r\\n    \\r\\n    # 返回结果\\r\\n    return dp[target]\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}