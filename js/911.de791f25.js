"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[911],{50911:function(r,n,e){e.r(n),n["default"]='## **AJAX**\r\n\r\nAJAX（Asynchronous JavaScript and XML）是一种在不重新加载整个页面的情况下，与服务器进行异步通信的技术。它允许开发者动态地更新网页内容，从而提升用户体验。以下是关于 AJAX 的两种实现方式的详细讲解：**原生 AJAX 请求（`XMLHttpRequest`）** 和 **Fetch API**。\r\n\r\n---\r\n\r\n### **1. 原生 AJAX 请求：`XMLHttpRequest`**\r\n\r\n`XMLHttpRequest` 是最早的 AJAX 实现方式，尽管它语法较繁琐，但仍然被广泛支持。\r\n\r\n#### **1.1 基本流程**\r\n\r\n1. **创建 `XMLHttpRequest` 对象**。\r\n2. **配置请求**：\r\n   - 设置请求方法（GET、POST 等）。\r\n   - 设置请求 URL。\r\n   - 设置是否异步。\r\n3. **发送请求**。\r\n4. **监听响应状态**，处理成功或失败的结果。\r\n\r\n#### **1.2 示例**\r\n\r\n以下是一个使用 `XMLHttpRequest` 发送 GET 请求并处理响应的完整示例：\r\n\r\n```javascript\r\n// 创建 XMLHttpRequest 对象\r\nconst xhr = new XMLHttpRequest();\r\n\r\n// 配置请求\r\nxhr.open("GET", "https://jsonplaceholder.typicode.com/posts/1", true); // true 表示异步\r\n\r\n// 设置响应类型（可选）\r\nxhr.responseType = "json";\r\n\r\n// 监听请求状态变化\r\nxhr.onreadystatechange = function () {\r\n    if (xhr.readyState === XMLHttpRequest.DONE) { // 请求完成\r\n        if (xhr.status === 200) { // 成功\r\n            console.log("Response:", xhr.response);\r\n        } else { // 失败\r\n            console.error("Error:", xhr.status, xhr.statusText);\r\n        }\r\n    }\r\n};\r\n\r\n// 发送请求\r\nxhr.send();\r\n```\r\n\r\n#### **1.3 关键点**\r\n\r\n- **`open(method, url, async)`**：\r\n  - `method`：HTTP 方法（如 `GET`、`POST`）。\r\n  - `url`：目标地址。\r\n  - `async`：是否异步（默认为 `true`）。\r\n- **`send(body)`**：\r\n  - 如果是 `GET` 请求，通常不需要传递 `body`。\r\n  - 如果是 `POST` 请求，可以通过 `send` 方法传递数据。\r\n- **`onreadystatechange`**：\r\n  - 监听请求状态的变化。\r\n  - `readyState` 的值：\r\n    - `0`：未初始化。\r\n    - `1`：已建立连接。\r\n    - `2`：请求已接收。\r\n    - `3`：正在处理。\r\n    - `4`：请求完成。\r\n- **`status`**：\r\n  - HTTP 状态码（如 `200` 表示成功，`404` 表示未找到资源）。\r\n\r\n#### **1.4 POST 请求示例**\r\n\r\n以下是一个使用 `XMLHttpRequest` 发送 POST 请求并传递数据的示例：\r\n\r\n```javascript\r\nconst xhr = new XMLHttpRequest();\r\nxhr.open("POST", "https://jsonplaceholder.typicode.com/posts", true);\r\nxhr.setRequestHeader("Content-Type", "application/json");\r\n\r\nxhr.onreadystatechange = function () {\r\n    if (xhr.readyState === XMLHttpRequest.DONE) {\r\n        if (xhr.status === 201) { // 201 表示资源已创建\r\n            console.log("Response:", xhr.response);\r\n        } else {\r\n            console.error("Error:", xhr.status, xhr.statusText);\r\n        }\r\n    }\r\n};\r\n\r\nconst data = JSON.stringify({\r\n    title: "foo",\r\n    body: "bar",\r\n    userId: 1\r\n});\r\n\r\nxhr.send(data);\r\n```\r\n\r\n---\r\n\r\n### **2. Fetch API：`fetch(url).then().catch()`**\r\n\r\nFetch API 是现代浏览器提供的更简洁、更强大的 AJAX 工具。它是基于 Promise 的，语法更加直观。\r\n\r\n#### **2.1 基本语法**\r\n\r\n```javascript\r\nfetch(url, options)\r\n    .then(response => response.json()) // 解析响应数据\r\n    .then(data => {\r\n        console.log("Data:", data);\r\n    })\r\n    .catch(error => {\r\n        console.error("Error:", error);\r\n    });\r\n```\r\n\r\n- **`url`**：请求的目标地址。\r\n- **`options`**（可选）：包含请求方法、请求头、请求体等配置的对象。\r\n- **`response`**：\r\n  - 包含服务器返回的原始响应。\r\n  - 使用 `response.json()` 或 `response.text()` 等方法解析响应数据。\r\n\r\n#### **2.2 示例**\r\n\r\n以下是一个使用 `fetch` 发送 GET 请求并处理响应的示例：\r\n\r\n```javascript\r\nfetch("https://jsonplaceholder.typicode.com/posts/1")\r\n    .then(response => {\r\n        if (!response.ok) { // 检查响应状态\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json(); // 解析为 JSON\r\n    })\r\n    .then(data => {\r\n        console.log("Post:", data);\r\n    })\r\n    .catch(error => {\r\n        console.error("Error:", error);\r\n    });\r\n```\r\n\r\n#### **2.3 POST 请求示例**\r\n\r\n以下是一个使用 `fetch` 发送 POST 请求并传递数据的示例：\r\n\r\n```javascript\r\nconst data = {\r\n    title: "foo",\r\n    body: "bar",\r\n    userId: 1\r\n};\r\n\r\nfetch("https://jsonplaceholder.typicode.com/posts", {\r\n    method: "POST", // 请求方法\r\n    headers: {\r\n        "Content-Type": "application/json" // 设置请求头\r\n    },\r\n    body: JSON.stringify(data) // 将数据转换为 JSON 字符串\r\n})\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n    })\r\n    .then(data => {\r\n        console.log("Created Post:", data);\r\n    })\r\n    .catch(error => {\r\n        console.error("Error:", error);\r\n    });\r\n```\r\n\r\n#### **2.4 错误处理**\r\n\r\n- **网络错误**：\r\n  - 如果请求无法到达服务器（如网络中断），会触发 `.catch`。\r\n- **HTTP 错误**：\r\n  - 如果服务器返回非 2xx 状态码（如 404 或 500），需要手动检查 `response.ok`。\r\n\r\n#### **2.5 高级功能**\r\n\r\n- **中止请求**：\r\n  - 使用 `AbortController` 中止请求。\r\n\r\n  ```javascript\r\n  const controller = new AbortController();\r\n  const signal = controller.signal;\r\n\r\n  fetch("https://jsonplaceholder.typicode.com/posts/1", { signal })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n          console.log("Post:", data);\r\n      })\r\n      .catch(error => {\r\n          if (error.name === "AbortError") {\r\n              console.log("Request aborted");\r\n          } else {\r\n              console.error("Error:", error);\r\n          }\r\n      });\r\n\r\n  // 中止请求\r\n  setTimeout(() => controller.abort(), 1000);\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=911.de791f25.js.map