{"version":3,"file":"js/65591.233eddfe.js","mappings":"qHAAA,gtB","sources":["webpack://myblog/./src/assets/md/c/content/019-3 指针与数组.md"],"sourcesContent":["export default \"## **3. 指针与数组**\\r\\n\\r\\n### **3.1 使用指针访问数组元素**\\r\\n\\r\\n- 数组名本质上是一个指向数组第一个元素的指针。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  int arr[5] = {10, 20, 30, 40, 50};\\r\\n  int *p = arr;  // 等价于 int *p = &arr[0];\\r\\n  for (int i = 0; i < 5; i++) {\\r\\n      printf(\\\"%d \\\", *(p + i));  // 使用指针访问数组元素\\r\\n  }\\r\\n  ```\\r\\n\\r\\n### **3.2 指针与多维数组**\\r\\n\\r\\n- 多维数组可以通过指针访问，但需要理解数组的内存布局。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  int matrix[3][3] = {\\r\\n      {1, 2, 3},\\r\\n      {4, 5, 6},\\r\\n      {7, 8, 9}\\r\\n  };\\r\\n  int (*p)[3] = matrix;  // 定义一个指向数组的指针\\r\\n  for (int i = 0; i < 3; i++) {\\r\\n      for (int j = 0; j < 3; j++) {\\r\\n          printf(\\\"%d \\\", *(*(p + i) + j));  // 使用指针访问二维数组元素\\r\\n      }\\r\\n      printf(\\\"\\\\n\\\");\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}