"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[19616],{19616:function(n,r,e){e.r(r),r["default"]='## **面向对象编程（OOP）**\r\n\r\n### **类与对象**\r\n\r\n- **定义类（`class`）、构造函数（`__init__`）**：\r\n  - 类是面向对象编程的核心，用于封装数据和行为。\r\n  - 构造函数 `__init__` 用于初始化对象的属性。\r\n\r\n  ```python\r\n  class Person:\r\n      def __init__(self, name, age):\r\n          self.name = name  # 实例属性\r\n          self.age = age\r\n\r\n  p = Person("Alice", 30)\r\n  print(p.name)  # 输出：Alice\r\n  ```\r\n\r\n- **属性与方法**：\r\n  - **实例属性**：属于某个具体对象。\r\n  - **类属性**：所有实例共享。\r\n  - 方法分为实例方法、类方法（`@classmethod`）、静态方法（`@staticmethod`）。\r\n\r\n  ```python\r\n  class Dog:\r\n      species = "Canis familiaris"  # 类属性\r\n\r\n      def __init__(self, name, age):\r\n          self.name = name  # 实例属性\r\n          self.age = age\r\n\r\n      def bark(self):  # 实例方法\r\n          print(f"{self.name} barks!")\r\n  ```\r\n\r\n---\r\n\r\n### **继承与多态**\r\n\r\n- **单继承与多继承**：\r\n  - 单继承：一个子类继承自一个父类。\r\n  - 多继承：一个子类可以继承多个父类，Python 使用 C3 线性化算法解决方法解析顺序（MRO）。\r\n\r\n  ```python\r\n  class Animal:\r\n      def speak(self):\r\n          print("Animal speaks")\r\n\r\n  class Dog(Animal):\r\n      def speak(self):\r\n          print("Dog barks")\r\n\r\n  d = Dog()\r\n  d.speak()  # 输出：Dog barks\r\n  ```\r\n\r\n- **方法重写与 `super()`**：\r\n  - 子类可以重写父类的方法。\r\n  - 使用 `super()` 调用父类的方法。\r\n\r\n  ```python\r\n  class Vehicle:\r\n      def start(self):\r\n          print("Vehicle started")\r\n\r\n  class Car(Vehicle):\r\n      def start(self):\r\n          super().start()\r\n          print("Car engine running")\r\n\r\n  car = Car()\r\n  car.start()\r\n  # 输出：\r\n  # Vehicle started\r\n  # Car engine running\r\n  ```\r\n\r\n---\r\n\r\n### **特殊方法（魔术方法）**\r\n\r\n- **常用魔术方法**：\r\n  - `__str__` 和 `__repr__`：定义对象的字符串表示。\r\n  - `__len__`：定义对象的长度。\r\n  - `__getitem__` 和 `__setitem__`：支持索引操作。\r\n\r\n  ```python\r\n  class Point:\r\n      def __init__(self, x, y):\r\n          self.x = x\r\n          self.y = y\r\n\r\n      def __str__(self):\r\n          return f"Point({self.x}, {self.y})"\r\n\r\n      def __repr__(self):\r\n          return f"Point(x={self.x}, y={self.y})"\r\n\r\n  p = Point(1, 2)\r\n  print(str(p))  # 输出：Point(1, 2)\r\n  print(repr(p)) # 输出：Point(x=1, y=2)\r\n  ```\r\n\r\n  ```python\r\n  class MyList:\r\n      def __init__(self, data):\r\n          self.data = data\r\n\r\n      def __len__(self):\r\n          return len(self.data)\r\n\r\n      def __getitem__(self, index):\r\n          return self.data[index]\r\n\r\n      def __setitem__(self, index, value):\r\n          self.data[index] = value\r\n\r\n  ml = MyList([1, 2, 3])\r\n  print(len(ml))       # 输出：3\r\n  print(ml[1])         # 输出：2\r\n  ml[1] = 10\r\n  print(ml[1])         # 输出：10\r\n  ```'}}]);
//# sourceMappingURL=19616.2d35d31a.js.map