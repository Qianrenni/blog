{"version":3,"file":"js/1731.93bd515f.js","mappings":"oHAAA,iiC","sources":["webpack://myblog/./src/assets/md/software/content/021-44 建造者模式.md"],"sourcesContent":["export default \"## **4.4 建造者模式**\\r\\n\\r\\n- **定义与特点**：建造者模式将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示。它通常用于构建复杂的对象。\\r\\n  \\r\\n- **构建复杂对象的步骤**：首先定义一个公共接口描述步骤，然后通过具体建造者实现这些步骤，最后通过指挥者类调用这些步骤构建最终的对象。\\r\\n  \\r\\n- **示例：构建复杂的配置对象**：比如构建一个复杂的SQL查询语句对象，其中包含多个条件和排序规则等属性。\\r\\n\\r\\n```python\\r\\nclass SQLQueryBuilder:\\r\\n    def __init__(self):\\r\\n        self.query = {}\\r\\n\\r\\n    def select(self, columns):\\r\\n        self.query[\\\"SELECT\\\"] = columns\\r\\n        return self\\r\\n\\r\\n    def from_table(self, table):\\r\\n        self.query[\\\"FROM\\\"] = table\\r\\n        return self\\r\\n\\r\\n    def where(self, condition):\\r\\n        self.query[\\\"WHERE\\\"] = condition\\r\\n        return self\\r\\n\\r\\n    def build(self):\\r\\n        query_parts = []\\r\\n        for key, value in self.query.items():\\r\\n            query_parts.append(f\\\"{key} {value}\\\")\\r\\n        return \\\" \\\".join(query_parts)\\r\\n\\r\\n# 使用示例\\r\\nbuilder = SQLQueryBuilder()\\r\\nquery = builder.select(\\\"name, age\\\").from_table(\\\"users\\\").where(\\\"age > 18\\\").build()\\r\\nprint(query)\\r\\n# 输出: SELECT name, age FROM users WHERE age > 18\\r\\n```\";"],"names":[],"sourceRoot":""}