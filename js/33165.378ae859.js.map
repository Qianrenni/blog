{"version":3,"file":"js/33165.378ae859.js","mappings":"qHAAA,6sC","sources":["webpack://myblog/./src/assets/md/javascript/content/025-4 迭代器与生成器.md"],"sourcesContent":["export default \"## **4. 迭代器与生成器**\\r\\n\\r\\n### **4.1 `Iterable` 和 `Iterator`**\\r\\n\\r\\n- **`Iterable`**：\\r\\n  - 实现了 `[Symbol.iterator]` 方法的对象。\\r\\n  - 可以被 `for...of` 遍历。\\r\\n\\r\\n  ```javascript\\r\\n  const iterable = {\\r\\n      [Symbol.iterator]() {\\r\\n          let step = 0;\\r\\n          return {\\r\\n              next() {\\r\\n                  step++;\\r\\n                  if (step <= 3) {\\r\\n                      return { value: step, done: false };\\r\\n                  }\\r\\n                  return { done: true };\\r\\n              }\\r\\n          };\\r\\n      }\\r\\n  };\\r\\n\\r\\n  for (const value of iterable) {\\r\\n      console.log(value); // 输出：1, 2, 3\\r\\n  }\\r\\n  ```\\r\\n\\r\\n### **4.2 `Generator` 函数：`function*` 和 `yield`**\\r\\n\\r\\n- **用途**：用于创建迭代器的函数。\\r\\n- **特点**：\\r\\n  - 使用 `function*` 定义生成器函数。\\r\\n  - 使用 `yield` 暂停函数执行，并返回一个值。\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  function* generateNumbers() {\\r\\n      yield 1;\\r\\n      yield 2;\\r\\n      yield 3;\\r\\n  }\\r\\n\\r\\n  const generator = generateNumbers();\\r\\n  console.log(generator.next().value); // 输出：1\\r\\n  console.log(generator.next().value); // 输出：2\\r\\n  console.log(generator.next().value); // 输出：3\\r\\n  console.log(generator.next().done);  // 输出：true\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}