{"version":3,"file":"js/7364.54a74c42.js","mappings":"oHAAA,23C","sources":["webpack://myblog/./src/assets/md/software/content/019-42 工厂方法模式.md"],"sourcesContent":["export default \"## **4.2 工厂方法模式**\\r\\n\\r\\n- **定义与特点**：工厂方法模式定义了一个用于创建对象的接口，但由子类决定要实例化的类是哪一个。这样，工厂方法使一个类的实例化推迟到其子类。\\r\\n  \\r\\n- **工厂方法与简单工厂的区别**：简单工厂将所有产品对象的创建逻辑集中在一个工厂类中，而工厂方法则是每个产品都有对应的工厂子类负责创建。\\r\\n  \\r\\n- **应用场景与示例**：适合用于需要灵活扩展的产品体系，例如不同操作系统的GUI组件创建。示例可以是一个跨平台的应用程序，根据不同的操作系统使用相应的窗口或按钮控件。\\r\\n\\r\\n```python\\r\\nfrom abc import ABC, abstractmethod\\r\\n\\r\\n# 定义产品接口\\r\\nclass Product(ABC):\\r\\n    @abstractmethod\\r\\n    def operation(self):\\r\\n        pass\\r\\n\\r\\n# 具体产品A\\r\\nclass ConcreteProductA(Product):\\r\\n    def operation(self):\\r\\n        return \\\"ConcreteProductA\\\"\\r\\n\\r\\n# 具体产品B\\r\\nclass ConcreteProductB(Product):\\r\\n    def operation(self):\\r\\n        return \\\"ConcreteProductB\\\"\\r\\n\\r\\n# 定义工厂接口\\r\\nclass Creator(ABC):\\r\\n    @abstractmethod\\r\\n    def factory_method(self):\\r\\n        pass\\r\\n\\r\\n    def some_operation(self):\\r\\n        product = self.factory_method()\\r\\n        return f\\\"Creator: {product.operation()}\\\"\\r\\n\\r\\n# 具体工厂A\\r\\nclass ConcreteCreatorA(Creator):\\r\\n    def factory_method(self):\\r\\n        return ConcreteProductA()\\r\\n\\r\\n# 具体工厂B\\r\\nclass ConcreteCreatorB(Creator):\\r\\n    def factory_method(self):\\r\\n        return ConcreteProductB()\\r\\n\\r\\n# 使用示例\\r\\ncreator_a = ConcreteCreatorA()\\r\\nprint(creator_a.some_operation())  # 输出: Creator: ConcreteProductA\\r\\n\\r\\ncreator_b = ConcreteCreatorB()\\r\\nprint(creator_b.some_operation())  # 输出: Creator: ConcreteProductB\\r\\n\\r\\n```\";"],"names":[],"sourceRoot":""}