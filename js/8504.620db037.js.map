{"version":3,"file":"js/8504.620db037.js","mappings":"oHAAA,8qL","sources":["webpack://myblog/./src/assets/md/javascript/content/009-错误处理.md"],"sourcesContent":["export default \"## **错误处理**\\r\\n\\r\\n在 JavaScript 中，错误处理是确保程序健壮性和稳定性的重要部分。通过错误处理机制，可以捕获运行时的异常并采取适当的措施，避免程序崩溃或产生不可预测的行为。以下是关于 `try...catch...finally` 和自定义错误的详细讲解。\\r\\n\\r\\n---\\r\\n\\r\\n### **1.`try...catch...finally`**\\r\\n\\r\\n`try...catch...finally` 是 JavaScript 中用于捕获和处理异常的核心结构。它允许开发者在代码块中捕获错误，并执行相应的错误处理逻辑。\\r\\n\\r\\n#### **基本语法**\\r\\n\\r\\n```javascript\\r\\ntry {\\r\\n    // 可能抛出错误的代码\\r\\n} catch (error) {\\r\\n    // 捕获并处理错误\\r\\n} finally {\\r\\n    // 无论是否发生错误都会执行的代码\\r\\n}\\r\\n```\\r\\n\\r\\n- **`try`**：包含可能抛出错误的代码。\\r\\n- **`catch`**：捕获由 `try` 块抛出的错误，并提供错误对象（通常命名为 `error`）。\\r\\n- **`finally`**：无论是否发生错误，都会执行的代码块，通常用于清理资源（如关闭文件、释放内存等）。\\r\\n\\r\\n#### **示例**\\r\\n\\r\\n```javascript\\r\\ntry {\\r\\n    const result = riskyOperation();\\r\\n    console.log(result);\\r\\n} catch (error) {\\r\\n    console.error(\\\"An error occurred:\\\", error.message);\\r\\n} finally {\\r\\n    console.log(\\\"Execution completed.\\\");\\r\\n}\\r\\n\\r\\nfunction riskyOperation() {\\r\\n    throw new Error(\\\"Something went wrong!\\\");\\r\\n}\\r\\n// 输出：\\r\\n// An error occurred: Something went wrong!\\r\\n// Execution completed.\\r\\n```\\r\\n\\r\\n#### **详细说明**\\r\\n\\r\\n1. **`try` 块**：\\r\\n   - 包含需要监控的代码。\\r\\n   - 如果 `try` 块中的代码抛出错误，程序会立即跳转到 `catch` 块。\\r\\n\\r\\n2. **`catch` 块**：\\r\\n   - 接收一个参数（通常是 `error` 对象），包含错误信息。\\r\\n   - 错误对象通常包括以下属性：\\r\\n     - `message`：错误的描述信息。\\r\\n     - `name`：错误的类型（如 `Error`、`TypeError` 等）。\\r\\n     - `stack`：错误的调用栈信息（用于调试）。\\r\\n   - 示例：\\r\\n\\r\\n     ```javascript\\r\\n     try {\\r\\n         null.property; // 引发 TypeError\\r\\n     } catch (error) {\\r\\n         console.log(error.name); // 输出：TypeError\\r\\n         console.log(error.message); // 输出：Cannot read properties of null\\r\\n         console.log(error.stack); // 输出：完整的调用栈信息\\r\\n     }\\r\\n     ```\\r\\n\\r\\n3. **`finally` 块**：\\r\\n   - 无论 `try` 块是否抛出错误，`finally` 块都会执行。\\r\\n   - 适用于清理操作，例如关闭数据库连接、释放锁等。\\r\\n   - 示例：\\r\\n\\r\\n     ```javascript\\r\\n     try {\\r\\n         console.log(\\\"Try block executed.\\\");\\r\\n         throw new Error(\\\"Test error\\\");\\r\\n     } catch (error) {\\r\\n         console.log(\\\"Catch block executed.\\\");\\r\\n     } finally {\\r\\n         console.log(\\\"Finally block executed.\\\");\\r\\n     }\\r\\n     // 输出：\\r\\n     // Try block executed.\\r\\n     // Catch block executed.\\r\\n     // Finally block executed.\\r\\n     ```\\r\\n\\r\\n#### **注意事项**\\r\\n\\r\\n1. **嵌套 `try...catch`**：\\r\\n   - 可以在一个 `try` 块中嵌套另一个 `try...catch`，以便更精细地控制错误处理。\\r\\n\\r\\n     ```javascript\\r\\n     try {\\r\\n         try {\\r\\n             throw new Error(\\\"Inner error\\\");\\r\\n         } catch (innerError) {\\r\\n             console.log(\\\"Inner catch:\\\", innerError.message);\\r\\n             throw innerError; // 重新抛出错误\\r\\n         }\\r\\n     } catch (outerError) {\\r\\n         console.log(\\\"Outer catch:\\\", outerError.message);\\r\\n     }\\r\\n     // 输出：\\r\\n     // Inner catch: Inner error\\r\\n     // Outer catch: Inner error\\r\\n     ```\\r\\n\\r\\n2. **未捕获的错误**：\\r\\n   - 如果错误未被捕获，程序会崩溃并输出错误信息。\\r\\n   - 在浏览器环境中，可以通过 `window.onerror` 全局捕获未处理的错误。\\r\\n\\r\\n     ```javascript\\r\\n     window.onerror = function(message, source, lineno, colno, error) {\\r\\n         console.log(\\\"Global error handler:\\\", message);\\r\\n         return true; // 阻止默认行为\\r\\n     };\\r\\n\\r\\n     throw new Error(\\\"Uncaught error\\\");\\r\\n     // 输出：Global error handler: Uncaught error\\r\\n     ```\\r\\n\\r\\n---\\r\\n\\r\\n### **2. 自定义错误：`throw new Error('message')`**\\r\\n\\r\\nJavaScript 提供了内置的 `Error` 类，用于创建标准错误对象。开发者还可以通过 `throw` 关键字手动抛出自定义错误。\\r\\n\\r\\n#### **抛出错误**\\r\\n\\r\\n使用 `throw` 关键字可以显式地抛出一个错误对象或其他类型的值。\\r\\n\\r\\n**语法**：\\r\\n\\r\\n```javascript\\r\\nthrow 表达式;\\r\\n```\\r\\n\\r\\n- 表达式可以是任何值，但通常是一个 `Error` 对象。\\r\\n\\r\\n**示例**：\\r\\n\\r\\n```javascript\\r\\nfunction divide(a, b) {\\r\\n    if (b === 0) {\\r\\n        throw new Error(\\\"Division by zero is not allowed.\\\");\\r\\n    }\\r\\n    return a / b;\\r\\n}\\r\\n\\r\\ntry {\\r\\n    console.log(divide(10, 0));\\r\\n} catch (error) {\\r\\n    console.error(\\\"Error:\\\", error.message);\\r\\n}\\r\\n// 输出：\\r\\n// Error: Division by zero is not allowed.\\r\\n```\\r\\n\\r\\n#### **自定义错误类**\\r\\n\\r\\n除了使用内置的 `Error` 类，还可以通过继承 `Error` 创建自定义错误类，以满足特定需求。\\r\\n\\r\\n**示例**：\\r\\n\\r\\n```javascript\\r\\nclass ValidationError extends Error {\\r\\n    constructor(message) {\\r\\n        super(message); // 调用父类构造函数\\r\\n        this.name = \\\"ValidationError\\\"; // 设置错误名称\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction validateInput(input) {\\r\\n    if (!input) {\\r\\n        throw new ValidationError(\\\"Input cannot be empty.\\\");\\r\\n    }\\r\\n    console.log(\\\"Input is valid.\\\");\\r\\n}\\r\\n\\r\\ntry {\\r\\n    validateInput(\\\"\\\");\\r\\n} catch (error) {\\r\\n    if (error instanceof ValidationError) {\\r\\n        console.error(\\\"Validation error:\\\", error.message);\\r\\n    } else {\\r\\n        console.error(\\\"Unexpected error:\\\", error.message);\\r\\n    }\\r\\n}\\r\\n// 输出：\\r\\n// Validation error: Input cannot be empty.\\r\\n```\\r\\n\\r\\n#### **常见内置错误类型**\\r\\n\\r\\nJavaScript 提供了一些内置的错误类型，用于表示不同类型的错误：\\r\\n\\r\\n1. **`Error`**：通用错误基类。\\r\\n2. **`SyntaxError`**：语法错误。\\r\\n3. **`ReferenceError`**：引用不存在的变量。\\r\\n4. **`TypeError`**：操作不符合数据类型。\\r\\n5. **`RangeError`**：数值超出有效范围。\\r\\n6. **`URIError`**：URI 编码/解码错误。\\r\\n\\r\\n**示例**：\\r\\n\\r\\n```javascript\\r\\ntry {\\r\\n    JSON.parse(\\\"{\\\"); // 不完整的 JSON 字符串\\r\\n} catch (error) {\\r\\n    if (error instanceof SyntaxError) {\\r\\n        console.error(\\\"Syntax error:\\\", error.message);\\r\\n    }\\r\\n}\\r\\n// 输出：\\r\\n// Syntax error: Unexpected end of JSON input\\r\\n```\\r\\n\\r\\n#### **动态生成错误**\\r\\n\\r\\n可以根据条件动态生成错误信息，增强错误描述的清晰度。\\r\\n\\r\\n**示例**：\\r\\n\\r\\n```javascript\\r\\nfunction calculateDiscount(price, discount) {\\r\\n    if (discount < 0 || discount > 100) {\\r\\n        throw new RangeError(`Invalid discount value: ${discount}. Must be between 0 and 100.`);\\r\\n    }\\r\\n    return price * (1 - discount / 100);\\r\\n}\\r\\n\\r\\ntry {\\r\\n    console.log(calculateDiscount(100, 150));\\r\\n} catch (error) {\\r\\n    console.error(\\\"Error:\\\", error.message);\\r\\n}\\r\\n// 输出：\\r\\n// Error: Invalid discount value: 150. Must be between 0 and 100.\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}