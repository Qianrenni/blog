"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[112],{90112:function(n,r,e){e.r(r),r["default"]='## **4. 数据传输安全**\r\n\r\n在网络传输中，必须确保数据不被窃听或篡改。SSL/TLS 是最常见的解决方案。\r\n\r\n### **4.1 使用 HTTPS**\r\n\r\nHTTPS 是基于 SSL/TLS 的安全协议，用于保护客户端与服务器之间的通信。\r\n\r\n#### **启用 HTTPS 示例**\r\n\r\n1. 在服务器端配置 SSL 证书。\r\n2. 客户端使用 `HttpsURLConnection` 进行安全连接：\r\n\r\n```java\r\nimport javax.net.ssl.HttpsURLConnection;\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.net.URL;\r\n\r\npublic class HttpsExample {\r\n    public static void main(String[] args) throws Exception {\r\n        URL url = new URL("https://example.com");\r\n        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n        connection.setRequestMethod("GET");\r\n\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            System.out.println(line);\r\n        }\r\n        reader.close();\r\n    }\r\n}\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=112.b5752ad7.js.map