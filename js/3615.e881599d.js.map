{"version":3,"file":"js/3615.e881599d.js","mappings":"oHAAA,u8C","sources":["webpack://myblog/./src/assets/md/c-plus/content/019-5 其他 OOP 特性.md"],"sourcesContent":["export default \"## **5. 其他 OOP 特性**\\r\\n\\r\\n### **5.1 友元函数与友元类**\\r\\n\\r\\n- **友元函数**：\\r\\n  友元函数可以访问类的私有和保护成员。\\r\\n\\r\\n  ```cpp\\r\\n  class MyClass {\\r\\n  private:\\r\\n      int secret;\\r\\n  public:\\r\\n      friend void revealSecret(const MyClass& obj);\\r\\n  };\\r\\n\\r\\n  void revealSecret(const MyClass& obj) {\\r\\n      cout << \\\"Secret: \\\" << obj.secret << endl;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **友元类**：\\r\\n  整个类被声明为另一个类的友元。\\r\\n\\r\\n  ```cpp\\r\\n  class A {\\r\\n  private:\\r\\n      int data;\\r\\n  public:\\r\\n      friend class B;\\r\\n  };\\r\\n\\r\\n  class B {\\r\\n  public:\\r\\n      void access(A& a) {\\r\\n          cout << a.data << endl;\\r\\n      }\\r\\n  };\\r\\n  ```\\r\\n\\r\\n### **5.2 静态成员变量与静态成员函数**\\r\\n\\r\\n- **静态成员变量**：\\r\\n  静态成员变量属于类本身，而不是某个对象。\\r\\n\\r\\n  ```cpp\\r\\n  class Counter {\\r\\n  public:\\r\\n      static int count;\\r\\n      Counter() { count++; }\\r\\n  };\\r\\n  int Counter::count = 0;\\r\\n  ```\\r\\n\\r\\n- **静态成员函数**：\\r\\n  静态成员函数只能访问静态成员变量。\\r\\n\\r\\n  ```cpp\\r\\n  class Counter {\\r\\n  public:\\r\\n      static int getCount() { return count; }\\r\\n  };\\r\\n  ```\\r\\n\\r\\n### **5.3 运算符重载**\\r\\n\\r\\n运算符重载允许自定义运算符的行为。\\r\\n\\r\\n```cpp\\r\\nclass Complex {\\r\\npublic:\\r\\n    double real, imag;\\r\\n    Complex(double r = 0, double i = 0) : real(r), imag(i) {}\\r\\n\\r\\n    Complex operator+(const Complex& other) {\\r\\n        return Complex(real + other.real, imag + other.imag);\\r\\n    }\\r\\n};\\r\\n\\r\\nint main() {\\r\\n    Complex c1(1, 2), c2(3, 4);\\r\\n    Complex c3 = c1 + c2; // 调用重载的 + 运算符\\r\\n}\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}