"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[39640],{39640:function(n,r,p){p.r(r),r["default"]='## **4. Map**\r\n\r\n### **4.1 HashMap**\r\n\r\n- **特点**：\r\n  - 基于哈希表实现。\r\n  - 无序且允许一个 `null` 键和多个 `null` 值。\r\n- **适用场景**：\r\n  - 需要快速查找键值对时。\r\n- **示例**：\r\n\r\n  ```java\r\n  Map<String, Integer> map = new HashMap<>();\r\n  map.put("A", 1);\r\n  map.put("B", 2);\r\n  System.out.println(map.get("A")); // 输出：1\r\n  ```\r\n\r\n### **4.2 TreeMap**\r\n\r\n- **特点**：\r\n  - 基于红黑树实现。\r\n  - 按键排序（自然顺序或自定义顺序）。\r\n- **适用场景**：\r\n  - 需要按键排序的键值对时。\r\n- **示例**：\r\n\r\n  ```java\r\n  Map<String, Integer> map = new TreeMap<>();\r\n  map.put("C", 3);\r\n  map.put("A", 1);\r\n  map.put("B", 2);\r\n  System.out.println(map); // 输出：{A=1, B=2, C=3}\r\n  ```\r\n\r\n### **4.3 LinkedHashMap**\r\n\r\n- **特点**：\r\n  - 基于哈希表和链表实现。\r\n  - 保持插入顺序。\r\n- **适用场景**：\r\n  - 需要保持插入顺序的键值对时。\r\n- **示例**：\r\n\r\n  ```java\r\n  Map<String, Integer> map = new LinkedHashMap<>();\r\n  map.put("A", 1);\r\n  map.put("B", 2);\r\n  map.put("C", 3);\r\n  System.out.println(map); // 输出：{A=1, B=2, C=3}\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=39640.6edaf160.js.map