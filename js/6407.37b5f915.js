"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[6407],{58788:function(n,r,o){o.r(r),r["default"]='## **语法基础**\r\n\r\n### **1. 变量声明：`var`、`let` 和 `const`**\r\n\r\n在 JavaScript 中，变量可以通过三种关键字进行声明：`var`、`let` 和 `const`。它们的区别主要体现在作用域、提升（Hoisting）和可变性上。\r\n\r\n#### **`var`**\r\n\r\n- **历史背景**：`var` 是 ES5 及之前的变量声明方式。\r\n- **特点**：\r\n  - **函数作用域**：`var` 声明的变量在函数内部有效，如果在全局作用域中声明，则成为全局变量。\r\n  - **变量提升**：使用 `var` 声明的变量会被提升到其所在作用域的顶部，但赋值不会被提升。\r\n\r\n    ```javascript\r\n    console.log(a); // 输出 undefined（变量已声明但未赋值）\r\n    var a = 10;\r\n    ```\r\n\r\n  - **重复声明**：允许在同一作用域内重复声明同一个变量。\r\n\r\n    ```javascript\r\n    var x = 5;\r\n    var x = 10; // 不会报错\r\n    ```\r\n\r\n#### **`let`**\r\n\r\n- **引入时间**：ES6 引入了 `let`，用于替代 `var`。\r\n- **特点**：\r\n  - **块级作用域**：`let` 声明的变量只在其所在的代码块（如 `{}`）内有效。\r\n\r\n    ```javascript\r\n    if (true) {\r\n        let y = 20;\r\n        console.log(y); // 输出 20\r\n    }\r\n    console.log(y); // 报错：y is not defined\r\n    ```\r\n\r\n  - **禁止重复声明**：同一作用域内不允许重复声明同一个变量。\r\n\r\n    ```javascript\r\n    let z = 5;\r\n    let z = 10; // 报错：Identifier \'z\' has already been declared\r\n    ```\r\n\r\n  - **变量提升**：`let` 也有变量提升，但存在“暂时性死区”（Temporal Dead Zone, TDZ），即在声明之前不能访问变量。\r\n\r\n    ```javascript\r\n    console.log(b); // 报错：Cannot access \'b\' before initialization\r\n    let b = 5;\r\n    ```\r\n\r\n#### **`const`**\r\n\r\n- **引入时间**：ES6 引入了 `const`，用于声明常量。\r\n- **特点**：\r\n  - **不可重新赋值**：`const` 声明的变量一旦赋值后，不能再被修改。\r\n\r\n    ```javascript\r\n    const PI = 3.14;\r\n    PI = 3.14159; // 报错：Assignment to constant variable\r\n    ```\r\n\r\n  - **必须初始化**：`const` 声明时必须赋初值。\r\n\r\n    ```javascript\r\n    const c; // 报错：Missing initializer in const declaration\r\n    ```\r\n\r\n  - **块级作用域**：与 `let` 类似，`const` 也是块级作用域。\r\n\r\n    ```javascript\r\n    if (true) {\r\n        const d = 10;\r\n        console.log(d); // 输出 10\r\n    }\r\n    console.log(d); // 报错：d is not defined\r\n    ```\r\n\r\n  - **引用类型**：对于对象或数组，`const` 禁止重新赋值，但可以修改其属性或内容。\r\n\r\n    ```javascript\r\n    const obj = { name: \'Alice\' };\r\n    obj.name = \'Bob\'; // 允许修改属性\r\n    console.log(obj.name); // 输出 Bob\r\n\r\n    const arr = [1, 2, 3];\r\n    arr.push(4); // 允许修改数组内容\r\n    console.log(arr); // 输出 [1, 2, 3, 4]\r\n    ```\r\n\r\n---\r\n\r\n### **2. 数据类型**\r\n\r\nJavaScript 是一种动态类型语言，变量的数据类型由值决定，而不是由声明决定。JavaScript 的数据类型分为两大类：**基本类型** 和 **引用类型**。\r\n\r\n#### **基本类型**\r\n\r\n- **`string`**：表示文本数据。\r\n\r\n  ```javascript\r\n  const str = "Hello, World!";\r\n  console.log(typeof str); // 输出 "string"\r\n  ```\r\n\r\n- **`number`**：表示数字，包括整数和浮点数。\r\n\r\n  ```javascript\r\n  const num = 42;\r\n  console.log(typeof num); // 输出 "number"\r\n  ```\r\n\r\n- **`boolean`**：表示布尔值，只有两个值：`true` 和 `false`。\r\n\r\n  ```javascript\r\n  const bool = true;\r\n  console.log(typeof bool); // 输出 "boolean"\r\n  ```\r\n\r\n- **`null`**：表示空值，通常用来清空变量。\r\n\r\n  ```javascript\r\n  const empty = null;\r\n  console.log(typeof empty); // 输出 "object"（这是一个历史遗留问题）\r\n  ```\r\n\r\n- **`undefined`**：表示未定义的值，通常用于未初始化的变量。\r\n\r\n  ```javascript\r\n  let undef;\r\n  console.log(typeof undef); // 输出 "undefined"\r\n  ```\r\n\r\n- **`symbol`**（ES6 引入）：表示唯一的值，主要用于对象属性的唯一标识。\r\n\r\n  ```javascript\r\n  const sym = Symbol(\'unique\');\r\n  console.log(typeof sym); // 输出 "symbol"\r\n  ```\r\n\r\n- **`bigint`**（ES2020 引入）：表示任意大小的整数，超出 `Number` 范围时使用。\r\n\r\n  ```javascript\r\n  const big = 123456789012345678901234567890n;\r\n  console.log(typeof big); // 输出 "bigint"\r\n  ```\r\n\r\n#### **引用类型**\r\n\r\n- **`object`**：表示复杂数据结构，包括普通对象、数组、函数等。\r\n\r\n  ```javascript\r\n  const obj = { key: \'value\' };\r\n  console.log(typeof obj); // 输出 "object"\r\n\r\n  const arr = [1, 2, 3];\r\n  console.log(typeof arr); // 输出 "object"\r\n  ```\r\n\r\n- **`array`**：数组是特殊的对象，用于存储有序的集合。\r\n\r\n  ```javascript\r\n  const arr = [1, 2, 3];\r\n  console.log(Array.isArray(arr)); // 输出 true\r\n  ```\r\n\r\n- **`function`**：函数是一种特殊的对象，用于封装可执行的代码。\r\n\r\n  ```javascript\r\n  function fn() {}\r\n  console.log(typeof fn); // 输出 "function"\r\n  ```\r\n\r\n---\r\n\r\n### **3. 类型检测**\r\n\r\n为了区分不同的数据类型，JavaScript 提供了几种方法来检测变量的类型。\r\n\r\n#### **`typeof`**\r\n\r\n- **用途**：用于检测基本类型。\r\n- **示例**：\r\n\r\n  ```javascript\r\n  console.log(typeof "text"); // 输出 "string"\r\n  console.log(typeof 42); // 输出 "number"\r\n  console.log(typeof true); // 输出 "boolean"\r\n  console.log(typeof undefined); // 输出 "undefined"\r\n  console.log(typeof null); // 输出 "object"（历史遗留问题）\r\n  console.log(typeof {}); // 输出 "object"\r\n  console.log(typeof []); // 输出 "object"\r\n  console.log(typeof function() {}); // 输出 "function"\r\n  ```\r\n\r\n#### **`instanceof`**\r\n\r\n- **用途**：用于检测引用类型的实例。\r\n- **示例**：\r\n\r\n  ```javascript\r\n  const arr = [1, 2, 3];\r\n  console.log(arr instanceof Array); // 输出 true\r\n  console.log(arr instanceof Object); // 输出 true（因为数组也是对象）\r\n\r\n  const date = new Date();\r\n  console.log(date instanceof Date); // 输出 true\r\n  ```\r\n\r\n#### **`Array.isArray()`**\r\n\r\n- **用途**：专门用于检测数组。\r\n- **示例**：\r\n\r\n  ```javascript\r\n  const arr = [1, 2, 3];\r\n  console.log(Array.isArray(arr)); // 输出 true\r\n\r\n  const obj = { 0: 1, 1: 2, length: 2 };\r\n  console.log(Array.isArray(obj)); // 输出 false\r\n  ```\r\n\r\n#### **`Object.prototype.toString.call()`**\r\n\r\n- **用途**：更精确地检测数据类型。\r\n- **示例**：\r\n\r\n  ```javascript\r\n  console.log(Object.prototype.toString.call([])); // 输出 "[object Array]"\r\n  console.log(Object.prototype.toString.call({})); // 输出 "[object Object]"\r\n  console.log(Object.prototype.toString.call(null)); // 输出 "[object Null]"\r\n  console.log(Object.prototype.toString.call(undefined)); // 输出 "[object Undefined]"\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=6407.37b5f915.js.map