{"version":3,"file":"js/3805.a040255c.js","mappings":"oHAAA,qvD","sources":["webpack://myblog/./src/assets/md/c/content/042-3 队列Queue.md"],"sourcesContent":["export default \"## **3. 队列（Queue）**\\r\\n\\r\\n队列是一种先进先出（FIFO）的数据结构，支持两种主要操作：`enqueue`（入队）和 `dequeue`（出队）。\\r\\n\\r\\n### **3.1 数组实现**\\r\\n\\r\\n- **定义**：\\r\\n\\r\\n  ```c\\r\\n  #define MAX_SIZE 100\\r\\n\\r\\n  struct Queue {\\r\\n      int data[MAX_SIZE];\\r\\n      int front;\\r\\n      int rear;\\r\\n  };\\r\\n  ```\\r\\n\\r\\n- **实现**：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <stdlib.h>\\r\\n\\r\\n  struct Queue {\\r\\n      int data[MAX_SIZE];\\r\\n      int front;\\r\\n      int rear;\\r\\n  };\\r\\n\\r\\n  void initQueue(struct Queue *queue) {\\r\\n      queue->front = -1;\\r\\n      queue->rear = -1;\\r\\n  }\\r\\n\\r\\n  int isFull(struct Queue *queue) {\\r\\n      return queue->rear == MAX_SIZE - 1;\\r\\n  }\\r\\n\\r\\n  int isEmpty(struct Queue *queue) {\\r\\n      return queue->front == -1;\\r\\n  }\\r\\n\\r\\n  void enqueue(struct Queue *queue, int value) {\\r\\n      if (isFull(queue)) {\\r\\n          printf(\\\"Queue Overflow\\\\n\\\");\\r\\n          return;\\r\\n      }\\r\\n      if (isEmpty(queue)) {\\r\\n          queue->front = 0;\\r\\n      }\\r\\n      queue->data[++(queue->rear)] = value;\\r\\n  }\\r\\n\\r\\n  int dequeue(struct Queue *queue) {\\r\\n      if (isEmpty(queue)) {\\r\\n          printf(\\\"Queue Underflow\\\\n\\\");\\r\\n          return -1;\\r\\n      }\\r\\n      int value = queue->data[queue->front];\\r\\n      if (queue->front == queue->rear) {\\r\\n          queue->front = queue->rear = -1;\\r\\n      } else {\\r\\n          queue->front++;\\r\\n      }\\r\\n      return value;\\r\\n  }\\r\\n\\r\\n  int main() {\\r\\n      struct Queue queue;\\r\\n      initQueue(&queue);\\r\\n\\r\\n      enqueue(&queue, 10);\\r\\n      enqueue(&queue, 20);\\r\\n      enqueue(&queue, 30);\\r\\n\\r\\n      printf(\\\"Dequeued: %d\\\\n\\\", dequeue(&queue));  // 输出：10\\r\\n      printf(\\\"Dequeued: %d\\\\n\\\", dequeue(&queue));  // 输出：20\\r\\n\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}