{"version":3,"file":"js/6769.3ead08f6.js","mappings":"oHAAA,w0C","sources":["webpack://myblog/./src/assets/md/java/content/065-3 数据存储安全.md"],"sourcesContent":["export default \"## **3. 数据存储安全**\\r\\n\\r\\n在存储敏感数据时，必须采取措施防止数据泄露。\\r\\n\\r\\n### **3.1 密码存储**\\r\\n\\r\\n密码不应以明文形式存储，而应使用加盐哈希的方式存储。\\r\\n\\r\\n#### **加盐哈希示例**\\r\\n\\r\\n```java\\r\\nimport java.security.MessageDigest;\\r\\nimport java.security.SecureRandom;\\r\\n\\r\\npublic class PasswordStorageExample {\\r\\n    public static void main(String[] args) throws Exception {\\r\\n        String password = \\\"userPassword\\\";\\r\\n\\r\\n        // 生成随机盐\\r\\n        SecureRandom random = new SecureRandom();\\r\\n        byte[] salt = new byte[16];\\r\\n        random.nextBytes(salt);\\r\\n\\r\\n        // 加盐哈希\\r\\n        MessageDigest digest = MessageDigest.getInstance(\\\"SHA-256\\\");\\r\\n        digest.update(salt);\\r\\n        byte[] hash = digest.digest(password.getBytes());\\r\\n\\r\\n        System.out.println(\\\"Salt: \\\" + bytesToHex(salt));\\r\\n        System.out.println(\\\"Hashed Password: \\\" + bytesToHex(hash));\\r\\n    }\\r\\n\\r\\n    private static String bytesToHex(byte[] bytes) {\\r\\n        StringBuilder hexString = new StringBuilder();\\r\\n        for (byte b : bytes) {\\r\\n            String hex = Integer.toHexString(0xff & b);\\r\\n            if (hex.length() == 1) hexString.append('0');\\r\\n            hexString.append(hex);\\r\\n        }\\r\\n        return hexString.toString();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n### **3.2 数据库加密**\\r\\n\\r\\n敏感数据在存储到数据库之前可以加密，例如使用 JPA 的 `@Convert` 注解实现字段级加密。\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}