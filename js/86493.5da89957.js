"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[86493],{86493:function(r,t,n){n.r(t),t["default"]="# **2. 设计模式的分类**\r\n\r\n## **2.1 创建型模式（Creational Patterns）**\r\n\r\n- 单例模式（Singleton Pattern）\r\n- 工厂方法模式（Factory Method Pattern）\r\n- 抽象工厂模式（Abstract Factory Pattern）\r\n- 建造者模式（Builder Pattern）\r\n- 原型模式（Prototype Pattern）\r\n\r\n## **2.2 结构型模式（Structural Patterns）**\r\n\r\n- 适配器模式（Adapter Pattern）\r\n- 装饰器模式（Decorator Pattern）\r\n- 代理模式（Proxy Pattern）\r\n- 外观模式（Facade Pattern）\r\n- 桥接模式（Bridge Pattern）\r\n- 组合模式（Composite Pattern）\r\n- 享元模式（Flyweight Pattern）\r\n\r\n## **2.3 行为型模式（Behavioral Patterns）**\r\n\r\n- 策略模式（Strategy Pattern）\r\n- 模板方法模式（Template Method Pattern）\r\n- 观察者模式（Observer Pattern）\r\n- 状态模式（State Pattern）\r\n- 责任链模式（Chain of Responsibility Pattern）\r\n- 命令模式（Command Pattern）\r\n- 迭代器模式（Iterator Pattern）\r\n- 中介者模式（Mediator Pattern）\r\n- 备忘录模式（Memento Pattern）\r\n- 解释器模式（Interpreter Pattern）\r\n- 访问者模式（Visitor Pattern）\r\n\r\n---"}}]);
//# sourceMappingURL=86493.5da89957.js.map