{"version":3,"file":"js/7296.260ac4a7.js","mappings":"oHAAA,8sK","sources":["webpack://myblog/./src/assets/md/javascript/content/006-循环语句.md"],"sourcesContent":["export default \"## **循环语句**\\r\\n\\r\\n### **1. `for` 循环**\\r\\n\\r\\n`for` 循环是最常用的循环结构之一，适用于已知循环次数的场景。\\r\\n\\r\\n#### **基本语法**\\r\\n\\r\\n```javascript\\r\\nfor (初始化; 条件; 更新) {\\r\\n    // 循环体\\r\\n}\\r\\n```\\r\\n\\r\\n- **初始化**：在循环开始前执行一次，通常用于定义计数器变量。\\r\\n- **条件**：每次循环开始时检查的条件表达式，如果为 `true`，则继续循环；如果为 `false`，则退出循环。\\r\\n- **更新**：每次循环结束时执行，通常用于更新计数器变量。\\r\\n\\r\\n#### **示例**\\r\\n\\r\\n```javascript\\r\\n// 打印数字 1 到 5\\r\\nfor (let i = 1; i <= 5; i++) {\\r\\n    console.log(i);\\r\\n}\\r\\n// 输出：\\r\\n// 1\\r\\n// 2\\r\\n// 3\\r\\n// 4\\r\\n// 5\\r\\n```\\r\\n\\r\\n#### **嵌套 `for` 循环**\\r\\n\\r\\n可以在一个 `for` 循环中嵌套另一个 `for` 循环，以实现更复杂的逻辑。\\r\\n\\r\\n**示例：打印二维数组**\\r\\n\\r\\n```javascript\\r\\nconst matrix = [\\r\\n    [1, 2, 3],\\r\\n    [4, 5, 6],\\r\\n    [7, 8, 9]\\r\\n];\\r\\n\\r\\nfor (let i = 0; i < matrix.length; i++) {\\r\\n    for (let j = 0; j < matrix[i].length; j++) {\\r\\n        console.log(matrix[i][j]);\\r\\n    }\\r\\n}\\r\\n// 输出：\\r\\n// 1\\r\\n// 2\\r\\n// 3\\r\\n// 4\\r\\n// 5\\r\\n// 6\\r\\n// 7\\r\\n// 8\\r\\n// 9\\r\\n```\\r\\n\\r\\n#### **注意事项**\\r\\n\\r\\n- 确保循环条件最终会变为 `false`，否则可能导致无限循环。\\r\\n- 初始化和更新部分可以省略，但需要确保逻辑正确。\\r\\n\\r\\n---\\r\\n\\r\\n### **2. `while` 循环**\\r\\n\\r\\n`while` 循环适用于循环次数未知但需要满足某个条件时使用的场景。\\r\\n\\r\\n#### **基本语法**\\r\\n\\r\\n```javascript\\r\\nwhile (条件) {\\r\\n    // 循环体\\r\\n}\\r\\n```\\r\\n\\r\\n- **条件**：每次循环开始时检查的条件表达式，如果为 `true`，则继续循环；如果为 `false`，则退出循环。\\r\\n\\r\\n#### **示例**\\r\\n\\r\\n```javascript\\r\\n// 打印数字 1 到 5\\r\\nlet i = 1;\\r\\nwhile (i <= 5) {\\r\\n    console.log(i);\\r\\n    i++;\\r\\n}\\r\\n// 输出：\\r\\n// 1\\r\\n// 2\\r\\n// 3\\r\\n// 4\\r\\n// 5\\r\\n```\\r\\n\\r\\n#### **注意事项**\\r\\n\\r\\n- 必须手动更新计数器变量，否则可能导致无限循环。\\r\\n- 如果初始条件为 `false`，循环体不会执行。\\r\\n\\r\\n---\\r\\n\\r\\n### **3. `do...while` 循环**\\r\\n\\r\\n`do...while` 循环与 `while` 类似，但它保证循环体至少执行一次，然后再检查条件。\\r\\n\\r\\n#### **基本语法**\\r\\n\\r\\n```javascript\\r\\ndo {\\r\\n    // 循环体\\r\\n} while (条件);\\r\\n```\\r\\n\\r\\n- **特点**：无论条件是否为 `true`，循环体都会至少执行一次。\\r\\n\\r\\n#### **示例**\\r\\n\\r\\n```javascript\\r\\n// 打印数字 1 到 5\\r\\nlet i = 1;\\r\\ndo {\\r\\n    console.log(i);\\r\\n    i++;\\r\\n} while (i <= 5);\\r\\n// 输出：\\r\\n// 1\\r\\n// 2\\r\\n// 3\\r\\n// 4\\r\\n// 5\\r\\n```\\r\\n\\r\\n**示例：条件不成立时仍执行一次**\\r\\n\\r\\n```javascript\\r\\nlet x = 10;\\r\\ndo {\\r\\n    console.log(\\\"This will run once.\\\");\\r\\n} while (x < 5);\\r\\n// 输出：\\r\\n// This will run once.\\r\\n```\\r\\n\\r\\n#### **适用场景**\\r\\n\\r\\n- 需要确保某些操作至少执行一次，即使条件不满足。\\r\\n\\r\\n---\\r\\n\\r\\n### **4. `for...in` 循环**\\r\\n\\r\\n`for...in` 循环用于遍历对象的属性（包括原型链上的可枚举属性），也可以用于遍历数组的索引。\\r\\n\\r\\n#### **基本语法**\\r\\n\\r\\n```javascript\\r\\nfor (let key in 对象) {\\r\\n    // 循环体\\r\\n}\\r\\n```\\r\\n\\r\\n- **key**：表示当前属性名或数组索引。\\r\\n\\r\\n#### **示例：遍历对象**\\r\\n\\r\\n```javascript\\r\\nconst person = {\\r\\n    name: \\\"Alice\\\",\\r\\n    age: 25,\\r\\n    city: \\\"Wonderland\\\"\\r\\n};\\r\\n\\r\\nfor (let key in person) {\\r\\n    console.log(`${key}: ${person[key]}`);\\r\\n}\\r\\n// 输出：\\r\\n// name: Alice\\r\\n// age: 25\\r\\n// city: Wonderland\\r\\n```\\r\\n\\r\\n#### **示例：遍历数组**\\r\\n\\r\\n```javascript\\r\\nconst colors = [\\\"red\\\", \\\"green\\\", \\\"blue\\\"];\\r\\n\\r\\nfor (let index in colors) {\\r\\n    console.log(index, colors[index]);\\r\\n}\\r\\n// 输出：\\r\\n// 0 red\\r\\n// 1 green\\r\\n// 2 blue\\r\\n```\\r\\n\\r\\n#### **注意事项**\\r\\n\\r\\n1. **不适合直接遍历数组**：\\r\\n   - `for...in` 遍历的是数组的索引，而不是值。\\r\\n   - 如果数组被扩展了自定义属性，`for...in` 也会遍历这些非数值属性。\\r\\n\\r\\n     ```javascript\\r\\n     const arr = [\\\"a\\\", \\\"b\\\"];\\r\\n     arr.customProperty = \\\"custom\\\";\\r\\n\\r\\n     for (let index in arr) {\\r\\n         console.log(index);\\r\\n     }\\r\\n     // 输出：\\r\\n     // 0\\r\\n     // 1\\r\\n     // customProperty\\r\\n     ```\\r\\n\\r\\n   - 因此，推荐使用 `for...of` 或其他方法（如 `forEach`）来遍历数组。\\r\\n\\r\\n2. **仅遍历可枚举属性**：\\r\\n   - 不会遍历对象的不可枚举属性（如内置方法）。\\r\\n\\r\\n     ```javascript\\r\\n     const obj = Object.create(null);\\r\\n     obj.name = \\\"Alice\\\";\\r\\n     obj.age = 25;\\r\\n\\r\\n     for (let key in obj) {\\r\\n         console.log(key); // 输出 name 和 age\\r\\n     }\\r\\n     ```\\r\\n\\r\\n---\\r\\n\\r\\n### **5. `for...of` 循环**\\r\\n\\r\\n`for...of` 循环是 ES6 引入的特性，用于遍历可迭代对象（如数组、字符串、Map、Set 等）的值。\\r\\n\\r\\n#### **基本语法**\\r\\n\\r\\n```javascript\\r\\nfor (let value of 可迭代对象) {\\r\\n    // 循环体\\r\\n}\\r\\n```\\r\\n\\r\\n- **value**：表示当前迭代的值。\\r\\n\\r\\n#### **示例：遍历数组**\\r\\n\\r\\n```javascript\\r\\nconst colors = [\\\"red\\\", \\\"green\\\", \\\"blue\\\"];\\r\\n\\r\\nfor (let color of colors) {\\r\\n    console.log(color);\\r\\n}\\r\\n// 输出：\\r\\n// red\\r\\n// green\\r\\n// blue\\r\\n```\\r\\n\\r\\n#### **示例：遍历字符串**\\r\\n\\r\\n```javascript\\r\\nconst str = \\\"hello\\\";\\r\\n\\r\\nfor (let char of str) {\\r\\n    console.log(char);\\r\\n}\\r\\n// 输出：\\r\\n// h\\r\\n// e\\r\\n// l\\r\\n// l\\r\\n// o\\r\\n```\\r\\n\\r\\n#### **示例：遍历 Map**\\r\\n\\r\\n```javascript\\r\\nconst map = new Map([\\r\\n    [\\\"name\\\", \\\"Alice\\\"],\\r\\n    [\\\"age\\\", 25],\\r\\n    [\\\"city\\\", \\\"Wonderland\\\"]\\r\\n]);\\r\\n\\r\\nfor (let [key, value] of map) {\\r\\n    console.log(`${key}: ${value}`);\\r\\n}\\r\\n// 输出：\\r\\n// name: Alice\\r\\n// age: 25\\r\\n// city: Wonderland\\r\\n```\\r\\n\\r\\n#### **示例：遍历 Set**\\r\\n\\r\\n```javascript\\r\\nconst set = new Set([1, 2, 3]);\\r\\n\\r\\nfor (let num of set) {\\r\\n    console.log(num);\\r\\n}\\r\\n// 输出：\\r\\n// 1\\r\\n// 2\\r\\n// 3\\r\\n```\\r\\n\\r\\n#### **注意事项**\\r\\n\\r\\n- **不能直接用于普通对象**：\\r\\n  - 普通对象不是可迭代对象，因此不能直接使用 `for...of`。\\r\\n\\r\\n    ```javascript\\r\\n    const obj = { a: 1, b: 2 };\\r\\n    for (let value of obj) {\\r\\n        console.log(value);\\r\\n    }\\r\\n    // 报错：obj is not iterable\\r\\n    ```\\r\\n\\r\\n  - 如果需要遍历对象的值，可以先将其转换为可迭代形式（如 `Object.values()` 或 `Object.entries()`）。\\r\\n\\r\\n    ```javascript\\r\\n    const obj = { a: 1, b: 2 };\\r\\n\\r\\n    for (let value of Object.values(obj)) {\\r\\n        console.log(value);\\r\\n    }\\r\\n    // 输出：\\r\\n    // 1\\r\\n    // 2\\r\\n    ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}