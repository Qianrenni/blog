(function(){var e={7497:function(e,t,n){"use strict";e.exports=n.p+"img/figure1.2a3bd226.jpg"},13095:function(e){"use strict";e.exports=JSON.parse('[{"title":"第一章 矩阵及其初等变换","level":1,"id":"001-第一章 矩阵及其初等变换.md","children":[{"title":"§1.1 矩阵及其运算","level":2,"id":"002-11 矩阵及其运算.md","children":[]},{"title":"§1.2 高斯消元法与矩阵的初等变换","level":2,"id":"003-12 高斯消元法与矩阵的初等变换.md","children":[]},{"title":"§1.3 逆矩阵","level":2,"id":"004-13 逆矩阵.md","children":[]},{"title":"§1.4 分块矩阵","level":2,"id":"005-14 分块矩阵.md","children":[]}]},{"title":"第二章 行列式","level":1,"id":"006-第二章 行列式.md","children":[{"title":"§2.1 n阶行列式的定义","level":2,"id":"007-21 n阶行列式的定义.md","children":[]},{"title":"§2.2 行列式的性质与计算","level":2,"id":"008-22 行列式的性质与计算.md","children":[]},{"title":"§2.3 拉普拉斯展开定理","level":2,"id":"009-23 拉普拉斯展开定理.md","children":[]},{"title":"§2.4 克拉默法则","level":2,"id":"010-24 克拉默法则.md","children":[]},{"title":"§2.5 矩阵的秩","level":2,"id":"011-25 矩阵的秩.md","children":[]}]},{"title":"第三章 几何空间","level":1,"id":"012-第三章 几何空间.md","children":[{"title":"§3.1 空间直角坐标系与向量","level":2,"id":"013-31 空间直角坐标系与向量.md","children":[]},{"title":"§3.2 向量乘法","level":2,"id":"014-32 向量乘法.md","children":[]},{"title":"§3.3 平面","level":2,"id":"015-33 平面.md","children":[]},{"title":"§3.4 空间直线","level":2,"id":"016-34 空间直线.md","children":[]}]},{"title":"第四章 n维向量空间","level":1,"id":"017-第四章 n维向量空间.md","children":[{"title":"§4.1 n维向量空间的概念","level":2,"id":"018-41 n维向量空间的概念.md","children":[]},{"title":"§4.2 向量组的线性相关性","level":2,"id":"019-42 向量组的线性相关性.md","children":[]},{"title":"§4.3 向量组的秩与极大无关组","level":2,"id":"020-43 向量组的秩与极大无关组.md","children":[]},{"title":"§4.4 线性方程组解的结构","level":2,"id":"021-44 线性方程组解的结构.md","children":[]}]},{"title":"第五章 特征值与特征向量","level":1,"id":"022-第五章 特征值与特征向量.md","children":[{"title":"§5.1 特征值与特征向量的概念与计算","level":2,"id":"023-51 特征值与特征向量的概念与计算.md","children":[]},{"title":"§5.2 矩阵的相似对角化","level":2,"id":"024-52 矩阵的相似对角化.md","children":[]},{"title":"§5.3 n维向量空间的正交性","level":2,"id":"025-53 n维向量空间的正交性.md","children":[]},{"title":"§5.4 实对称矩阵的相似对角化","level":2,"id":"026-54 实对称矩阵的相似对角化.md","children":[]}]},{"title":"第六章 二次型与二次曲面","level":1,"id":"027-第六章 二次型与二次曲面.md","children":[{"title":"§6.1 实二次型及其标准形","level":2,"id":"028-61 实二次型及其标准形.md","children":[]},{"title":"§6.2 正定二次型","level":2,"id":"029-62 正定二次型.md","children":[]},{"title":"§6.3 曲面与空间曲线","level":2,"id":"030-63 曲面与空间曲线.md","children":[]},{"title":"§6.4 二次曲面","level":2,"id":"031-64 二次曲面.md","children":[]}]},{"title":"第七章 线性空间与线性变换","level":1,"id":"032-第七章 线性空间与线性变换.md","children":[{"title":"§7.1 线性空间的概念","level":2,"id":"033-71 线性空间的概念.md","children":[]},{"title":"§7.2 线性空间的基、维数与坐标","level":2,"id":"034-72 线性空间的基维数与坐标.md","children":[]},{"title":"§7.3 欧氏空间","level":2,"id":"035-73 欧氏空间.md","children":[]},{"title":"§7.4 线性变换","level":2,"id":"036-74 线性变换.md","children":[]}]}]')},14184:function(e){"use strict";e.exports=JSON.parse('[{"title":"1. 设计模式概述","level":1,"id":"001-1 设计模式概述.md","children":[]},{"title":"2. 设计模式的分类","level":1,"id":"002-2 设计模式的分类.md","children":[]},{"title":"3. 面向对象设计原则","level":1,"id":"003-3 面向对象设计原则.md","children":[]},{"title":"4. 创建型模式详解","level":1,"id":"004-4 创建型模式详解.md","children":[]},{"title":"5. 结构型模式详解","level":1,"id":"005-5 结构型模式详解.md","children":[]},{"title":"6. 行为型模式详解","level":1,"id":"006-6 行为型模式详解.md","children":[]},{"title":"7. 设计模式的应用","level":1,"id":"007-7 设计模式的应用.md","children":[]},{"title":"8. 设计模式的总结与展望","level":1,"id":"008-8 设计模式的总结与展望.md","children":[]}]')},22741:function(e){"use strict";e.exports=JSON.parse('[{"title":"TCP/IP网络模型 和 OSI网络模型","level":1,"id":"001-TCPIP网络模型 和 OSI网络模型.md","children":[]},{"title":"IP协议的工作原理","level":1,"id":"002-IP协议的工作原理.md","children":[]},{"title":"TCP协议的工作原理","level":1,"id":"003-TCP协议的工作原理.md","children":[]},{"title":"UDP协议的工作原理","level":1,"id":"004-UDP协议的工作原理.md","children":[]},{"title":"HTTP协议的工作原理","level":1,"id":"005-HTTP协议的工作原理.md","children":[]},{"title":"HTTP,TCP,UDP,IP的区别与联系","level":1,"id":"006-HTTPTCPUDPIP的区别与联系.md","children":[]},{"title":"三次握手和四次挥手","level":1,"id":"007-三次握手和四次挥手.md","children":[]},{"title":"二次握手和三次挥手是否可行?","level":1,"id":"008-二次握手和三次挥手是否可行.md","children":[]},{"title":"HTTP和HTTPS的区别","level":1,"id":"009-HTTP和HTTPS的区别.md","children":[]},{"title":"常见的网络攻击及防御手段","level":1,"id":"010-常见的网络攻击及防御手段.md","children":[]}]')},23459:function(e){"use strict";e.exports=JSON.parse('[{"title":"1. Docker 简介与核心概念","level":1,"id":"001-1 Docker 简介与核心概念.md","children":[]},{"title":"2. Docker 架构组成","level":1,"id":"002-2 Docker 架构组成.md","children":[]},{"title":"3. Docker 安装与环境搭建","level":1,"id":"003-3 Docker 安装与环境搭建.md","children":[]},{"title":"4. Docker 基本命令详解","level":1,"id":"004-4 Docker 基本命令详解.md","children":[]},{"title":"5. Dockerfile：构建镜像的配方文件","level":1,"id":"005-5 Dockerfile构建镜像的配方文件.md","children":[]},{"title":"6. Volume：持久化数据管理","level":1,"id":"006-6 Volume持久化数据管理.md","children":[]},{"title":"7. 网络（Networking）：容器间通信","level":1,"id":"007-7 网络Networking容器间通信.md","children":[]},{"title":"8. Docker Compose：多服务编排工具","level":1,"id":"008-8 Docker Compose多服务编排工具.md","children":[]},{"title":"9. Docker 与 CI/CD 集成","level":1,"id":"009-9 Docker 与 CICD 集成.md","children":[]},{"title":"10. 常见问题与最佳实践","level":1,"id":"010-10 常见问题与最佳实践.md","children":[]},{"title":"🎁 附录：常用命令速查表","level":1,"id":"011-附录常用命令速查表.md","children":[]},{"title":"📘 推荐学习资源","level":1,"id":"012-推荐学习资源.md","children":[]},{"title":"❤️ 总结","level":1,"id":"013-总结.md","children":[]}]')},29071:function(e){"use strict";e.exports=JSON.parse('[{"title":"一. 进程 vs 线程","level":1,"id":"001-一 进程 vs 线程.md","children":[{"title":"定义","level":2,"id":"002-定义.md","children":[]},{"title":"区别","level":2,"id":"003-区别.md","children":[]},{"title":"2. 应用场景","level":2,"id":"004-2 应用场景.md","children":[]},{"title":"3. 总结","level":2,"id":"005-3 总结.md","children":[]}]},{"title":"二. 死锁的产生条件和解决办法","level":1,"id":"006-二 死锁的产生条件和解决办法.md","children":[{"title":"产生条件","level":2,"id":"007-产生条件.md","children":[]},{"title":"解决办法","level":2,"id":"008-解决办法.md","children":[]}]},{"title":"三. 内存管理","level":1,"id":"009-三 内存管理.md","children":[{"title":"3.1. 分页（Paging）","level":2,"id":"010-31 分页Paging.md","children":[]},{"title":"3.2. 分段（Segmentation）","level":2,"id":"011-32 分段Segmentation.md","children":[]},{"title":"3.3. 分页与分段的对比","level":2,"id":"012-33 分页与分段的对比.md","children":[]},{"title":"3.4. 多级页表（Multi-level Page Table）","level":2,"id":"013-34 多级页表Multi-level Page Table.md","children":[]},{"title":"3.5. 段页式内存管理（Segmented Paging）","level":2,"id":"014-35 段页式内存管理Segmented Paging.md","children":[]}]},{"title":"四. 虚拟内存管理（Virtual Memory Management）","level":1,"id":"015-四 虚拟内存管理Virtual Memory Management.md","children":[{"title":"虚存技术的引入","level":2,"id":"016-虚存技术的引入.md","children":[]},{"title":"局部性原理和虚拟存储特征","level":2,"id":"017-局部性原理和虚拟存储特征.md","children":[]},{"title":"请求分页存储管理","level":2,"id":"018-请求分页存储管理.md","children":[]},{"title":"页面置换算法","level":2,"id":"019-页面置换算法.md","children":[]}]},{"title":"五、文件系统","level":1,"id":"020-五文件系统.md","children":[{"title":"1. 文件系统的基本概念","level":2,"id":"021-1 文件系统的基本概念.md","children":[]},{"title":"2. 文件系统的组成","level":2,"id":"022-2 文件系统的组成.md","children":[]},{"title":"3. 文件系统的功能","level":2,"id":"023-3 文件系统的功能.md","children":[]},{"title":"4. 常见的文件系统类型","level":2,"id":"024-4 常见的文件系统类型.md","children":[]},{"title":"5. 文件系统的层次结构","level":2,"id":"025-5 文件系统的层次结构.md","children":[]},{"title":"6. 文件系统的挂载与卸载","level":2,"id":"026-6 文件系统的挂载与卸载.md","children":[]},{"title":"7. 文件系统的性能优化","level":2,"id":"027-7 文件系统的性能优化.md","children":[]}]}]')},29102:function(e){"use strict";e.exports=JSON.parse('[{"title":"一、算法基础理论","level":1,"id":"001-一算法基础理论.md","children":[]},{"title":"二、数据结构","level":1,"id":"002-二数据结构.md","children":[{"title":"1. 线性结构","level":2,"id":"003-1 线性结构.md","children":[]},{"title":"2. 非线性数据结构","level":2,"id":"004-2 非线性数据结构.md","children":[]},{"title":"3. 高级数据结构","level":2,"id":"005-3 高级数据结构.md","children":[]},{"title":"4.数据结构对应算法","level":2,"id":"006-4数据结构对应算法.md","children":[]}]},{"title":"三、算法设计范式","level":1,"id":"007-三算法设计范式.md","children":[{"title":"1.排序算法","level":2,"id":"008-1排序算法.md","children":[]},{"title":"2. 分治法（Divide & Conquer）","level":2,"id":"009-2 分治法Divide  Conquer.md","children":[]},{"title":"2. 动态规划（DP）","level":2,"id":"010-2 动态规划DP.md","children":[]},{"title":"3. 贪心算法","level":2,"id":"011-3 贪心算法.md","children":[]},{"title":"4. 回溯法","level":2,"id":"012-4 回溯法.md","children":[]},{"title":"5. 二分搜索","level":2,"id":"013-5 二分搜索.md","children":[]},{"title":"6. 滑动窗口","level":2,"id":"014-6 滑动窗口.md","children":[]},{"title":"7.分支限界","level":2,"id":"015-7分支限界.md","children":[]},{"title":"前缀和","level":2,"id":"016-前缀和.md","children":[]},{"title":"差分","level":2,"id":"017-差分.md","children":[]}]},{"title":"四、高级专题","level":1,"id":"018-四高级专题.md","children":[{"title":"1. 数论算法","level":2,"id":"019-1 数论算法.md","children":[]},{"title":"2. 字符串算法","level":2,"id":"020-2 字符串算法.md","children":[]},{"title":"2. 计算几何","level":2,"id":"021-2 计算几何.md","children":[]},{"title":"3. 网络流算法","level":2,"id":"022-3 网络流算法.md","children":[]},{"title":"4. NP完全理论","level":2,"id":"023-4 NP完全理论.md","children":[]},{"title":"5.位运算","level":2,"id":"024-5位运算.md","children":[]},{"title":"实际应用场景","level":2,"id":"025-实际应用场景.md","children":[]}]}]')},29157:function(e){e.exports='<?xml version=\'1.0\' encoding=\'utf-8\'?>\n<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="cn" xml:lang="cn">\n  <head>\n    <title>第1章 快速入门</title>\n  </head>\n  <body><h1 class="firstTitle"><a>第1章 快速入门</a></h1> \n<h2 class="secondTitle" id="bw1"><a>1.1 Kafka简介</a></h2> \n<p class="content">Apache Kafka是一种分布式的、基于发布/订阅的消息系统，由Scala语言编写而成。它具备快速、可扩展、可持久化的特点。Kafka最初由LinkedIn开发，并于2011年初开源，2012年10月从Apache孵化器毕业，成为Apache基金会的顶级项目。目前，越来越多的开源分布式处理系统支持与Kafka集成，例如：Apache Storm、Spark。也有越来越多的公司在Kafka的基础上建立了近乎实时的信息处理平台，例如：LinkedIn、Netflix、Uber和Verizon。在国内也有很多互联网公司在生产环境中使用Kafka作为其消息中间件。</p> \n<p class="content">Kafka之所以受到越来越多开发人员的青睐，主要与其关键特性相关。</p> \n<p class="content">● Kafka具有近乎实时性的消息处理能力，即使面对海量消息也能够高效地存储消息和查询消息。Kafka将消息保存在磁盘中，在其设计理念中并不惧怕磁盘操作，它以顺序读写的方式访问磁盘，从而避免了随机读写磁盘导致的性能瓶颈。</p> \n<p class="content">● Kafka支持批量读写消息，并且会对消息进行批量压缩，这样既提高了网络的利用率，也提高了压缩效率。</p> \n<p class="content">● Kafka支持消息分区，每个分区中的消息保证顺序传输，而分区之间则可以并发操作，这样就提高了Kafka的并发能力。</p> \n<p class="content">● Kafka也支持在线增加分区，支持在线水平扩展。</p> \n<p class="content">● Kafka支持为每个分区创建多个副本，其中只会有一个Leader副本负责读写，其他副本只负责与Leader副本进行同步，这种方式提高了数据的容灾能力。Kafka会将Leader副本均匀地分布在集群中的服务器上，实现性能最大化。</p> \n<p class="content">随着Kafka在各大公司的实践应用，Kafka的应用场景也变得越来越丰富。</p> \n<p class="content">● 在应用系统中可以将Kafka作为传统的消息中间件，实现消息队列和消息的发布/订阅，在某些场景下，性能会超越RabbitMQ、ActiveMQ等传统的消息中间件。</p> \n<p class="content">● Kafka也被用作系统中的数据总线，将其接入多个子系统中，子系统会将产生的数据发送到Kafka中保存，之后流转到目的系统中。</p> \n<p class="content">● Kafka还可以用作日志收集中心，多个系统产生的日志统一收集到Kafka中，然后由数据分析平台进行统一处理。日志会被Kafka持久化到磁盘，所以同时支持离线数据处理和实时数据处理。</p> \n<p class="content">● 现在也有开发人员基于Kafka设计数据库主从同步的工具。</p> \n<h2 class="secondTitle" id="bw2"><a>1.2 以Kafka为中心的解决方案</a></h2> \n<p class="content">在大数据、高并发的系统中，为了突破瓶颈，会将系统进行水平扩展和垂直拆分，形成独立的服务。每个独立的服务背后，可能是一个集群在对外提供服务。这就会碰到一个问题，整个系统是由多个服务（子系统）组成的，数据需要在各个服务中不停流转。如果数据在各个子系统中传输时，速度过慢，就会形成瓶颈，降低整个系统的性能。</p> \n<p class="content">下面介绍的场景是笔者工作中遇到的一个案例，在一个政企信息化的云平台网站上，用户与网站交互的很多操作行为（例如，浏览某些新闻等）都会被记录下来，等待后台的多个子系统进行消费，其中比较重要的几个子系统是利用这些数据进行机器学习或是数据挖掘，产生用户的侧写。这样，网站就可以根据用户的侧写，推送给他们需要的配置和查询信息。图1-1就是这个云平台系统的架构图，其中每一个箭头都表示一条数据流。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0015-0002.jpg"/> \n <p class="imgtitle">图1-1</p> \n</div> \n<p class="content">上面的架构中涉及的子系统、存储、服务种类繁多，而且它们之间都存在较强的耦合，会出现下面的问题：</p> \n<p class="content">● 由于子系统之间存在的耦合性，两个存储之间要进行数据交换的话，开发人员就必须了解这两个存储系统的API，不仅是开发成本，就连维护成本也会很高。一旦其中一个子系统发生变化，就可能影响其他多个子系统，这简直就是一场灾难。</p> \n<p class="content">● 在某些应用场景中，数据的顺序性尤为重要，一旦数据出现乱序，就会影响最终的计算结果，降低用户体验，这就提高了开发的难度。</p> \n<p class="content">● 除了考虑数据顺序性的要求，还要考虑数据重传等提高可靠性的机制，毕竟通过网络进行传输并不可靠，可能出现丢失数据的情况。</p> \n<p class="content">● 进行数据交换的两个子系统，无论哪一方宕机，重新上线之后，都应该恢复到之前的传输位置，继续传输。尤其是对于非幂等性的操作，恢复到错误的传输位置，就会导致错误的结果。</p> \n<p class="content">● 随着业务量的增长，系统之间交换的数据量会不断地增长，水平可扩展的数据传输方式就显得尤为重要。</p> \n<p class="content">针对这个案例，我们看看Kafka是如何有效地解决上面的这些问题的（Kafka中的相关概念可以参见下文相关内容）。</p> \n<p class="content">● 解耦合</p> \n<p class="content">将Kafka作为整个系统的中枢，负责在任意两个系统之间传递数据。架构如图1-2所示，所有的存储只与Kafka通信，开发人员不需要再去了解各个子系统、服务、存储的相关接口，只需要面向Kafka编程即可。这样，在需要进行数据交换的子系统之间形成了一个基于数据的接口层，只有这两者知道消息存放的Topic、消息中数据的格式。当需要扩展消息格式时，只需要修改相关子系统的Kafka客户端即可。这样，与Kafka通信的模块就可以实现复用，Kafka则承担数据总线的作用。更简单点说，就像是一个生产者—消费者模式，而Kafka则扮演其中“队列”的角色。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0016-0003.jpg"/> \n <p class="imgtitle">图1-2</p> \n</div> \n<p class="content">● 数据持久化</p> \n<p class="content">在分布式系统中，各个组件是通过网路连接起来的。一般认为网络传输是不可靠的，当数据在两个组件之间进行传递的时候，传输过程可能会失败。除非数据被持久化到磁盘，否则就可能造成消息的丢失。Kafka把数据以消息的形式持久化到磁盘，即使Kafka出现宕机，也可以保证数据不会丢失，通过这一方式规避了数据丢失风险。为了避免磁盘上的数据不断增长，Kafka提供了日志清理、日志压缩等功能，对过时的、已经处理完成的数据进行清除。在磁盘操作中，耗时最长的就是寻道时间，这是导致磁盘的随机I/O性能很差的主要原因。为了提高消息持久化的性能，Kafka采用顺序读写的方式访问，实现了高吞吐量。</p> \n<p class="content">● 扩展与容灾</p> \n<p class="content">Kafka的每个Topic（主题）都可以分为多个Partition（分区），每个分区都有多个Replica（副本），实现消息冗余备份。每个分区中的消息是不同的，这类似于数据库中水平切分的思想，提高了并发读写的能力。而同一分区的不同副本中保存的是相同的消息，副本之间是一主多从的关系，其中Leader副本负责处理读写请求，Follower副本则只与Leader副本进行消息同步，当Leader副本出现故障时，则从Follower副本中重新选举Leader副本对外提供服务。这样，通过提高分区的数量，就可以实现水平扩展；通过提高副本的数量，就可以提高容灾能力。</p> \n<p class="content">Kafka的容灾能力不仅体现在服务端，在Consumer端也有相关设计。Consumer使用pull方式从服务端拉取消息，并且在Consumer端保存消费的具体位置，当消费者宕机后恢复上线，可以根据自己保存的消费位置重新拉取需要的消息进行消费，这就不会造成消息丢失。也就是说，Kafka不决定何时、如何消费消息，而是Consumer自己决定何时、如何消费消息。</p> \n<p class="content">Kafka还支持Consumer的水平扩展能力。我们可以让多个Consumer加入一个Consumer Group（消费组），在一个Consumer Group中，每个分区只能分配给一个Consumer消费，当Kafka服务端通过增加分区数量进行水平扩展后，我们可以向Consumer Group中增加新的Consumer来提高整个Consumer Group的消费能力。当Consumer Group中的一个Consumer出现故障下线时，会通过Rebalance操作将下线Consumer负责处理的分区分配给其他Consumer继续处理；当下线Consumer重新上线加入Consumer Group时，会再进行一次Rebalance操作，重新分配分区。当然，一个COnsumer Group可以订阅很多不同的Topic，每个Consumer可以同时处理多个分区。</p> \n<p class="content">● 顺序保证</p> \n<p class="content">在很多场景下，数据处理的顺序都很重要，不同的顺序就可能导致不同的计算结果。Kafka保证一个Partition内消息的有序性，但是并不保证多个partition之间的数据有顺序。</p> \n<p class="content">● 缓冲&amp;峰值处理能力</p> \n<p class="content">在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如图1-3所示，在9点到10点之间，是此云平台系统的访问峰值，而其他时间的访问量则很少。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0018-0004.jpg"/> \n <p class="imgtitle">图1-3</p> \n</div> \n<p class="content">如果按照处理这类峰值请求量为标准来投入资源的话，会有相当一部分资源处于待命状态，这无疑是巨大的浪费。使用Kafka能够使关键组件顶住突发的访问压力，而不会因为突发的峰值请求而使系统完全崩溃不可用。</p> \n<p class="content">● 异步通信</p> \n<p class="content">Kafka为系统提供了异步处理能力。例如，两个系统需要通过网络进行数据交换，其中一端可以把一个消息放入Kafka中后立即返回继续执行其他路基，不需要等待对端的响应。待后者将处理结果放入Kafka中之后，前者可以从其中获取并解析响应。</p> \n<h2 class="secondTitle" id="bw3"><a>1.3 Kafka核心概念</a></h2> \n<p class="content">如果读者已经对下面的概念非常熟悉，可以快速阅读或直接跳过本节，直接开始搭建Kafka的源码调试环境。</p> \n<p class="content">● 消息</p> \n<p class="content">消息是Kafka中最基本的数据单元。消息由一串字节构成，其中主要由key和value构成，key和value也都是byte数组。key的主要作用是根据一定的策略，将此消息路由到指定的分区中，这样就可以保证包含同一key的消息全部写入同一分区中，key可以是null。消息的真正有效负载是value部分的数据。为了提高网络和存储的利用率，生产者会批量发送消息到Kafka，并在发送之前对消息进行压缩，具体的细节在本书后面的章节会详细介绍。</p> \n<p class="content">● Topic&amp;分区&amp;Log</p> \n<p class="content">Topic是用于存储消息的逻辑概念，可以看作一个消息集合。每个Topic可以有多个生产者向其中推送（push）消息，也可以有任意多个消费者消费其中的消息，如图1-4所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0019-0005.jpg"/> \n <p class="imgtitle">图1-4</p> \n</div> \n<p class="content">每个Topic可以划分成多个分区（每个Topic都至少有一个分区），同一Topic下的不同分区包含的消息是不同的。每个消息在被添加到分区时，都会被分配一个offset，它是消息在此分区中的唯一编号，Kafka通过offset保证消息在分区内的顺序，offset的顺序性不跨分区，即Kafka只保证在同一个分区内的消息是有序的；同一Topic的多个分区内的消息，Kafka并不保证其顺序性，如图1-5所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0020-0006.jpg"/> \n <p class="imgtitle">图1-5</p> \n</div> \n<p class="content">同一Topic的不同分区会分配在不同的Broker（Broker的概念见下文）上。分区是Kafka水平扩展性的基础，我们可以通过增加服务器并在其上分配Partition的方式来增加Kafka的并行处理能力。</p> \n<p class="content">分区在逻辑上对应着一个Log，当生产者将消息写入分区时，实际上是写入到了分区对应的Log中。Log是一个逻辑概念，可以对应到磁盘上的一个文件夹。Log由多个Segment组成，每个Segment对应一个日志文件和索引文件。在面对海量数据时，为避免出现超大文件，每个日志文件的大小是有限制的，当超出限制后则会创建新的Segment，继续对外提供服务。这里要注意，因为Kafka采用顺序I/O，所以只向最新的Segment追加数据。为了权衡文件大小、索引速度、占用内存大小等多方面因素，索引文件采用稀疏索引的方式，大小并不会很大，在运行时会将其内容映射到内存，提高索引速度。</p> \n<p class="content">● 保留策略（Retention Policy）&amp;日志压缩（Log Compaction）</p> \n<p class="content">无论消费者是否已经消费了消息，Kafka都会一直保存这些消息，但并不会像数据库那样长期保存。为了避免磁盘被占满，Kafka会配置相应的“保留策略”（retention policy），以实现周期性地删除陈旧的消息。</p> \n<p class="content">Kafka中有两种“保留策略”：一种是根据消息保留的时间，当消息在Kafka中保存的时间超过了指定时间，就可以被删除；另一种是根据Topic存储的数据大小，当Topic所占的日志文件大小大于一个阈值，则可以开始删除最旧的消息。Kafka会启动一个后台线程，定期检查是否存在可以删除的消息。“保留策略”的配置是非常灵活的，可以有全局的配置，也可以针对Topic进行配置覆盖全局配置。</p> \n<p class="content">除此之外，Kafka还会进行“日志压缩”（Log Compaction）。在很多场景中，消息的key与value的值之间的对应关系是不断变化的，就像数据库中的数据会不断被修改一样，消费者只关心key对应的最新value值。此时，可以开启Kafka的日志压缩功能，Kafka会在后台启动一个线程，定期将相同key的消息进行合并，只保留最新的value值。日志压缩的工作原理如图1-6所示，图1-6展示了一次日志压缩过程的简化版本，为了图片清晰，只展示了key3的压缩过程。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0021-0007.jpg"/> \n <p class="imgtitle">图1-6</p> \n</div> \n<p class="content">保留策略和日志压缩的相关配置和实现细节，在本书后面的章节会详细介绍。</p> \n<p class="content">● Broker</p> \n<p class="content">一个单独的Kafka server就是一个Broker。Broker的主要工作就是接收生产者发过来的消息，分配offset，之后保存到磁盘中；同时，接收消费者、其他Broker的请求，根据请求类型进行相应处理并返回响应。在一般的生产环境中，一个Broker独占一台物理服务器。</p> \n<p class="content">● 副本</p> \n<p class="content">Kafka对消息进行了冗余备份，每个Partition可以有多个副本，每个副本中包含的消息是一样的（在同一时刻，副本之间其实并不是完全一样的，本书后面在介绍副本机制的时候会再进行说明）。每个分区至少有一个副本，当分区中只有一个副本时，就只有Leader副本，没有Follower副本。</p> \n<p class="content">每个分区的副本集合中，都会选举出一个副本作为Leader副本，Kafka在不同的场景下会采用不同的选举策略，具体策略和原理在后面详细介绍。所有的读写请求都由选举出的Leader副本处理，其他都作为Follower副本，Follower副本仅仅是从Leader 副本处把数据拉取到本地之后，同步更新到自己的Log中。图1-7展示了一个拥有三个Replica的Partition。</p> \n<div class="bodyPic_104"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0022-0008.jpg"/> \n <p class="imgtitle">图1-7</p> \n</div> \n<p class="content">一般情况下，同一分区的多个分区会被分配到不同的Broker上，这样，当Leader所在的Broker宕机之后，可以重新选举新的Leader，继续对外提供服务。</p> \n<p class="content">● ISR集合</p> \n<p class="content">ISR（In-Sync Replica）集合表示的是目前“可用”（alive）且消息量与Leader相差不多的副本集合，这是整个副本集合的一个子集。“可用”和“相差不多”都是很模糊的描述，其实际含义是ISR集合中的副本必须满足下面两个条件：</p> \n<p class="content">（1）副本所在节点必须维持着与ZooKeeper的连接。</p> \n<p class="content">（2）副本最后一条消息的offset与Leader副本的最后一条消息的offset之间的差值不能超出指定的阈值。</p> \n<p class="content">每个分区中的Leader副本都会维护此分区的ISR集合。写请求首先由Leader副本处理，之后Follower副本会从Leader上拉取写入的消息，这个过程会有一定的延迟，导致Follower副本中保存的消息略少于Leader副本，只要未超出阈值都是可以容忍的。如果一个Follower副本出现异常，比如：宕机，发生长时间GC而导致Kafka僵死或是网络断开连接导致长时间没有拉取消息进行同步，就会违反上面的两个条件，从而被Leader副本踢出ISR集合。当Follower副本从异常中恢复之后，会继续与Leader副本进行同步，当Follower副本“追上”（即最后一条消息的offset的差值小于指定阈值）Leader副本的时候，此Follower副本会被Leader副本重新加入到ISR中。</p> \n<p class="content">● HW&amp;LEO</p> \n<p class="content">HW（HighWatermark）和LEO与上面的ISR集合紧密相关。HW标记了一个特殊的offset，当消费者处理消息的时候，只能拉取到HW之前的消息，HW之后的消息对消费者来说是不可见的。与ISR集合类似，HW也是由Leader副本管理的。当ISR集合中全部的Follower副本都拉取HW指定消息进行同步后，Leader副本会递增HW的值。Kafka官方网站将HW之前的消息的状态称为“commit”，其含义是这些消息在多个副本中同时存在，即使此时Leader副本损坏，也不会出现数据丢失。</p> \n<p class="content">LEO（Log End Offset）是所有的副本都会有的一个offset标记，它指向追加到当前副本的最后一个消息的offset。当生产者向Leader副本追加消息的时候，Leader副本的LEO标记会递增；当Follower副本成功从Leader副本拉取消息并更新到本地的时候，Follower副本的LEO就会增加。</p> \n<p class="content">为了让读者更好地理解HW和LEO之间的关系，下面通过一个示例进行分析，图1-8中展示了针对offset为11的消息，ISR集合、HW与LEO是如何协调工作的：</p> \n<p class="content">①Producer向此Partition推送消息。</p> \n<p class="content">②Leader副本将消息追加到Log中，并递增其LEO。</p> \n<p class="content">③Follower副本从Leader副本拉取消息进行同步。</p> \n<p class="content">④Follower副本将拉取到的消息更新到本地Log中，并递增其LEO。</p> \n<p class="content">⑤当ISR集合中所有副本都完成了对offset=11的消息的同步，Leader副本会递增HW。</p> \n<p class="content">在①～⑤步完成之后，offset=11的消息就对生产者可见了。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0023-0009.jpg"/> \n <p class="imgtitle">图1-8</p> \n</div> \n<p class="content">了解了Replica复制的原理之后，请读者考虑一下，为什么Kafka要这么设计？在分布式存储中，冗余备份是常见的一种设计，常用的方案有同步复制和异步复制：</p> \n<p class="content">● 同步复制要求所有能工作的Follower副本都复制完，这条消息才会被认为提交成功。一旦有一个Follower副本出现故障，就会导致HW无法完成递增，消息就无法提交，生产者获取不到消息。这种情况下，故障的Follower副本会拖慢整个系统的性能，甚至导致整个系统不可用。</p> \n<p class="content">● 异步复制中，Leader副本收到生产者推送的消息后，就认为此消息提交成功。Follower副本则异步地从Leader副本同步消息。这种设计虽然避免了同步复制的问题，但同样也存在一定的风险。现在假设所有Follower副本的同步速度都比较慢，它们保存的消息量都远远落后于Leader副本，如图1-9所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0024-0010.jpg"/> \n <p class="imgtitle">图1-9</p> \n</div> \n<p class="content">此时Leader副本所在的Broker突然宕机，则会重新选举新的Leader副本，而新Leader副本中没有原来Leader副本的消息，这就出现了消息的丢失，而有些消费者则可能消费了这些丢失的消息，状态变得不可控。</p> \n<p class="content">Kafka权衡了同步复制和异步复制两种策略，通过引入了ISR集合，巧妙地解决了上面两种方案存在的缺陷：当Follower副本的延迟过高时，Leader副本被踢出ISR集合，消息依然可以快速提交，生产者可以快速得到响应，避免高延时的Follower副本影响整个Kafka集群的性能。当Leader副本所在的Broker突然宕机的时候，会优先将ISR集合中Follower副本选举为Leader副本，新Leader副本中包含了HW之前的全部消息，这就避免了消息的丢失。值得注意是，Follower副本可以批量地从Leader副本复制消息，这就加快了网络I/O,Follower 副本在更新消息时是批量写磁盘，加速了磁盘的I/O，极大减少了Follower与Leader的差距。</p> \n<p class="content">● Cluster&amp;Controller</p> \n<p class="content">多个Broker可以做成一个Cluster（集群）对外提供服务，每个Cluster当中会选举出一个Broker来担任Controller,Controller是Kafka集群的指挥中心，而其他Broker则听从Controller指挥实现相应的功能。Controller负责管理分区的状状态、管理每个分区的副本状态、监听Zookeeper中数据的变化等工作。Controller也是一主多从的实现，所有Broker都会监听Controller Leader的状态，当Leader Controller出现故障时则重新选举新的Controller Leader。Controller的具体细节在后面介绍。</p> \n<p class="content">● 生产者</p> \n<p class="content">生产者（Producer）的主要工作是生产消息，并将消息按照一定的规则推送到Topic的分区中。这里选择分区的“规则”可以有很多种，例如：根据消息的key的Hash值选择分区，或按序轮训全部分区的方式。</p> \n<p class="content">● 消费者</p> \n<p class="content">消费者（Consumer）的主要工作是从Topic中拉取消息，并对消息进行消费。某个消费者消费到Partition的哪个位置（offset）的相关信息，是Consumer自己维护的。在图1-10中，三个消费者同时消费同一个分区，各自管理自己的消费位置。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0025-0011.jpg"/> \n <p class="imgtitle">图1-10</p> \n</div> \n<p class="content">这样设计非常巧妙，避免了Kafka Server端维护消费者消费位置的开销，尤其是在消费数量较多的情况下。另一方面，如果是由Kafka Server端管理每个Consumer消费状态，一旦Kafka Server端出现延时或是消费状态丢失，将会影响大量的Consumer。同时，这一设计也提高了Consumer的灵活性，Consumer可以按照自己需要的顺序和模式拉取消息进行消费。例如：Consumer可以通过修改其消费的位置实现针对某些特殊key的消息进行反复消费，或是跳过某些消息的需求。</p> \n<p class="content">● Consumer Group</p> \n<p class="content">在Kafka中，多个Consumer可以组成一个Consumer Group，一个Consumer只能属于一个Consumer Group。Consumer Group保证其订阅的Topic的每个分区只被分配给此Consumer Group中的一个消费者处理。如果不同Consumer Group订阅了同一Topic,Consumer Group彼此之间不会干扰。这样，如果要实现一个消息可以被多个消费者同时消费（“广播”）的效果，则将每个消费者放入单独的一个Consumer Group；如果要实现一个消息只被一个消费者消费（“独占”）的效果，则将所有的Consumer放入一个Consumer Group中。在Kafka官网的介绍中，将Consumer Group称为“逻辑上的订阅者”（logical subscriber），从这个角度看，是有一定道理的。</p> \n<p class="content">图1-11展示了一个Consumer Group中消费者与分区之间的对应关系，其中，Consumer1和Consumer2分别消费Partition0和Partition1，而Partition2和Partition3同时分配给了Consumer3进行处理。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0026-0012.jpg"/> \n <p class="imgtitle">图1-11</p> \n</div> \n<p class="content">Consumer Group除了实现“独占”和“广播”模式的消息处理，Kafka还通过Consumer Group实现了消费者的水平扩展和故障转移。在图1-11中，当Consumer3的处理能力不足以处理两个Partition中的数据时，可以通过向Consumer Group中添加消费者的方式，触发Rebalance操作重新分配分区与消费者的对应关系，从而实现水平扩展。如图1-12所示，添加Consumer4之后，Consumer3只消费Partition3中的消息，Partition4中的消息则由Consumer4来消费。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0027-0013.jpg"/> \n <p class="imgtitle">图1-12</p> \n</div> \n<p class="content">下面来看消费者出现故障的场景，当Consumer4宕机时，Consumer Group会自动重新分配分区，如图1-13所示，由Consumer3接管Consumer4对应的分区继续处理。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0027-0014.jpg"/> \n <p class="imgtitle">图1-13</p> \n</div> \n<p class="content">注意，Consumer Group中消费者的数量并不是越多越好，当其中消费者数量超过分区的数量时，会导致有消费者分配不到分区，从而造成消费者的浪费。</p> \n<p class="content">介绍完Kafka的核心概念，我们通过图1-14进行总结，并从更高的视角审视整个Kafka集群的架构。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0028-0015.jpg"/> \n <p class="imgtitle">图1-14</p> \n</div> \n<p class="content">如图1-14所示，生产者会根据业务逻辑产生消息，之后根据路由规则将消息发送到指定分区的Leader副本所在的Broker上。在Kafka服务端接收到消息后，会将消息追加到Log中保存，之后Follower副本会与Leader副本进行同步，当ISR集合中所有副本都完成了此消息的同步后，则Leader副本的HW会增加，并向生产者返回响应。</p> \n<p class="content">当消费者加入到Consumer Group时，会触发Rebalance操作将分区分配给不同的消费者消费。随后，消费者会恢复其消费位置，并向Kafka服务端发送拉取消息的请求，Leader副本会验证请求的offset以及其他相关信息，最后返回消息。</p> \n<h2 class="secondTitle" id="bw4"><a>1.4 搭建Kafka源码环境</a></h2> \n<p class="content">在开始分析Kafka的源码之前，我们先要动手搭建Kafka源码的调试环境。需要准备的软件有：Java JDK、Scala-2.10、gradle-3.1、ZooKeeper-3.4.9。本书选择的Kafka版本是kafka-0.10.0.1,IDE环境是IntelliJ IDEA。</p> \n<p class="content">● 安装配置JDK</p> \n<p class="content">本书是在Window系统上搭建Kafka的源码环境，使用的JDK版本是1.8.0，环境变量配置如图1-15所示。JDK安装以及环境变量的配置不再赘述，请读者自行查阅相关文档。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0029-0016.jpg"/> \n <p class="imgtitle">图1-15</p> \n</div> \n<p class="content">使用java-version命令验证，输出如图1-16所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0029-0017.jpg"/> \n <p class="imgtitle">图1-16</p> \n</div> \n<p class="content">● 安装配置Scala</p> \n<p class="content">Kafka服务端使用Scala语言编写，本书使用的Scala-2.10版本，Scala的环境变量配置如图1-17所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0029-0018.jpg"/> \n <p class="imgtitle">图1-17</p> \n</div> \n<p class="content">使用scala-version命令验证安装是否正确，输出如图1-18所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0030-0019.jpg"/> \n <p class="imgtitle">图1-18</p> \n</div> \n<p class="content">● 安装配置Gradle</p> \n<p class="content">使用Gradle进行源码构建，Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具，本书使用Gradle 3.1版本。从Gradle官网下载gradle-3.1-bin.zip，解压缩到指定地点，配置GRADLE_HOME以及Path环境变量，如图1-19所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0030-0020.jpg"/> \n <p class="imgtitle">图1-19</p> \n</div> \n<p class="content">配置完成后，使用gradle-version命令进行验证，输出如图1-20所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0030-0021.jpg"/> \n <p class="imgtitle">图1-20</p> \n</div> \n<p class="content">● 搭建ZooKeeper环境</p> \n<p class="content">ZooKeeper是一个分布式的分布式应用程序协调服务，很多分布式系统都依赖与ZooKeeper集群实现分布式系统间的协调调度，例如：HDFS 2.x、Hbase、Kafka以及新兴的数据库中间件MyCat,ZooKeeper已经成为现代分布式系统的标配。通过ZooKeeper可以实现很多高级功能，例如：统一命名服务、统一配置管理、分布式锁、分布式队列等。</p> \n<p class="content">Kafka使用ZooKeeper集群管理元数据，例如：记录Topic名称、分区以及其副本分配等信息，用户权限控制的相关数据等。Kafka还会在ZooKeeper的某些上添加相应的监听器，用于监听集群的状态，例如：集群中所有Broker通过ZooKeeper监听Controller Leader的状态。我们也可以通过Kafka自带的脚本修改ZooKeeper触发相应操作，例如：“优先副本”选举。</p> \n<p class="content">下面我们开始搭建ZooKeeper的环境。从ZooKeeper的官网下载其二进制压缩包，之后解压缩，本书使用的版本是3.4.9，单机模式（毕竟重点是Kafka，而且读者的个人计算机资源有限，若使用集群模式，请读者自行参考相关资料）。</p> \n<p class="content">解压后，将%ZOOKEEPER%/conf/zoo_sample.cfg文件复制一份，重命名为zoo.cfg。修改zoo.cfg配置文件，这里主要就是修改dataDir配置项，此配置指向ZooKeeper存储数据的目录，其他配置可以不进行修改，如图1-21所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0031-0022.jpg"/> \n <p class="imgtitle">图1-21</p> \n</div> \n<p class="content">由于Kafka使用依赖于ZooKeeper服务，在启动Kafka之前，需要先使用zkServer命令，启动上文已配置好的ZooKeeper服务，如图1-22所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0031-0023.jpg"/> \n <p class="imgtitle">图1-22</p> \n</div> \n<p class="content">● Kafka源码构建</p> \n<p class="content">本书以kafka-0.10.0.1版本为基础进行源码分析。首先，从Apache Kafka官网下载其源码包kafka-0.10.0.1-src.tgz，解压。使用命令行导航到Kafka源代码根目录下，使用gradle idea命令进行构建（如果读者希望构建Eclipse工程，请使用gradle eclipse命令构建），构建过程中会从网上下载各种依赖包，时间会有点长，请耐心等待。最终输出BUILD SUCCESSFUL字样，表示构建成功，如图1-23所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0032-0024.jpg"/> \n <p class="imgtitle">图1-23</p> \n</div> \n<p class="content">● 安装Scala插件</p> \n<p class="content">本书使用IntelliJ IDEA进行源码分析，并安装了其对应的Scala插件。本书使用的Scala插件版本是scala-intellij-bin-2016.2.1.zip，请读者选择合适的插件版本。建议使用离线安装方式，安装方法如图1-24所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0032-0025.jpg"/> \n <p class="imgtitle">图1-24</p> \n</div> \n<p class="content">● 配置、启动Kafka</p> \n<p class="content">在Kafka服务端使用log4j输出日志，启动前需要把log4j.properties配置文件放置到src/main/scala路径下，然后运行程序，这样才能正确输出日志信息。此log4j.properties文件可以从config目录中获取，如图1-25所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0033-0026.jpg"/> \n <p class="imgtitle">图1-25</p> \n</div> \n<p class="content">server.properties是Kafka的主要配置文件，下面简单介绍其中的相关配置项的含义。必须修改的配置项就是log.dirs，其他配置读者可以根据需求自行修改。</p> \n<p class="content"># 每一个Broker在集群中的唯一标识。即使Broker的IP地址发生了变化，broker.id只要没变，</p> \n<p class="content"># 则不会影响consumers的消息情况</p> \n<p class="content">broker.id=0</p> \n<p class="content"># 是否允许Topic被删除。如果是false，使用管理员工具删除Topic的时候，Kafka并不会处</p> \n<p class="content"># 理此操作</p> \n<p class="content"># delete.topic.enable=true</p> \n<p class="content"># Kafka服务端是否可以根据请求自动创建Topic，默认是true。如果打开此选项，下面三</p> \n<p class="content"># 种请求会触发Topic自动创建：</p> \n<p class="content"># ①Producer向某个不存在的Topic写入消息</p> \n<p class="content"># ②Consumer从某个不存在的Topic读取消息</p> \n<p class="content"># ③Consumer从某个不存在的Topic读取消息</p> \n<p class="content"># 建议将此选项设置为false，并在使用Topic之前手动创建</p> \n<p class="content"># auto.create.topics.enable=true</p> \n<p class="content">#################### 下面是服务端网络相关的配置 ####################</p> \n<p class="content"># Kafka Server使用的协议、主机名以及端口的格式如下：</p> \n<p class="content">#　　 listeners=security_protocol://host_name:port</p> \n<p class="content">#　 参考示例：</p> \n<p class="content">#　　 listeners=PLAINTEXT://your.host.name:9092</p> \n<p class="content">#listeners=PLAINTEXT://:9092 #这是默认配置，使用PLAINTEXT，端口是9092</p> \n<p class="content"># 接收请求的线程数</p> \n<p class="content">num.network.threads=3</p> \n<p class="content"># 执行请求的线程数</p> \n<p class="content">num.io.threads=8</p> \n<p class="content"># 在介绍下面两个缓冲区设置之前，先来介绍一下相关背景知识：</p> \n<p class="content"># 每个TCP socket在内核中都有一个发送缓冲区（SO_SNDBUF）和一个接收缓冲区</p> \n<p class="content">#（SO_RCVBUF）。接收缓冲区把数据缓存入内核，应用进程一直没有调用read进行读取的话，</p> \n<p class="content"># 此数据会一直缓存在相应socket的接收缓冲区内。再啰嗦一点，不管进程是否读取socket，</p> \n<p class="content"># 对端发来的数据都会经由内核接收并且缓存到socket的内核接收缓冲区之中。read所做的</p> \n<p class="content"># 工作，就是把内核缓冲区中的数据复制到应用层用户的buffer里面，仅此而已。进程调用</p> \n<p class="content"># send发送的数据的时候，一般情况下，将数据复制进入socket的内核发送缓冲区之中，然</p> \n<p class="content"># 后send便会在上层返回。换句话说，send返回之时，数据不一定会发送到对端去，send</p> \n<p class="content"># 仅仅是把应用层buffer的数据复制进socket的内核发送buffer中</p> \n<p class="content"># TCP连接的SO_SNDBUF缓冲区大小，默认102400，单位是字节</p> \n<p class="content"># 如果是-1，就使用操作系统的默认值</p> \n<p class="content">socket.send.buffer.bytes=102400</p> \n<p class="content"># TCP连接的SO_RCVBUF缓冲区大小，默认102400，单位是字节</p> \n<p class="content"># 如果是-1，就使用操作系统的默认值</p> \n<p class="content">socket.receive.buffer.bytes=102400</p> \n<p class="content"># 请求的最大长度</p> \n<p class="content">socket.request.max.bytes=104857600</p> \n<p class="content">####################### 下面是存储log相关的配置 #######################</p> \n<p class="content"># 用于存储log文件的目录，可以将多个目录通过逗号分隔，形成一个目录列表</p> \n<p class="content">log.dirs=/tmp/kafka-logs</p> \n<p class="content"># 每个Topic默认的partition数量，默认值是1</p> \n<p class="content">num.partitions=1</p> \n<p class="content"># 用来恢复log文件以及关闭时将log数据刷新到磁盘的线程数量，每个目录对应</p> \n<p class="content"># num.recovery.threads.per.data.dir个线程</p> \n<p class="content">num.recovery.threads.per.data.dir=1</p> \n<p class="content">################# 下面是log文件刷盘的相关配置 #################</p> \n<p class="content"># 每隔多少个消息触发一次flush操作，将内存中的消息刷新到硬盘上</p> \n<p class="content">#log.flush.interval.messages=10000</p> \n<p class="content"># 每隔多少毫秒触发一次flush操作，将内存中的消息刷新到硬盘上</p> \n<p class="content">#log.flush.interval.ms=1000</p> \n<p class="content"># 上面这两个配置是全局的，可以在Topic中重新设置，并覆盖这两个配置</p> \n<p class="content">################# 下面是log相关的“保存策略”的配置 #####################</p> \n<p class="content"># 注意：下面有两种配置，一种是基于时间的策略，另一种是基于日志文件大小的策略，两种</p> \n<p class="content"># 策略同是配置的话，只要满足其中一种策略，则触发Log删除的操作。删除操作总是先删除</p> \n<p class="content"># 最旧的日志</p> \n<p class="content"># 消息在Kafka中保存的时间，168小时之前的log，可以被删除掉</p> \n<p class="content">log.retention.hours=168</p> \n<p class="content"># 当剩余空间低于log.retention.bytes字节，则开始删除log</p> \n<p class="content">#log.retention.bytes=1073741824</p> \n<p class="content"># segment日志文件大小的上限值。当超过这个值时，会创建新的segment日志文件</p> \n<p class="content"># segment文件的相关信息在后面介绍</p> \n<p class="content">log.segment.bytes=1073741824</p> \n<p class="content"># 每隔300000ms,logcleaner线程将检查一次，看是否符合上述保留策略的消息可以被删除</p> \n<p class="content">log.retention.check.interval.ms=300000</p> \n<p class="content">################# ZooKeeper的相关配置 ##################</p> \n<p class="content"># Kafka依赖的ZooKeeper集群地址，可以配置多个ZooKeeper地址，使用逗号隔开</p> \n<p class="content">zookeeper.connect=localhost:2181</p> \n<p class="content"># ZooKeeper连接的超时时间</p> \n<p class="content">zookeeper.connection.timeout.ms=6000</p> \n<p class="content">● 配合Kafka的启动参数</p> \n<p class="content">Kafka服务端的入口类是kafka.Kafka。除了指定入口类，还需要指定server.properties配置文件所在的位置，即在Kafka源代码的config目录下，如图1-26所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0036-0027.jpg"/> \n <p class="imgtitle">图1-26</p> \n</div> \n<p class="content">第一次启动时，Intellij IDEA会重新编译整个项目，编译完成后启动。得到的日志如图1-27所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0037-0028.jpg"/> \n <p class="imgtitle">图1-27</p> \n</div> \n<p class="content">● 验证</p> \n<p class="content">为了验证上文配置的源码环境是否成功，可以使用Kafka二进制包中自带的三个脚本进行验证，分别是：kafka-topics用于创建Topic;kafka-console-producer是一个命令行Producer;kafka-console-consumer是一个命令行Consumer。</p> \n<p class="content">首先，使用kafka-topics.bat创建一个示例Topic——test，其中partition和replicationfactor都为1，输出如图1-28所示。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0037-0029.jpg"/> \n <p class="imgtitle">图1-28</p> \n</div> \n<p class="content">之后，启动两个命令行窗口，分别执行下面两行命名，一个作为生产者，另一个作为消费者：</p> \n<p class="content">kafka-console-producer.bat--broker-list localhost:9092--topic test</p> \n<p class="content">kafka-console-consumer.bat--zookeeper localhost:2181--topic test</p> \n<p class="content">启动完成后，得到如图1-29所示的两个窗口。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0038-0030.jpg"/> \n <p class="imgtitle">图1-29</p> \n</div> \n<p class="content">在生产者的命令行窗口中输入任意内容，回车后，在消费者命令行窗口中能看到相应消息。输出如图1-30所示，这就表示我们搭建的Kafka源码环境可以正常运行了。安装完成之后，读者可以直接在IDE中进行Debug，分析Kafka的工作流程了。</p> \n<div class="pic"> \n <img src="http://csdn-ebook-resources.oss-cn-beijing.aliyuncs.com/images/08fc68a7d3364001870be5ab22e48899/31345-0038-0031.jpg"/> \n <p class="imgtitle">图1-30</p> \n</div> \n<h2 class="secondTitle" id="bw5"><a>本章小结</a></h2> \n<p class="content">本章首先对Kafka的背景、关键特性以及应用场景做了简单介绍。之后，介绍了笔者在实践中遇到的一个以Kafka为中心的案例，并分析了在此案例中选择使用Kafka的具体原因和Kafka的关键作用。然后介绍了Kafka中的核心概念，希望读者对Kafka的整个架构设计有宏观的了解。最后，介绍了Kafka源码调试环境的搭建，简单介绍了server.properties配置文件中的关键配置项。</p></body>\n</html>'},36456:function(e,t,n){var a={"./enhanceLearing/article.md":[98521,8521]};function c(e){if(!n.o(a,e))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=a[e],c=t[0];return n.e(t[1]).then((function(){return n(c)}))}c.keys=function(){return Object.keys(a)},c.id=36456,e.exports=c},36492:function(e){"use strict";e.exports=JSON.parse('[{"title":"本地缓存与Redis对比","level":1,"id":"001-本地缓存与Redis对比.md","children":[]},{"title":"🔥 一、缓存穿透（Cache Penetration）","level":1,"id":"002-一缓存穿透Cache Penetration.md","children":[]},{"title":"🔥 二、缓存击穿（Cache Breakdown）","level":1,"id":"003-二缓存击穿Cache Breakdown.md","children":[]},{"title":"🔥 三、缓存雪崩（Cache Avalanche）","level":1,"id":"004-三缓存雪崩Cache Avalanche.md","children":[]},{"title":"📊 总结对比表","level":1,"id":"005-总结对比表.md","children":[]}]')},37317:function(e,t,n){var a={"./Maven/content/001-一Maven 简介.md":[90466,8085],"./Maven/content/002-二安装与环境配置.md":[31586,1586],"./Maven/content/003-三Maven 项目结构.md":[59962,9962],"./Maven/content/004-四POM 文件详解pomxml.md":[59703,9703],"./Maven/content/005-五依赖管理Dependencies.md":[86339,6339],"./Maven/content/006-六常用生命周期命令.md":[69444,9444],"./Maven/content/007-七Maven 插件Plugins.md":[18374,8374],"./Maven/content/008-八仓库管理Repositories.md":[2153,2153],"./Maven/content/009-九多模块项目Multi-module Project.md":[44341,4341],"./Maven/content/010-十本地仓库与远程仓库.md":[95912,5912],"./Maven/content/011-十一最佳实践建议.md":[77922,7922],"./Maven/content/012-十二常见问题排查.md":[89677,9677],"./Maven/content/013-十三Maven 命令大全常用.md":[93820,3820],"./Maven/content/014-十四推荐阅读.md":[8046,8046],"./algorithm/content/001-一算法基础理论.md":[46134,6134],"./algorithm/content/003-1 线性结构.md":[27708,7708],"./algorithm/content/004-2 非线性数据结构.md":[28460,8460],"./algorithm/content/005-3 高级数据结构.md":[15461,5461],"./algorithm/content/006-4数据结构对应算法.md":[42677,2677],"./algorithm/content/008-1排序算法.md":[98915,8915],"./algorithm/content/009-2 分治法Divide  Conquer.md":[73296,3296],"./algorithm/content/010-2 动态规划DP.md":[50111,111],"./algorithm/content/011-3 贪心算法.md":[14569,4569],"./algorithm/content/012-4 回溯法.md":[722,722],"./algorithm/content/013-5 二分搜索.md":[3534,3534],"./algorithm/content/014-6 滑动窗口.md":[50129,129],"./algorithm/content/015-7分支限界.md":[30511,511],"./algorithm/content/016-前缀和.md":[41215,1215],"./algorithm/content/017-差分.md":[12435,2435],"./algorithm/content/019-1 数论算法.md":[11754,1754],"./algorithm/content/020-2 字符串算法.md":[28686,8686],"./algorithm/content/021-2 计算几何.md":[15125,5125],"./algorithm/content/022-3 网络流算法.md":[22510,2510],"./algorithm/content/023-4 NP完全理论.md":[24672,4672],"./algorithm/content/024-5位运算.md":[43726,3726],"./algorithm/content/025-实际应用场景.md":[4218,4218],"./c-plus/content/002-C 概述.md":[76381,6381],"./c-plus/content/003-基本语法.md":[85509,5509],"./c-plus/content/005-1 函数基础.md":[34197,4197],"./c-plus/content/006-2 函数重载.md":[25077,5077],"./c-plus/content/007-3 默认参数与内联函数.md":[34612,4612],"./c-plus/content/008-4 递归函数.md":[71855,1855],"./c-plus/content/010-1 指针基础.md":[47237,7237],"./c-plus/content/011-2 动态内存分配.md":[32833,2833],"./c-plus/content/012-3 引用.md":[74489,4489],"./c-plus/content/013-4 智能指针.md":[71364,1364],"./c-plus/content/015-1 类与对象.md":[77830,7830],"./c-plus/content/016-2 构造函数与析构函数.md":[43389,3389],"./c-plus/content/017-3 继承.md":[80071,71],"./c-plus/content/018-4 多态.md":[20132,132],"./c-plus/content/019-5 其他 OOP 特性.md":[73615,3615],"./c-plus/content/021-函数模板.md":[20920,920],"./c-plus/content/022-类模板.md":[7473,7473],"./c-plus/content/023-STL标准模板库.md":[90566,566],"./c-plus/content/025-1 异常机制.md":[85038,5038],"./c-plus/content/026-2 异常安全.md":[10903,903],"./c-plus/content/028-1 Lambda 表达式.md":[49497,9497],"./c-plus/content/029-2 多线程与并发.md":[27508,7508],"./c-plus/content/030-3 移动语义与右值引用.md":[28505,8505],"./c-plus/content/031-4 类型推导与自动类型.md":[43472,3472],"./c-plus/content/032-5 现代 C 特性.md":[69470,9470],"./c-plus/content/033-八实践与项目.md":[21173,1173],"./c-plus/content/034-九补充知识.md":[88649,8649],"./c-plus/content/036-1常用 STL 容器  函数速查表.md":[75999,5999],"./c-plus/content/037-2常见数据结构写法对比Python vs C.md":[64773,4773],"./c-plus/content/038-3C 刷题常用模板  技巧.md":[91471,1471],"./c-plus/content/039-四C 刷题高频技巧汇总.md":[92785,2785],"./c/content/002-1 C 语言简介.md":[25971,5971],"./c/content/003-2 基本语法.md":[70574,574],"./c/content/005-1 条件语句.md":[16190,6190],"./c/content/006-2 循环语句.md":[90334,334],"./c/content/007-3 跳转语句.md":[62650,2650],"./c/content/009-1 数组.md":[72095,2095],"./c/content/010-2 字符串.md":[16753,6753],"./c/content/012-1 函数的基本概念.md":[24331,4331],"./c/content/013-2 函数的分类.md":[16449,6449],"./c/content/014-3 递归函数.md":[91954,1954],"./c/content/015-4 库函数.md":[1397,1397],"./c/content/017-1 指针的基本概念.md":[12514,2514],"./c/content/018-2 指针的运算.md":[91428,1428],"./c/content/019-3 指针与数组.md":[65591,5591],"./c/content/020-4 指针与字符串.md":[51069,1069],"./c/content/021-5 指针与函数.md":[66679,6679],"./c/content/022-6 动态内存分配.md":[99962,7581],"./c/content/024-1 结构体.md":[23974,3974],"./c/content/025-2 联合体.md":[87521,7521],"./c/content/026-3 枚举类型.md":[62518,2518],"./c/content/027-4 位域.md":[64682,4682],"./c/content/029-1 文件的基本概念.md":[49605,9605],"./c/content/030-2 文件的读写操作.md":[40496,496],"./c/content/031-3 文件定位.md":[68240,8240],"./c/content/033-1 宏定义.md":[63238,3238],"./c/content/034-2 条件编译.md":[59798,9798],"./c/content/035-3 文件包含.md":[59805,9805],"./c/content/037-1 内存布局.md":[77166,7166],"./c/content/038-2 内存泄漏与预防.md":[11194,1194],"./c/content/040-1 链表Linked List.md":[87061,7061],"./c/content/041-2 栈Stack.md":[87816,7816],"./c/content/042-3 队列Queue.md":[43805,3805],"./c/content/043-4 树Tree.md":[16425,6425],"./c/content/045-1 线程的基本概念.md":[71102,1102],"./c/content/046-2 使用 POSIX 线程pthread.md":[97121,7121],"./c/content/047-3 使用 Windows API.md":[36533,6533],"./c/content/048-4 线程同步.md":[54806,4806],"./c/content/049-总结.md":[38788,8788],"./c/content/051-1 错误检测与调试技巧.md":[74674,4674],"./c/content/052-2 errno 的使用.md":[58657,8657],"./c/content/053-总结.md":[61409,1409],"./c/content/054-十综合练习与项目实践.md":[66172,6172],"./c/content/055-十一常见面试题与注意事项.md":[10809,809],"./database/content/001-1 SQL概述.md":[30595,595],"./database/content/002-2 数据库基础.md":[25068,5068],"./database/content/004-SQL语句的结构与书写规范.md":[85900,5900],"./database/content/005-注释.md":[71590,1590],"./database/content/006-SQL关键字.md":[241,241],"./database/content/008-41 基本查询.md":[43613,3613],"./database/content/009-42 条件查询.md":[36556,6556],"./database/content/010-43 排序.md":[90408,408],"./database/content/011-44 分组与聚合.md":[70565,565],"./database/content/012-45 连接查询.md":[65897,5897],"./database/content/013-46 子查询.md":[88576,8576],"./database/content/014-5 数据操作DML - Data Manipulation Language.md":[87343,7343],"./database/content/016-1 创建表CREATE TABLE.md":[94870,4870],"./database/content/017-2 修改表ALTER TABLE.md":[59434,9434],"./database/content/018-3 删除表DROP TABLE.md":[28924,8924],"./database/content/019-4 创建索引CREATE INDEX.md":[99759,9759],"./database/content/020-5 删除索引DROP INDEX.md":[15106,5106],"./database/content/022-1 授权GRANT.md":[55015,5015],"./database/content/023-2 撤销权限REVOKE.md":[99151,9151],"./database/content/024-3 权限管理的实际应用.md":[6955,6955],"./database/content/026-1 事务的基本操作.md":[16085,6085],"./database/content/027-2 ACID 特性.md":[19855,9855],"./database/content/028-3 事务隔离级别.md":[42679,2679],"./database/content/029-4 事务管理的实际应用.md":[22512,2512],"./database/content/030-5 注意事项.md":[55180,5180],"./database/content/032-91 视图View.md":[39807,9807],"./database/content/033-92 存储过程与函数.md":[33833,3833],"./database/content/034-93 触发器Trigger.md":[53171,3171],"./database/content/035-94 窗口函数.md":[25889,5889],"./database/content/037-1 索引的使用与优化.md":[55478,5478],"./database/content/038-2 查询执行计划EXPLAIN.md":[54214,4214],"./database/content/039-3 避免全表扫描.md":[52096,2096],"./database/content/040-4 优化 JOIN 操作.md":[68298,8298],"./database/content/042-SQL注入及其防范.md":[75143,5143],"./database/content/043-处理NULL值.md":[381,381],"./database/content/044-分页查询LIMITOFFSET.md":[68211,8211],"./database/content/045-时间与日期处理.md":[54628,4628],"./database/content/047-1 数据建模ER图.md":[46717,6717],"./database/content/048-2 设计高效的数据表.md":[56928,6928],"./database/content/049-3 数据库性能调优.md":[82399,2399],"./database/content/051-1 Redis简介.md":[1214,1214],"./database/content/052-2 MongoDB简介.md":[81371,1371],"./docker/content/001-1 Docker 简介与核心概念.md":[14751,4751],"./docker/content/002-2 Docker 架构组成.md":[54810,4810],"./docker/content/003-3 Docker 安装与环境搭建.md":[12019,2019],"./docker/content/004-4 Docker 基本命令详解.md":[58996,8996],"./docker/content/005-5 Dockerfile构建镜像的配方文件.md":[37504,7504],"./docker/content/006-6 Volume持久化数据管理.md":[4699,4699],"./docker/content/007-7 网络Networking容器间通信.md":[37451,7451],"./docker/content/008-8 Docker Compose多服务编排工具.md":[89052,9052],"./docker/content/009-9 Docker 与 CICD 集成.md":[10287,287],"./docker/content/010-10 常见问题与最佳实践.md":[33329,3329],"./docker/content/011-附录常用命令速查表.md":[96772,6772],"./docker/content/012-推荐学习资源.md":[1917,1917],"./docker/content/013-总结.md":[77828,7828],"./java/content/001-一Java 基础知识.md":[59326,9326],"./java/content/002-1 Java 简介.md":[84512,4512],"./java/content/002-二面向对象编程OOP.md":[43382,3382],"./java/content/003-三异常处理.md":[79242,9242],"./java/content/004-1 类与对象.md":[13176,3176],"./java/content/004-四集合框架.md":[14491,4491],"./java/content/005-2 封装.md":[69191,9191],"./java/content/005-五IO 流.md":[10040,40],"./java/content/006-3 继承.md":[28225,8225],"./java/content/006-六多线程与并发.md":[30466,466],"./java/content/007-4 多态.md":[34472,4472],"./java/content/007-七Java 新特性.md":[56596,6596],"./java/content/008-5 抽象类与接口.md":[49332,9332],"./java/content/008-八数据库与网络编程.md":[81864,1864],"./java/content/009-6 内部类.md":[58607,8607],"./java/content/009-九Java 反射.md":[24439,4439],"./java/content/010-7 枚举.md":[33818,3818],"./java/content/010-十Java 动态代理 Dynamic Proxy详解.md":[56200,6200],"./java/content/011-十一Java 数据安全.md":[17102,7102],"./java/content/012-1 异常体系.md":[73202,3202],"./java/content/012-十二Java 性能优化.md":[47090,7090],"./java/content/013-2 异常处理机制.md":[20296,296],"./java/content/013-十三综合实战.md":[23286,3286],"./java/content/014-3 异常的最佳实践.md":[75414,5414],"./java/content/016-1 集合概述.md":[42646,2646],"./java/content/017-2 List.md":[68996,6615],"./java/content/018-3 Set.md":[96292,6292],"./java/content/019-4 Map.md":[39640,9640],"./java/content/020-5 工具类.md":[11440,1440],"./java/content/021-6 泛型.md":[90753,753],"./java/content/022-总结.md":[67344,7344],"./java/content/024-1 文件操作.md":[1725,1725],"./java/content/025-2 字节流与字符流.md":[52845,2845],"./java/content/026-3 序列化与反序列化.md":[13614,3614],"./java/content/027-4 NIONew IO.md":[94927,4927],"./java/content/028-总结.md":[10414,414],"./java/content/030-1 线程基础.md":[10810,810],"./java/content/031-2 线程同步.md":[11113,1113],"./java/content/032-3 高级并发工具.md":[9562,9562],"./java/content/033-4 线程间通信.md":[9765,9765],"./java/content/035-一Java 8 及以后的新特性.md":[15417,5417],"./java/content/036-二Java 9-17 的新特性.md":[20383,383],"./java/content/037-总结.md":[20118,118],"./java/content/039-1 JDBC.md":[16258,6258],"./java/content/040-2网络编程.md":[84480,4480],"./java/content/042-1 反射的基本概念.md":[22069,2069],"./java/content/043-2 获取 Class 对象.md":[93542,3542],"./java/content/044-3 创建对象.md":[99234,9234],"./java/content/045-4 访问字段.md":[22522,2522],"./java/content/046-5 调用方法.md":[18796,8796],"./java/content/047-6 处理注解.md":[15484,5484],"./java/content/048-7 动态代理.md":[62423,2423],"./java/content/049-8 反射的优缺点.md":[10847,847],"./java/content/050-总结.md":[3767,3767],"./java/content/052-1 数据加密.md":[44898,4898],"./java/content/052-1什么是动态代理.md":[27981,7981],"./java/content/053-2 数据完整性.md":[2125,2125],"./java/content/053-2核心 API 和类.md":[91406,1406],"./java/content/054-3 数据存储安全.md":[18429,8429],"./java/content/054-3动态代理的使用步骤.md":[76202,6202],"./java/content/055-4 数据传输安全.md":[30866,866],"./java/content/055-4输出结果.md":[75180,2799],"./java/content/056-5 安全编码实践.md":[86407,1645],"./java/content/056-5与静态代理的区别.md":[70328,328],"./java/content/057-6应用场景.md":[5333,5333],"./java/content/057-总结.md":[91828,1828],"./java/content/058-7Spring 中的 AOP 与动态代理的关系.md":[86008,6008],"./java/content/059-1 代码层面优化.md":[64299,4299],"./java/content/059-8动态代理的局限性.md":[49165,9165],"./java/content/060-2 JVM 调优.md":[1624,1624],"./java/content/060-9完整代码汇总.md":[88499,8499],"./java/content/061-10总结.md":[46726,6726],"./java/content/061-3 性能监控工具.md":[65374,5374],"./java/content/062-十一综合实战.md":[65961,5961],"./java/content/063-1 数据加密.md":[80022,7641],"./java/content/064-2 数据完整性.md":[60099,99],"./java/content/065-3 数据存储安全.md":[36769,6769],"./java/content/066-4 数据传输安全.md":[90112,112],"./java/content/067-5 安全编码实践.md":[57875,7875],"./java/content/068-总结.md":[97634,7634],"./java/content/070-1 代码层面优化.md":[57768,7768],"./java/content/071-2 JVM 调优.md":[42622,2622],"./java/content/072-3 性能监控工具.md":[22749,5130],"./java/content/073-十三综合实战.md":[36660,6660],"./javascript/content/002-语言概述.md":[1850,1850],"./javascript/content/003-语法基础.md":[58788,6407],"./javascript/content/004-运算符.md":[51922,1922],"./javascript/content/005-条件语句.md":[38451,8451],"./javascript/content/006-循环语句.md":[37296,7296],"./javascript/content/007-函数.md":[39081,9081],"./javascript/content/008-作用域与闭包.md":[9228,9228],"./javascript/content/009-错误处理.md":[18504,8504],"./javascript/content/011-对象与原型.md":[52007,2007],"./javascript/content/012-数组操作.md":[38779,8779],"./javascript/content/013-字符串与正则表达式.md":[17915,7915],"./javascript/content/014-异步编程.md":[68398,8398],"./javascript/content/016-DOM 操作.md":[71339,1339],"./javascript/content/017-BOM 操作.md":[65124,5124],"./javascript/content/018-CSS 操作.md":[58060,8060],"./javascript/content/019-AJAX.md":[50911,911],"./javascript/content/020-四Nodejs 环境.md":[1817,1817],"./javascript/content/022-1 变量与数据类型.md":[86133,6133],"./javascript/content/023-2 模板字符串.md":[99591,9591],"./javascript/content/024-3 新特性.md":[45e3,5e3],"./javascript/content/025-4 迭代器与生成器.md":[33165,3165],"./javascript/content/026-5 装饰器.md":[58575,8575],"./javascript/content/027-六性能优化与调试.md":[6099,6099],"./javascript/content/029-基础知识.md":[8541,8541],"./javascript/content/030-进阶问题.md":[81473,1473],"./javascript/content/031-框架相关.md":[99690,9690],"./linear-algebra/content/002-11 矩阵及其运算.md":[75447,5447],"./linear-algebra/content/003-12 高斯消元法与矩阵的初等变换.md":[91873,1873],"./linear-algebra/content/004-13 逆矩阵.md":[87734,7734],"./linear-algebra/content/005-14 分块矩阵.md":[87257,7257],"./linear-algebra/content/007-21 n阶行列式的定义.md":[44697,4697],"./linear-algebra/content/008-22 行列式的性质与计算.md":[47487,7487],"./linear-algebra/content/009-23 拉普拉斯展开定理.md":[96024,6024],"./linear-algebra/content/010-24 克拉默法则.md":[74625,4625],"./linear-algebra/content/011-25 矩阵的秩.md":[87584,7584],"./linear-algebra/content/013-31 空间直角坐标系与向量.md":[89924,9924],"./linear-algebra/content/014-32 向量乘法.md":[73437,3437],"./linear-algebra/content/015-33 平面.md":[95245,5245],"./linear-algebra/content/016-34 空间直线.md":[32893,2893],"./linear-algebra/content/018-41 n维向量空间的概念.md":[30471,471],"./linear-algebra/content/019-42 向量组的线性相关性.md":[99718,9718],"./linear-algebra/content/020-43 向量组的秩与极大无关组.md":[13923,3923],"./linear-algebra/content/021-44 线性方程组解的结构.md":[36543,6543],"./linear-algebra/content/023-51 特征值与特征向量的概念与计算.md":[33894,3894],"./linear-algebra/content/024-52 矩阵的相似对角化.md":[73366,3366],"./linear-algebra/content/025-53 n维向量空间的正交性.md":[97577,7577],"./linear-algebra/content/026-54 实对称矩阵的相似对角化.md":[4849,4849],"./linear-algebra/content/028-61 实二次型及其标准形.md":[58654,8654],"./linear-algebra/content/029-62 正定二次型.md":[55146,5146],"./linear-algebra/content/030-63 曲面与空间曲线.md":[96955,9336],"./linear-algebra/content/031-64 二次曲面.md":[34925,4925],"./linear-algebra/content/033-71 线性空间的概念.md":[22333,2333],"./linear-algebra/content/034-72 线性空间的基维数与坐标.md":[6891,6891],"./linear-algebra/content/035-73 欧氏空间.md":[44002,4002],"./linear-algebra/content/036-74 线性变换.md":[42320,2320],"./operatingsystem/content/002-定义.md":[38057,8057],"./operatingsystem/content/003-区别.md":[23530,3530],"./operatingsystem/content/004-2 应用场景.md":[94051,4051],"./operatingsystem/content/005-3 总结.md":[34466,4466],"./operatingsystem/content/007-产生条件.md":[31476,1476],"./operatingsystem/content/008-解决办法.md":[71477,1477],"./operatingsystem/content/010-31 分页Paging.md":[59416,9416],"./operatingsystem/content/011-32 分段Segmentation.md":[97458,7458],"./operatingsystem/content/012-33 分页与分段的对比.md":[35972,5972],"./operatingsystem/content/013-34 多级页表Multi-level Page Table.md":[18254,8254],"./operatingsystem/content/014-35 段页式内存管理Segmented Paging.md":[97228,7228],"./operatingsystem/content/016-虚存技术的引入.md":[70644,644],"./operatingsystem/content/017-局部性原理和虚拟存储特征.md":[74839,4839],"./operatingsystem/content/018-请求分页存储管理.md":[96758,6758],"./operatingsystem/content/019-页面置换算法.md":[71587,1587],"./operatingsystem/content/021-1 文件系统的基本概念.md":[59172,9172],"./operatingsystem/content/022-2 文件系统的组成.md":[20092,7711],"./operatingsystem/content/023-3 文件系统的功能.md":[79443,9443],"./operatingsystem/content/024-4 常见的文件系统类型.md":[64274,4274],"./operatingsystem/content/025-5 文件系统的层次结构.md":[67585,7585],"./operatingsystem/content/026-6 文件系统的挂载与卸载.md":[47937,7937],"./operatingsystem/content/027-7 文件系统的性能优化.md":[17813,7813],"./python/content/002-数据类型与数据结构.md":[85975,5975],"./python/content/003-控制流.md":[49171,9171],"./python/content/004-函数.md":[68825,8825],"./python/content/005-异常处理.md":[39613,9613],"./python/content/006-文件读写.md":[96647,6647],"./python/content/008-面向对象编程OOP.md":[19616,9616],"./python/content/009-描述符.md":[78030,8030],"./python/content/010-模块与包.md":[34886,4886],"./python/content/011-迭代器与生成器.md":[81235,1235],"./python/content/012-装饰器.md":[73094,3094],"./python/content/013-上下文管理器.md":[43517,3517],"./python/content/015-1 并发与异步编程.md":[83804,3804],"./python/content/015-线程并发与同步.md":[97036,7036],"./python/content/016-1 多线程的基本概念.md":[2995,2995],"./python/content/016-asyncio 模块.md":[81921,1921],"./python/content/017-2 threading 模块的核心内容.md":[78903,8903],"./python/content/017-网络编程.md":[56054,6054],"./python/content/018-3 多线程的适用场景.md":[26165,6165],"./python/content/018-加密与解密.md":[2346,2346],"./python/content/019-4 注意事项.md":[89007,9007],"./python/content/019-数据处理与分析.md":[27536,7536],"./python/content/020-asyncio 模块.md":[38978,8978],"./python/content/020-测试与调试.md":[12542,2542],"./python/content/021-性能优化.md":[94161,4161],"./python/content/021-网络编程.md":[60797,797],"./python/content/022-加密与解密.md":[20355,355],"./python/content/023-1 常见场景.md":[73652,3652],"./python/content/023-数据处理与分析.md":[55230,2849],"./python/content/024-2 项目展示.md":[25396,5396],"./python/content/024-测试与调试.md":[94362,4362],"./python/content/025-性能优化.md":[27845,7845],"./python/content/027-1 常见场景.md":[89496,9496],"./python/content/028-2 项目展示.md":[65456,5456],"./redis/content/001-本地缓存与Redis对比.md":[9799,9799],"./redis/content/002-一缓存穿透Cache Penetration.md":[62091,2091],"./redis/content/003-二缓存击穿Cache Breakdown.md":[93456,3456],"./redis/content/004-三缓存雪崩Cache Avalanche.md":[77601,7601],"./redis/content/005-总结对比表.md":[83371,3371],"./software/content/001-1 设计模式概述.md":[9366,9366],"./software/content/002-2 设计模式的分类.md":[86493,6493],"./software/content/002-什么是设计模式.md":[24707,4707],"./software/content/003-3 面向对象设计原则.md":[95215,5215],"./software/content/003-设计模式的起源设计模式可复用面向对象软件的基础.md":[8401,8401],"./software/content/004-4 创建型模式详解.md":[97432,7432],"./software/content/004-设计模式的作用与意义.md":[21734,1734],"./software/content/005-5 结构型模式详解.md":[4146,4146],"./software/content/006-21 创建型模式Creational Patterns.md":[44257,4257],"./software/content/006-6 行为型模式详解.md":[56234,3853],"./software/content/007-22 结构型模式Structural Patterns.md":[6350,6350],"./software/content/007-7 设计模式的应用.md":[14562,4562],"./software/content/008-23 行为型模式Behavioral Patterns.md":[45363,5363],"./software/content/008-8 设计模式的总结与展望.md":[6e4,0],"./software/content/010-单一职责原则Single Responsibility Principle SRP.md":[45037,5037],"./software/content/011-开闭原则OpenClosed Principle OCP.md":[77926,7926],"./software/content/012-里氏替换原则Liskov Substitution Principle LSP.md":[1380,1380],"./software/content/013-接口隔离原则Interface Segregation Principle ISP.md":[54435,4435],"./software/content/014-依赖倒置原则Dependency Inversion Principle DIP.md":[6488,6488],"./software/content/015-合成复用原则Composite Reuse Principle CRP.md":[37400,7400],"./software/content/016-迪米特法则Law of Demeter LoD.md":[18036,8036],"./software/content/018-41 单例模式.md":[94881,4881],"./software/content/019-42 工厂方法模式.md":[17364,7364],"./software/content/020-43 抽象工厂模式.md":[82689,2689],"./software/content/021-44 建造者模式.md":[41731,1731],"./software/content/022-45 原型模式.md":[76134,3753],"./software/content/024-51 适配器模式.md":[23594,3594],"./software/content/025-52 装饰器模式.md":[83654,3654],"./software/content/026-53 代理模式.md":[79736,9736],"./software/content/027-54 外观模式.md":[38993,8993],"./software/content/028-55 桥接模式.md":[23995,3995],"./software/content/029-56 组合模式.md":[3985,3985],"./software/content/030-57 享元模式.md":[572,572],"./software/content/032-61 策略模式.md":[57574,7574],"./software/content/033-62 模板方法模式.md":[95441,5441],"./software/content/034-63 观察者模式.md":[87545,7545],"./software/content/035-64 状态模式.md":[45806,5806],"./software/content/036-65 责任链模式.md":[54107,4107],"./software/content/037-66 命令模式.md":[82202,2202],"./software/content/038-67 迭代器模式.md":[59735,9735],"./software/content/039-68 中介者模式.md":[72132,2132],"./software/content/040-69 备忘录模式.md":[8362,8362],"./software/content/041-610 解释器模式.md":[68090,8090],"./software/content/042-611 访问者模式.md":[94407,4407],"./software/content/044-设计模式在实际项目中的应用.md":[28861,8861],"./software/content/045-设计模式的选择与权衡.md":[62901,2901],"./software/content/046-设计模式的误用与注意事项.md":[740,740],"./software/content/048-设计模式的学习方法.md":[23442,3442],"./software/content/049-设计模式的局限性.md":[52648,2648],"./software/content/050-新兴设计模式与趋势如反应式编程中的设计模式.md":[67327,9708],"./wang-luo-gong-cheng/content/001-TCPIP网络模型 和 OSI网络模型.md":[18942,8942],"./wang-luo-gong-cheng/content/002-IP协议的工作原理.md":[47224,7224],"./wang-luo-gong-cheng/content/002-OSI 模型.md":[74205,4205],"./wang-luo-gong-cheng/content/003-TCPIP 模型.md":[67117,7117],"./wang-luo-gong-cheng/content/003-TCP协议的工作原理.md":[68049,8049],"./wang-luo-gong-cheng/content/004-UDP协议的工作原理.md":[67038,7038],"./wang-luo-gong-cheng/content/005-1 数据封装.md":[67588,7588],"./wang-luo-gong-cheng/content/005-HTTP协议的工作原理.md":[2874,2874],"./wang-luo-gong-cheng/content/006-2 路由选择.md":[77502,7502],"./wang-luo-gong-cheng/content/006-HTTPTCPUDPIP的区别与联系.md":[16459,6459],"./wang-luo-gong-cheng/content/007-3 数据传输.md":[23551,3551],"./wang-luo-gong-cheng/content/007-三次握手和四次挥手.md":[96201,6201],"./wang-luo-gong-cheng/content/008-4 数据重组.md":[5227,5227],"./wang-luo-gong-cheng/content/008-二次握手和三次挥手是否可行.md":[55339,5339],"./wang-luo-gong-cheng/content/009-5 错误处理与控制.md":[7183,7183],"./wang-luo-gong-cheng/content/009-HTTP和HTTPS的区别.md":[66513,6513],"./wang-luo-gong-cheng/content/010-常见的网络攻击及防御手段.md":[30022,22],"./wang-luo-gong-cheng/content/011-1 面向连接.md":[65119,5119],"./wang-luo-gong-cheng/content/012-2 数据分段与重组.md":[87053,7053],"./wang-luo-gong-cheng/content/013-3 流量控制.md":[62882,2882],"./wang-luo-gong-cheng/content/014-4 拥塞控制.md":[22685,2685],"./wang-luo-gong-cheng/content/015-5 可靠性.md":[57639,7639],"./wang-luo-gong-cheng/content/016-6 连接终止.md":[71600,1600],"./wang-luo-gong-cheng/content/018-1 无连接.md":[83057,3057],"./wang-luo-gong-cheng/content/019-2 数据封装.md":[38796,6415],"./wang-luo-gong-cheng/content/020-3 简单性和效率.md":[10872,872],"./wang-luo-gong-cheng/content/021-4 不保证可靠性.md":[88064,8064],"./wang-luo-gong-cheng/content/022-5 广播和多播支持.md":[68780,8780],"./wang-luo-gong-cheng/content/024-1 请求-响应模型.md":[13274,3274],"./wang-luo-gong-cheng/content/025-2 请求方法.md":[7566,7566],"./wang-luo-gong-cheng/content/026-HTTP 状态码分类.md":[34731,4731],"./wang-luo-gong-cheng/content/027-常用状态码详解完整版.md":[74660,4660],"./wang-luo-gong-cheng/content/028-推荐使用建议RESTful API 场景.md":[92173,2173],"./wang-luo-gong-cheng/content/029-小贴士.md":[64939,4939],"./wang-luo-gong-cheng/content/030-4 版本.md":[18413,8413],"./wang-luo-gong-cheng/content/031-HTTPTCPUDPIP的区别与联系.md":[53349,3349],"./wang-luo-gong-cheng/content/033-三次握手.md":[93916,3916],"./wang-luo-gong-cheng/content/034-四次挥手.md":[63261,3261],"./wang-luo-gong-cheng/content/036-三次握手改为二次.md":[53513,3513],"./wang-luo-gong-cheng/content/037-四次挥手改为三次.md":[76087,6087],"./wang-luo-gong-cheng/content/038-HTTP和HTTPS的区别.md":[23125,3125],"./wang-luo-gong-cheng/content/040-1DDoS攻击分布式拒绝服务攻击.md":[69748,9748],"./wang-luo-gong-cheng/content/041-2SQL注入.md":[61104,1104],"./wang-luo-gong-cheng/content/042-3跨站脚本攻击XSS.md":[94442,4442],"./wang-luo-gong-cheng/content/043-4钓鱼攻击.md":[78082,8082],"./wang-luo-gong-cheng/content/044-5中间人攻击MitM.md":[68335,8335],"./wang-luo-gong-cheng/content/045-6密码攻击.md":[91304,1304],"./wang-luo-gong-cheng/content/046-7零日攻击.md":[43110,3110]};function c(e){if(!n.o(a,e))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=a[e],c=t[0];return n.e(t[1]).then((function(){return n(c)}))}c.keys=function(){return Object.keys(a)},c.id=37317,e.exports=c},56403:function(e){"use strict";e.exports=JSON.parse('[{"title":"一、C++ 基础","level":1,"id":"001-一C 基础.md","children":[{"title":"C++ 概述","level":2,"id":"002-C 概述.md","children":[]},{"title":"基本语法","level":2,"id":"003-基本语法.md","children":[]}]},{"title":"二、函数","level":1,"id":"004-二函数.md","children":[{"title":"1. 函数基础","level":2,"id":"005-1 函数基础.md","children":[]},{"title":"2. 函数重载","level":2,"id":"006-2 函数重载.md","children":[]},{"title":"3. 默认参数与内联函数","level":2,"id":"007-3 默认参数与内联函数.md","children":[]},{"title":"4. 递归函数","level":2,"id":"008-4 递归函数.md","children":[]}]},{"title":"三、指针与内存管理","level":1,"id":"009-三指针与内存管理.md","children":[{"title":"1. 指针基础","level":2,"id":"010-1 指针基础.md","children":[]},{"title":"2. 动态内存分配","level":2,"id":"011-2 动态内存分配.md","children":[]},{"title":"3. 引用","level":2,"id":"012-3 引用.md","children":[]},{"title":"4. 智能指针","level":2,"id":"013-4 智能指针.md","children":[]}]},{"title":"四、面向对象编程（OOP）","level":1,"id":"014-四面向对象编程OOP.md","children":[{"title":"1. 类与对象","level":2,"id":"015-1 类与对象.md","children":[]},{"title":"2. 构造函数与析构函数","level":2,"id":"016-2 构造函数与析构函数.md","children":[]},{"title":"3. 继承","level":2,"id":"017-3 继承.md","children":[]},{"title":"4. 多态","level":2,"id":"018-4 多态.md","children":[]},{"title":"5. 其他 OOP 特性","level":2,"id":"019-5 其他 OOP 特性.md","children":[]}]},{"title":"五、模板与泛型编程","level":1,"id":"020-五模板与泛型编程.md","children":[{"title":"函数模板","level":2,"id":"021-函数模板.md","children":[]},{"title":"类模板","level":2,"id":"022-类模板.md","children":[]},{"title":"STL（标准模板库）","level":2,"id":"023-STL标准模板库.md","children":[]}]},{"title":"六、异常处理","level":1,"id":"024-六异常处理.md","children":[{"title":"1. 异常机制","level":2,"id":"025-1 异常机制.md","children":[]},{"title":"2. 异常安全","level":2,"id":"026-2 异常安全.md","children":[]}]},{"title":"七、高级特性","level":1,"id":"027-七高级特性.md","children":[{"title":"1. Lambda 表达式","level":2,"id":"028-1 Lambda 表达式.md","children":[]},{"title":"2. 多线程与并发","level":2,"id":"029-2 多线程与并发.md","children":[]},{"title":"3. 移动语义与右值引用","level":2,"id":"030-3 移动语义与右值引用.md","children":[]},{"title":"4. 类型推导与自动类型","level":2,"id":"031-4 类型推导与自动类型.md","children":[]},{"title":"5. 现代 C++ 特性","level":2,"id":"032-5 现代 C 特性.md","children":[]}]},{"title":"八、实践与项目","level":1,"id":"033-八实践与项目.md","children":[]},{"title":"九、补充知识","level":1,"id":"034-九补充知识.md","children":[]},{"title":"十、C++算法应用","level":1,"id":"035-十C算法应用.md","children":[{"title":"🧰 1、常用 STL 容器 & 函数速查表","level":2,"id":"036-1常用 STL 容器  函数速查表.md","children":[]},{"title":"📌 2、常见数据结构写法对比（Python vs C++）","level":2,"id":"037-2常见数据结构写法对比Python vs C.md","children":[]},{"title":"🧱 3、C++ 刷题常用模板 & 技巧","level":2,"id":"038-3C 刷题常用模板  技巧.md","children":[]},{"title":"🎁 4、C++ 刷题高频技巧汇总","level":2,"id":"039-四C 刷题高频技巧汇总.md","children":[]}]}]')},60513:function(e){"use strict";e.exports=JSON.parse('[{"title":"基础语法与核心概念","level":1,"id":"001-基础语法与核心概念.md","children":[{"title":"数据类型与数据结构","level":2,"id":"002-数据类型与数据结构.md","children":[]},{"title":"控制流","level":2,"id":"003-控制流.md","children":[]},{"title":"函数","level":2,"id":"004-函数.md","children":[]},{"title":"异常处理","level":2,"id":"005-异常处理.md","children":[]},{"title":"文件读写","level":2,"id":"006-文件读写.md","children":[]}]},{"title":"进阶特性","level":1,"id":"007-进阶特性.md","children":[{"title":"面向对象编程（OOP）","level":2,"id":"008-面向对象编程OOP.md","children":[]},{"title":"描述符","level":2,"id":"009-描述符.md","children":[]},{"title":"模块与包","level":2,"id":"010-模块与包.md","children":[]},{"title":"迭代器与生成器","level":2,"id":"011-迭代器与生成器.md","children":[]},{"title":"装饰器","level":2,"id":"012-装饰器.md","children":[]},{"title":"上下文管理器","level":2,"id":"013-上下文管理器.md","children":[]}]},{"title":"高级特性与工具","level":1,"id":"014-高级特性与工具.md","children":[{"title":"线程并发与同步","level":2,"id":"015-线程并发与同步.md","children":[]},{"title":"asyncio 模块","level":2,"id":"016-asyncio 模块.md","children":[]},{"title":"网络编程","level":2,"id":"017-网络编程.md","children":[]},{"title":"加密与解密","level":2,"id":"018-加密与解密.md","children":[]},{"title":"数据处理与分析","level":2,"id":"019-数据处理与分析.md","children":[]},{"title":"测试与调试","level":2,"id":"020-测试与调试.md","children":[]},{"title":"性能优化","level":2,"id":"021-性能优化.md","children":[]}]},{"title":"项目经验与实战能力","level":1,"id":"022-项目经验与实战能力.md","children":[{"title":"1. 常见场景","level":2,"id":"023-1 常见场景.md","children":[]},{"title":"2. 项目展示","level":2,"id":"024-2 项目展示.md","children":[]}]}]')},67003:function(e){"use strict";e.exports=JSON.parse('[{"title":"一、Java 基础知识","level":1,"id":"001-一Java 基础知识.md","children":[]},{"title":"二、面向对象编程（OOP）","level":1,"id":"002-二面向对象编程OOP.md","children":[]},{"title":"三、异常处理","level":1,"id":"003-三异常处理.md","children":[]},{"title":"四、集合框架","level":1,"id":"004-四集合框架.md","children":[]},{"title":"五、I/O 流","level":1,"id":"005-五IO 流.md","children":[]},{"title":"六、多线程与并发","level":1,"id":"006-六多线程与并发.md","children":[]},{"title":"七、Java 新特性","level":1,"id":"007-七Java 新特性.md","children":[]},{"title":"八、数据库与网络编程","level":1,"id":"008-八数据库与网络编程.md","children":[]},{"title":"九、Java 反射","level":1,"id":"009-九Java 反射.md","children":[]},{"title":"十、Java 动态代理 （Dynamic Proxy）详解","level":1,"id":"010-十Java 动态代理 Dynamic Proxy详解.md","children":[]},{"title":"十一、Java 数据安全","level":1,"id":"011-十一Java 数据安全.md","children":[]},{"title":"十二、Java 性能优化","level":1,"id":"012-十二Java 性能优化.md","children":[]},{"title":"十三、综合实战","level":1,"id":"013-十三综合实战.md","children":[]}]')},68142:function(e){"use strict";e.exports=JSON.parse('[{"title":"一、JavaScript 基础","level":1,"id":"001-一JavaScript 基础.md","children":[{"title":"语言概述","level":2,"id":"002-语言概述.md","children":[]},{"title":"语法基础","level":2,"id":"003-语法基础.md","children":[]},{"title":"运算符","level":2,"id":"004-运算符.md","children":[]},{"title":"条件语句","level":2,"id":"005-条件语句.md","children":[]},{"title":"循环语句","level":2,"id":"006-循环语句.md","children":[]},{"title":"函数","level":2,"id":"007-函数.md","children":[]},{"title":"作用域与闭包","level":2,"id":"008-作用域与闭包.md","children":[]},{"title":"错误处理","level":2,"id":"009-错误处理.md","children":[]}]},{"title":"二、进阶知识","level":1,"id":"010-二进阶知识.md","children":[{"title":"对象与原型","level":2,"id":"011-对象与原型.md","children":[]},{"title":"数组操作","level":2,"id":"012-数组操作.md","children":[]},{"title":"字符串与正则表达式","level":2,"id":"013-字符串与正则表达式.md","children":[]},{"title":"异步编程","level":2,"id":"014-异步编程.md","children":[]}]},{"title":"三、浏览器环境","level":1,"id":"015-三浏览器环境.md","children":[{"title":"DOM 操作","level":2,"id":"016-DOM 操作.md","children":[]},{"title":"BOM 操作","level":2,"id":"017-BOM 操作.md","children":[]},{"title":"CSS 操作","level":2,"id":"018-CSS 操作.md","children":[]},{"title":"AJAX","level":2,"id":"019-AJAX.md","children":[]}]},{"title":"四、Node.js 环境","level":1,"id":"020-四Nodejs 环境.md","children":[]},{"title":"五、现代 JavaScript（ES6+）","level":1,"id":"021-五现代 JavaScriptES6.md","children":[{"title":"1. 变量与数据类型","level":2,"id":"022-1 变量与数据类型.md","children":[]},{"title":"2. 模板字符串","level":2,"id":"023-2 模板字符串.md","children":[]},{"title":"3. 新特性","level":2,"id":"024-3 新特性.md","children":[]},{"title":"4. 迭代器与生成器","level":2,"id":"025-4 迭代器与生成器.md","children":[]},{"title":"5. 装饰器","level":2,"id":"026-5 装饰器.md","children":[]}]},{"title":"六、性能优化与调试","level":1,"id":"027-六性能优化与调试.md","children":[]},{"title":"七、常见面试题","level":1,"id":"028-七常见面试题.md","children":[{"title":"基础知识","level":2,"id":"029-基础知识.md","children":[]},{"title":"进阶问题","level":2,"id":"030-进阶问题.md","children":[]},{"title":"框架相关","level":2,"id":"031-框架相关.md","children":[]}]}]')},73120:function(e){"use strict";e.exports=JSON.parse('[{"title":"1. SQL概述","level":1,"id":"001-1 SQL概述.md","children":[]},{"title":"2. 数据库基础","level":1,"id":"002-2 数据库基础.md","children":[]},{"title":"3. SQL基本语法","level":1,"id":"003-3 SQL基本语法.md","children":[{"title":"SQL语句的结构与书写规范","level":2,"id":"004-SQL语句的结构与书写规范.md","children":[]},{"title":"注释","level":2,"id":"005-注释.md","children":[]},{"title":"SQL关键字","level":2,"id":"006-SQL关键字.md","children":[]}]},{"title":"4. 数据查询（SELECT）","level":1,"id":"007-4 数据查询SELECT.md","children":[{"title":"4.1 基本查询","level":2,"id":"008-41 基本查询.md","children":[]},{"title":"4.2 条件查询","level":2,"id":"009-42 条件查询.md","children":[]},{"title":"4.3 排序","level":2,"id":"010-43 排序.md","children":[]},{"title":"4.4 分组与聚合","level":2,"id":"011-44 分组与聚合.md","children":[]},{"title":"4.5 连接查询","level":2,"id":"012-45 连接查询.md","children":[]},{"title":"4.6 子查询","level":2,"id":"013-46 子查询.md","children":[]}]},{"title":"5. 数据操作（DML - Data Manipulation Language）","level":1,"id":"014-5 数据操作DML - Data Manipulation Language.md","children":[]},{"title":"6. 数据定义（DDL - Data Definition Language）","level":1,"id":"015-6 数据定义DDL - Data Definition Language.md","children":[{"title":"1. 创建表：`CREATE TABLE`","level":2,"id":"016-1 创建表CREATE TABLE.md","children":[]},{"title":"2. 修改表：`ALTER TABLE`","level":2,"id":"017-2 修改表ALTER TABLE.md","children":[]},{"title":"3. 删除表：`DROP TABLE`","level":2,"id":"018-3 删除表DROP TABLE.md","children":[]},{"title":"4. 创建索引：`CREATE INDEX`","level":2,"id":"019-4 创建索引CREATE INDEX.md","children":[]},{"title":"5. 删除索引：`DROP INDEX`","level":2,"id":"020-5 删除索引DROP INDEX.md","children":[]}]},{"title":"7. 数据控制（DCL - Data Control Language）","level":1,"id":"021-7 数据控制DCL - Data Control Language.md","children":[{"title":"1. 授权（GRANT）","level":2,"id":"022-1 授权GRANT.md","children":[]},{"title":"2. 撤销权限（REVOKE）","level":2,"id":"023-2 撤销权限REVOKE.md","children":[]},{"title":"3. 权限管理的实际应用","level":2,"id":"024-3 权限管理的实际应用.md","children":[]}]},{"title":"8. 事务管理","level":1,"id":"025-8 事务管理.md","children":[{"title":"1. 事务的基本操作","level":2,"id":"026-1 事务的基本操作.md","children":[]},{"title":"2. ACID 特性","level":2,"id":"027-2 ACID 特性.md","children":[]},{"title":"3. 事务隔离级别","level":2,"id":"028-3 事务隔离级别.md","children":[]},{"title":"4. 事务管理的实际应用","level":2,"id":"029-4 事务管理的实际应用.md","children":[]},{"title":"5. 注意事项","level":2,"id":"030-5 注意事项.md","children":[]}]},{"title":"9. 高级功能","level":1,"id":"031-9 高级功能.md","children":[{"title":"9.1 视图（View）","level":2,"id":"032-91 视图View.md","children":[]},{"title":"9.2 存储过程与函数","level":2,"id":"033-92 存储过程与函数.md","children":[]},{"title":"9.3 触发器（Trigger）","level":2,"id":"034-93 触发器Trigger.md","children":[]},{"title":"9.4 窗口函数","level":2,"id":"035-94 窗口函数.md","children":[]}]},{"title":"10. SQL优化","level":1,"id":"036-10 SQL优化.md","children":[{"title":"1. 索引的使用与优化","level":2,"id":"037-1 索引的使用与优化.md","children":[]},{"title":"2. 查询执行计划（EXPLAIN）","level":2,"id":"038-2 查询执行计划EXPLAIN.md","children":[]},{"title":"3. 避免全表扫描","level":2,"id":"039-3 避免全表扫描.md","children":[]},{"title":"4. 优化 JOIN 操作","level":2,"id":"040-4 优化 JOIN 操作.md","children":[]}]},{"title":"11. 常见问题与实践","level":1,"id":"041-11 常见问题与实践.md","children":[{"title":"SQL注入及其防范","level":2,"id":"042-SQL注入及其防范.md","children":[]},{"title":"处理NULL值","level":2,"id":"043-处理NULL值.md","children":[]},{"title":"分页查询（LIMIT/OFFSET）","level":2,"id":"044-分页查询LIMITOFFSET.md","children":[]},{"title":"时间与日期处理","level":2,"id":"045-时间与日期处理.md","children":[]}]},{"title":"12. 数据库设计与规范化","level":1,"id":"046-12 数据库设计与规范化.md","children":[{"title":"1. 数据建模（ER图）","level":2,"id":"047-1 数据建模ER图.md","children":[]},{"title":"2. 设计高效的数据表","level":2,"id":"048-2 设计高效的数据表.md","children":[]},{"title":"3. 数据库性能调优","level":2,"id":"049-3 数据库性能调优.md","children":[]}]},{"title":"NoSQL数据库基本概念","level":1,"id":"050-NoSQL数据库基本概念.md","children":[{"title":"1. Redis简介","level":2,"id":"051-1 Redis简介.md","children":[]},{"title":"2. MongoDB简介","level":2,"id":"052-2 MongoDB简介.md","children":[]}]}]')},74393:function(e,t,n){"use strict";e.exports=n.p+"img/owner.28bd7e26.jpg"},91682:function(e,t,n){var a={"./Maven/course.json":95360,"./algorithm/course.json":29102,"./c-plus/course.json":56403,"./c/course.json":99998,"./database/course.json":73120,"./docker/course.json":23459,"./java/course.json":67003,"./javascript/course.json":68142,"./linear-algebra/course.json":13095,"./operatingsystem/course.json":29071,"./python/course.json":60513,"./redis/course.json":36492,"./software/course.json":14184,"./wang-luo-gong-cheng/course.json":22741};function c(e){var t=l(e);return n(t)}function l(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}c.keys=function(){return Object.keys(a)},c.resolve=l,e.exports=c,c.id=91682},91741:function(e){"use strict";e.exports=JSON.parse('[{"icon":"🔧","name":"编程与算法","courses":[{"name":"C语言","dir":"c"},{"name":"C++","dir":"c-plus"},{"name":"Java","dir":"java"},{"name":"JavaScript","dir":"javascript"},{"name":"Python","dir":"python"},{"name":"数据结构与算法分析","dir":"algorithm"},{"name":"编译原理","dir":"bian-yi-yuan-li"}]},{"icon":"🧠","name":"计算机系统","courses":[{"name":"组成原理","dir":"zu-cheng-yuan-li"},{"name":"操作系统","dir":"operatingsystem"},{"name":"汇编语言","dir":"hui-bian-yu-yan"},{"name":"体系结构","dir":"ti-xi-jie-gou"}]},{"icon":"⚙","name":"软件工程与开发实践","courses":[{"name":"Web技术","dir":"web-ji-shu"},{"name":"数据库原理","dir":"database"},{"name":"网络工程","dir":"wang-luo-gong-cheng"},{"name":"软件工程","dir":"software"},{"name":"移动应用开发","dir":"yi-dong-ying-yong-kai-fa"}]},{"icon":"🧮","name":"数学与建模","courses":[{"name":"高等数学","dir":"gao-deng-shu-xue"},{"name":"线性代数","dir":"linear-algebra"},{"name":"概率论","dir":"gai-lv-lun"},{"name":"离散数学","dir":"li-san-shu-xue"},{"name":"科学计算与数学建模","dir":"ke-xue-ji-suan-yu-shu-xue-jian-mo"}]},{"icon":"🌐","name":"理论与通识","courses":[{"name":"大学英语","dir":"da-xue-ying-yu"},{"name":"思想道德修养","dir":"si-xiang-dao-de-xiu-yang"},{"name":"马克思主义基本原理","dir":"ma-ke-si-zhu-yi-ji-ben-yuan-li"},{"name":"近代史","dir":"jin-dai-shi"},{"name":"心理健康教育","dir":"xin-li-jian-kang-jiao-yu"},{"name":"军事理论","dir":"jun-shi-li-lun"}]},{"icon":"🏫","name":"部署","courses":[{"name":"Docker","dir":"docker"},{"name":"Maven","dir":"Maven"}]},{"icon":"🏫","name":"数据库","courses":[{"name":"Redis","dir":"redis"}]}]')},95360:function(e){"use strict";e.exports=JSON.parse('[{"title":"🧩 一、Maven 简介","level":1,"id":"001-一Maven 简介.md","children":[]},{"title":"📦 二、安装与环境配置","level":1,"id":"002-二安装与环境配置.md","children":[]},{"title":"📁 三、Maven 项目结构","level":1,"id":"003-三Maven 项目结构.md","children":[]},{"title":"📄 四、POM 文件详解（pom.xml）","level":1,"id":"004-四POM 文件详解pomxml.md","children":[]},{"title":"🔗 五、依赖管理（Dependencies）","level":1,"id":"005-五依赖管理Dependencies.md","children":[]},{"title":"⚙️ 六、常用生命周期命令","level":1,"id":"006-六常用生命周期命令.md","children":[]},{"title":"🔌 七、Maven 插件（Plugins）","level":1,"id":"007-七Maven 插件Plugins.md","children":[]},{"title":"🌐 八、仓库管理（Repositories）","level":1,"id":"008-八仓库管理Repositories.md","children":[]},{"title":"📁 九、多模块项目（Multi-module Project）","level":1,"id":"009-九多模块项目Multi-module Project.md","children":[]},{"title":"💾 十、本地仓库与远程仓库","level":1,"id":"010-十本地仓库与远程仓库.md","children":[]},{"title":"🧼 十一、最佳实践建议","level":1,"id":"011-十一最佳实践建议.md","children":[]},{"title":"🧪 十二、常见问题排查","level":1,"id":"012-十二常见问题排查.md","children":[]},{"title":"🧰 十三、Maven 命令大全（常用）","level":1,"id":"013-十三Maven 命令大全常用.md","children":[]},{"title":"📘 十四、推荐阅读","level":1,"id":"014-十四推荐阅读.md","children":[]}]')},98317:function(e,t,n){"use strict";var a=n(45130),c=n(56768);function l(e,t,n,a,l,i){const d=(0,c.g2)("header-navigation"),o=(0,c.g2)("router-view");return(0,c.uX)(),(0,c.CE)(c.FK,null,[(0,c.bF)(d),(0,c.bF)(o)],64)}var i=n.p+"img/logo.d641f77c.png";const d={class:"site-header text-secondary border-bottom-foreground"},o={class:"site-header-pc"},r={class:"flex-row"},s={class:"desktop-nav"},m={class:"mobile-menu"};function p(e,t,n,a,l,p){const h=(0,c.g2)("router-link"),u=(0,c.g2)("ThemeToggle"),v=(0,c.g2)("CollapsibleSection");return(0,c.uX)(),(0,c.CE)("header",d,[(0,c.Lk)("header",o,[t[7]||(t[7]=(0,c.Lk)("div",{class:"logo"},[(0,c.Lk)("img",{src:i,alt:"Logo"}),(0,c.Lk)("span",null,"QIANRENNI")],-1)),(0,c.Lk)("div",r,[(0,c.Lk)("nav",s,[(0,c.bF)(h,{to:"/"},{default:(0,c.k6)((()=>t[1]||(t[1]=[(0,c.eW)("首页")]))),_:1}),(0,c.bF)(h,{to:"/chat-ai"},{default:(0,c.k6)((()=>t[2]||(t[2]=[(0,c.eW)("AI问答")]))),_:1}),(0,c.bF)(h,{to:"/courses"},{default:(0,c.k6)((()=>t[3]||(t[3]=[(0,c.eW)("课程笔记")]))),_:1}),(0,c.bF)(h,{to:"/acticle"},{default:(0,c.k6)((()=>t[4]||(t[4]=[(0,c.eW)("技术文章")]))),_:1}),(0,c.bF)(h,{to:"/projects"},{default:(0,c.k6)((()=>t[5]||(t[5]=[(0,c.eW)("项目实验")]))),_:1}),(0,c.bF)(h,{to:"/about"},{default:(0,c.k6)((()=>t[6]||(t[6]=[(0,c.eW)("关于我")]))),_:1})]),(0,c.bF)(u),(0,c.Lk)("button",{class:"hamburger",onClick:t[0]||(t[0]=(...e)=>p.toggleMenu&&p.toggleMenu(...e))}," ☰ ")])]),(0,c.bF)(v,{ref:"mobile-menu","is-show-arrow":!1,"initial-expanded":!1},{default:(0,c.k6)((()=>[(0,c.Lk)("nav",m,[(0,c.bF)(h,{to:"/"},{default:(0,c.k6)((()=>t[8]||(t[8]=[(0,c.eW)("首页")]))),_:1}),(0,c.bF)(h,{to:"/chat-ai"},{default:(0,c.k6)((()=>t[9]||(t[9]=[(0,c.eW)("AI问答")]))),_:1}),(0,c.bF)(h,{to:"/courses"},{default:(0,c.k6)((()=>t[10]||(t[10]=[(0,c.eW)("课程笔记")]))),_:1}),(0,c.bF)(h,{to:"/acticle"},{default:(0,c.k6)((()=>t[11]||(t[11]=[(0,c.eW)("技术文章")]))),_:1}),(0,c.bF)(h,{to:"/projects"},{default:(0,c.k6)((()=>t[12]||(t[12]=[(0,c.eW)("项目实验")]))),_:1}),(0,c.bF)(h,{to:"/about"},{default:(0,c.k6)((()=>t[13]||(t[13]=[(0,c.eW)("关于我")]))),_:1})])])),_:1},512)])}var h=n(24232);const u={class:"collapsible-section"},v={class:"content"};function g(e,t,n,l,i,d){return(0,c.uX)(),(0,c.CE)("div",u,["up"===n.direction&&n.isShowArrow?((0,c.uX)(),(0,c.CE)("div",{key:0,class:"toggle-button-up",onClick:t[0]||(t[0]=(...e)=>d.toggle&&d.toggle(...e))})):(0,c.Q3)("",!0),(0,c.Lk)("div",{class:"content-container",style:(0,h.Tr)({"justify-content":"left"===n.direction?"flex-start":"flex-end"})},["left"===n.direction&&n.isShowArrow?((0,c.uX)(),(0,c.CE)("div",{key:0,class:"toggle-button-left",onClick:t[1]||(t[1]=(...e)=>d.toggle&&d.toggle(...e)),style:(0,h.Tr)({height:n.isShowArrow&&"left"===n.direction&&i.isExpanded?"auto":"40px"})},null,4)):(0,c.Q3)("",!0),(0,c.bF)(a.eB,{name:d.transitionName},{default:(0,c.k6)((()=>[(0,c.bo)((0,c.Lk)("div",v,[(0,c.RG)(e.$slots,"default",{},void 0,!0)],512),[[a.aG,i.isExpanded]])])),_:3},8,["name"]),"right"===n.direction&&n.isShowArrow?((0,c.uX)(),(0,c.CE)("div",{key:1,class:"toggle-button-right",onClick:t[2]||(t[2]=(...e)=>d.toggle&&d.toggle(...e)),style:(0,h.Tr)({height:n.isShowArrow&&"right"===n.direction&&i.isExpanded?"auto":"40px"})},null,4)):(0,c.Q3)("",!0)],4),n.isShowArrow&&"down"===n.direction?((0,c.uX)(),(0,c.CE)("div",{key:1,class:"toggle-button-down",onClick:t[3]||(t[3]=(...e)=>d.toggle&&d.toggle(...e))})):(0,c.Q3)("",!0)])}var f={name:"CollapsibleSection",exposed:["toggle","close","open"],props:{isShowArrow:{type:Boolean,default:!0},initialExpanded:{type:Boolean,default:!0},direction:{type:String,default:"down",validator:e=>["up","down","left","right"].includes(e)}},data(){return{isExpanded:this.initialExpanded}},computed:{transitionName(){const e={up:"slide-up",down:"slide-down",left:"slide-left",right:"slide-right"};return e[this.direction]}},methods:{toggle(){this.isExpanded=!this.isExpanded},close(){this.isExpanded=!1},open(){this.isExpanded=!0}}},b=n(71241);const k=(0,b.A)(f,[["render",g],["__scopeId","data-v-05451986"]]);var w=k;const C={key:0,class:"icon icon-sun",x:"1747913502486",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16"},y={key:1,class:"icon icon-moon",x:"1747913936200",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16"};function L(e,t,n,a,l,i){return(0,c.uX)(),(0,c.CE)("div",{class:"theme-toggle",onClick:t[0]||(t[0]=(...e)=>i.toggleMode&&i.toggleMode(...e)),"aria-label":"切换主题"},[l.isDarkMode?((0,c.uX)(),(0,c.CE)("svg",C,t[1]||(t[1]=[(0,c.Lk)("path",{fill:"#f0f0f0",d:"M752.41931153 240.7063601c8.36993432 0 15.62255883 3.08990502 21.72821045 9.16589356 6.1353147 6.08093262 9.18566918 13.3928833 9.18566918 21.73315382 0 8.55285621-3.05035376 15.85986352-9.18566918 21.94079614l-43.67394996 43.66900658c-5.93261719 5.97216773-13.17041016 8.95825195-21.72326709 8.95825195-8.87420678 0-16.20098901-2.98608422-22.08911085-8.75061035-5.88317847-5.87329102-8.80004906-13.2890625-8.80004906-22.14843774 0-8.54791283 2.95642114-15.75604272 8.91375732-21.72821044l43.66900659-43.67394996c6.14025879-6.07598853 13.44726539-9.16589356 21.98034668-9.16589356z m37.66223167 240.39459181h61.79809547c8.52813721 0 15.82031227 2.98608422 21.83697534 9.06207276C879.78271508 496.24395728 882.78857422 503.45208717 882.78857422 512c0 8.55285621-3.00585914 15.85986352-9.07196021 21.83697533-6.01666236 6.07598853-13.30883813 9.06207276-21.83697534 9.06207276h-61.79809547c-8.52813721 0-15.80053734-2.98608422-21.86663841-9.06207276-6.01666236-5.97711182-9.05712867-13.2890625-9.05712867-21.83697533 0-8.55285621 3.04046631-15.76098609 9.05712867-21.83697533 6.06610107-6.07598853 13.33850122-9.06207276 21.86663841-9.06207276zM512 141.21142578c8.52813721 0 15.79064917 3.08990502 21.85180688 9.06207276 6.02160645 6.08093262 9.05712867 13.3928833 9.05712867 21.83697533v61.79809546c0 8.55285621-3.03552222 15.85986352-9.0521853 21.83697534-6.06610107 6.07598853-13.32861305 9.16589356-21.85675025 9.16589355-8.53802467 0-15.80053734-3.08990502-21.86663842-9.16589355-6.01666236-5.97711182-9.0521853-13.2890625-9.05218458-21.83697534V172.11047387c0-8.44409203 3.03552222-15.76098609 9.05218458-21.83697533C496.20440674 144.3013308 503.46691871 141.21142578 512.00494408 141.21142578zM271.81304907 240.7063601c8.36499023 0 15.61267066 3.08990502 21.743042 9.16589356l43.66900659 43.67394996c6.14025879 6.07598853 9.17083764 13.38793922 9.17083764 21.72821044 0 8.55285621-3.01080323 15.86480689-9.05712938 21.83697534-6.03149391 6.08093262-13.30389404 9.06207276-21.85180617 9.06207275-8.69622827 0-16.02795386-2.98608422-21.95068359-8.85443115l-43.68383814-43.67395068c-5.97216773-5.97216773-8.92858886-13.28411842-8.92858886-22.03967284 0-8.55285621 3.00585914-15.76098609 9.07196021-21.83697462 6.01666236-5.97216773 13.30883813-9.06207276 21.85675096-9.06207276h-0.03955126z m436.93725586 436.91253615c8.36499023 0 15.60772729 2.98608422 21.72326709 9.16589355l43.67394995 43.67395067c6.1353147 6.17980933 9.18566918 13.38793922 9.18566919 21.93585205 0 8.34521461-3.05035376 15.65716529-9.18566919 21.73315382-6.1105957 6.17980933-13.35827613 9.16589356-21.72326636 9.16589356-8.52813721 0-15.84008789-2.98608422-21.98034668-9.16589356l-43.66900659-43.66900587c-5.95733618-5.87329102-8.91375732-13.1852417-8.91375732-21.73315453 0-8.55285621 3.01080323-15.86480689 9.05712866-21.94079614 6.03149391-6.07598853 13.32861305-9.16589356 21.85180689-9.16589355h-0.01977564zM512.00494408 388.40380836c-34.12243628 0-63.22192359 12.05310035-87.39239525 36.2532351-24.1358645 24.10125732-36.21368384 53.25018335-36.21368384 87.34295654 0 34.0927732 12.07782007 63.24169922 36.21368384 87.44677734C448.78796387 623.53814721 477.88250709 635.59619164 512 635.59619164c34.12243628 0 63.23181176-12.05310035 87.4072268-36.15435838C623.51837158 575.2466433 635.59619164 546.09771729 635.59619164 512c0-34.0927732-12.07782007-63.24169922-36.18896484-87.34295654C575.23181176 400.45690942 546.12243628 388.40380836 512 388.40380836zM172.12036133 481.10095191h61.79809547c8.53802467 0 15.80053734 2.98608422 21.86663841 9.06207276 6.01666236 6.08093262 9.05712867 13.2890625 9.05712867 21.83697533 0 8.55285621-3.04046631 15.85986352-9.05712867 21.83697533-6.06610107 6.07598853-13.32861305 9.06207276-21.86663841 9.06207276h-61.79809547c-8.52813721 0-15.81042481-2.98608422-21.83697534-9.06207276C144.21728492 527.85986352 141.21142578 520.54791283 141.21142578 512c0-8.55285621 3.00585914-15.76098609 9.07196021-21.83697533 6.03149391-6.07598853 13.30883813-9.06207276 21.83697534-9.06207276zM512.00494408 759.19238258c8.52813721 0 15.79064917 2.98608422 21.85180617 9.06207274 6.02160645 6.08093262 9.05712867 13.2890625 9.05712938 21.83697535v61.79809546c0 8.55285621-3.03552222 15.85986352-9.0521853 21.83697533C527.79559326 879.80249 520.53308129 882.78857422 512 882.78857422c-8.53802467 0-15.80053734-2.98608422-21.86663842-9.06207276-6.01666236-5.97711182-9.0521853-13.2890625-9.05218458-21.83697533v-61.79809546c0-8.55285621 3.03552222-15.76098609 9.05218458-21.83697534 6.06610107-6.07598853 13.32861305-9.06207276 21.86663842-9.06207275z m-196.47839379-81.57348633c8.5034182 0 15.80053734 2.98608422 21.84686279 9.16589355 6.03149391 6.08093262 9.07196021 13.3928833 9.07196021 21.94079614 0 8.44409203-3.08001685 15.65222192-9.19555664 21.72821044l-43.67394995 43.67394996c-6.10565162 6.17980933-13.34838867 9.16589356-21.72326637 9.16589356-8.54791283 0-15.84008789-2.98608422-21.85180687-8.96319533-6.07104516-6.07598853-9.0769043-13.38793922-9.0769043-21.93585205 0-8.65173364 2.95642114-15.96862769 8.92858887-21.94079614l43.68383813-43.66900658c6.10565162-6.17980933 13.44232202-9.16589356 21.95068359-9.16589355h0.03955054zM512 326.60571289c33.628052 0 64.6506958 8.34521461 93.0481565 24.81811547 28.42712378 16.69042992 50.92163109 39.1404419 67.4637456 67.56756568 16.57177758 28.32824708 24.86755347 59.32617188 24.86755347 93.00860596 0 33.68243408-8.27600098 64.68035888-24.86755347 93.10748267-16.58166504 28.32824708-39.08605981 50.77825904-67.4637456 67.4637456-28.36285424 16.58166504-59.37561059 24.82305884-93.0481565 24.82305884-33.66760254 0-64.67047143-8.24139381-93.05804468-24.81811547-28.37768578-16.69042992-50.86230492-39.14538598-67.46374487-67.46868897-16.58166504-28.42712378-24.86755347-59.42504859-24.86755348-93.10748267 0-33.68243408 8.31555152-64.68035888 24.86755348-93.00860596 16.55200195-28.42712378 39.03662109-50.87713647 67.46374487-67.56262231C447.35424828 334.94598413 478.371948 326.60571289 512 326.60571289z"},null,-1)]))):((0,c.uX)(),(0,c.CE)("svg",y,t[2]||(t[2]=[(0,c.Lk)("path",{fill:"black",d:"M525.963636 93.090909c225.745455 6.981818 404.945455 193.163636 404.945455 418.909091 0 230.4-188.509091 418.909091-418.909091 418.909091-174.545455 0-323.490909-107.054545-386.327273-256H139.636364c230.4 0 418.909091-188.509091 418.909091-418.909091 0-58.181818-11.636364-111.709091-32.581819-162.909091m0-93.090909c-30.254545 0-58.181818 13.963636-76.8 39.563636-18.618182 25.6-20.945455 60.509091-9.309091 88.436364 16.290909 41.890909 25.6 83.781818 25.6 128 0 179.2-146.618182 325.818182-325.818181 325.818182h-11.636364-2.327273c-30.254545 0-58.181818 13.963636-76.8 39.563636-18.618182 25.6-20.945455 60.509091-9.309091 88.436364C121.018182 900.654545 304.872727 1024 512 1024c281.6 0 512-230.4 512-512C1024 235.054545 807.563636 9.309091 528.290909 0h-2.327273z"},null,-1)])))])}var j={name:"ThemeToggle",data(){return{isDarkMode:!1}},mounted(){this.$nextTick((()=>{this.isDarkMode=document.body.classList.contains("dark-mode")}))},methods:{toggleMode(){this.isDarkMode=!this.isDarkMode,document.body.classList.toggle("dark-mode",this.isDarkMode),localStorage.setItem("darkMode",this.isDarkMode)}}};const S=(0,b.A)(j,[["render",L],["__scopeId","data-v-12161beb"]]);var T=S,P={name:"HeaderNavigation",components:{ThemeToggle:T,CollapsibleSection:w},data(){return{isMenuOpen:!1,isDarkMode:!1}},mounted(){this.isDarkMode=document.body.classList.contains("dark-mode")},methods:{toggleMenu(){this.$refs["mobile-menu"].toggle()},toggleMode(){this.isDarkMode=!this.isDarkMode,document.body.classList.toggle("dark-mode",this.isDarkMode)}}};const E=(0,b.A)(P,[["render",p],["__scopeId","data-v-8ac129fc"]]);var K=E,x={name:"App",components:{HeaderNavigation:K}};const I=(0,b.A)(x,[["render",l]]);var M=I,D=n(81387);const O={class:"home"},A={class:"hero text-secondary"};function R(e,t,n,a,l,i){const d=(0,c.g2)("router-link");return(0,c.uX)(),(0,c.CE)("div",O,[(0,c.Lk)("section",A,[t[1]||(t[1]=(0,c.Lk)("h1",null,"你好！我是QIANRENNI",-1)),t[2]||(t[2]=(0,c.Lk)("p",null,"计算机专业学生 · 知识分享者",-1)),(0,c.bF)(d,{to:"/about",class:"btn bg-primary"},{default:(0,c.k6)((()=>t[0]||(t[0]=[(0,c.eW)("了解更多")]))),_:1})]),t[3]||(t[3]=(0,c.Fv)('<section class="fun-section text-secondary border-primary" data-v-4067bc9e><div class="animated-box bg-primary top-center" data-v-4067bc9e></div><div class="flex-row" data-v-4067bc9e><div class="animated-box bg-primary left-center" data-v-4067bc9e></div><div class="animated-box bg-primary right-center" data-v-4067bc9e></div></div></section><footer class="site-footer text-secondary bg-card" data-v-4067bc9e><p data-v-4067bc9e>© 2025 QIANRENNI 的个人博客</p><div class="social link" data-v-4067bc9e><a data-v-4067bc9e>邮箱 3092176591@qq.com</a><a href="https://gitee.com/Qianrenni " target="_blank" data-v-4067bc9e>Gitee</a></div></footer>',2))])}var N={name:"HomePage"};const F=(0,b.A)(N,[["render",R],["__scopeId","data-v-4067bc9e"]]);var _=F;const $={class:"container"};function J(e,t,a,l,i,d){const o=(0,c.g2)("figure-frame");return(0,c.uX)(),(0,c.CE)("div",$,[(0,c.bF)(o,{style:{width:"720px"},"img-url":n(7497),onClickImg:d.clickImg},null,8,["img-url","onClickImg"])])}const X={class:"container"},H=["src"];function B(e,t,n,a,l,i){return(0,c.uX)(),(0,c.CE)("div",X,[(0,c.Lk)("div",{class:"door",onClick:t[0]||(t[0]=t=>e.$emit("clickImg","看到故人之姿了嘛?"))},[(0,c.Lk)("img",{src:n.imgUrl,alt:"frame-image",class:"frame-image"},null,8,H),t[1]||(t[1]=(0,c.Lk)("div",{class:"left-door"},null,-1)),t[2]||(t[2]=(0,c.Lk)("div",{class:"right-door"},null,-1))])])}var z={name:"FigureFrame",emits:["clickImg"],props:{imgUrl:{type:String,default:n(74393)}},methods:{},mounted(){console.log(this.imgUrl)}};const W=(0,b.A)(z,[["render",B],["__scopeId","data-v-6daa107e"]]);var G=W,Q={name:"AboutMe",components:{FigureFrame:G},methods:{clickImg(e){alert(e)}}};const U=(0,b.A)(Q,[["render",J]]);var V=U,Z=n(90144);const q={class:"texture-generator"},Y={key:0},ee={key:1},te={class:"code-output"};var ne={__name:"LinearGradient",setup(e){const t=(0,Z.KR)("stripe"),n=(0,Z.KR)("#ffffff"),l=(0,Z.KR)(45),i=(0,Z.KR)(20),d=(0,Z.KR)(1),o=(0,c.EW)((()=>{const e=`${l.value}deg`,a=n.value,c=d.value,o=i.value;switch(t.value){case"stripe":return`linear-gradient(${e},\n        ${a} ${c}px,\n        transparent ${c}px,\n        transparent ${o/2}px,\n        ${a} ${o/2}px\n      )`;case"grid":return`linear-gradient(to right, ${a} ${c}px, transparent ${c}px),\n              linear-gradient(to bottom, ${a} ${c}px, transparent ${c}px)`;case"dot":return`radial-gradient(circle, ${a} ${c}px, transparent ${c}px, transparent ${o}px, ${a} ${o}px)`;case"brick":return`linear-gradient(to right, ${a} ${c}px, transparent ${c}px),\n              linear-gradient(to bottom, ${a} ${c}px, transparent ${c}px)`;case"line-horizontal":return`linear-gradient(to right, ${a} ${c}px, transparent ${c}px)`;case"line-vertical":return`linear-gradient(to bottom, ${a} ${c}px, transparent ${c}px)`;default:return""}})),r=(0,c.EW)((()=>`.your-class {\n  background-image: ${o.value};\n  background-size: ${i.value}px ${i.value}px;\n}`));return(e,s)=>((0,c.uX)(),(0,c.CE)("div",q,[s[14]||(s[14]=(0,c.Lk)("h2",null,"🎨 CSS 渐变纹理生成器",-1)),(0,c.Lk)("label",null,[s[6]||(s[6]=(0,c.eW)(" 纹理类型： ")),(0,c.bo)((0,c.Lk)("select",{"onUpdate:modelValue":s[0]||(s[0]=e=>t.value=e)},s[5]||(s[5]=[(0,c.Fv)('<option value="stripe" data-v-072711f4>斜条纹</option><option value="grid" data-v-072711f4>网格</option><option value="dot" data-v-072711f4>圆点</option><option value="brick" data-v-072711f4>砖墙</option><option value="line-horizontal" data-v-072711f4>水平细线</option><option value="line-vertical" data-v-072711f4>垂直细线</option>',6)]),512),[[a.u1,t.value]])]),(0,c.Lk)("label",null,[s[7]||(s[7]=(0,c.eW)(" 颜色： ")),(0,c.bo)((0,c.Lk)("input",{type:"color","onUpdate:modelValue":s[1]||(s[1]=e=>n.value=e)},null,512),[[a.Jo,n.value]])]),["stripe","line-horizontal","line-vertical"].includes(t.value)?((0,c.uX)(),(0,c.CE)("label",Y,[s[8]||(s[8]=(0,c.eW)(" 角度： ")),(0,c.bo)((0,c.Lk)("input",{type:"number","onUpdate:modelValue":s[2]||(s[2]=e=>l.value=e)},null,512),[[a.Jo,l.value,void 0,{number:!0}]]),s[9]||(s[9]=(0,c.eW)(" deg "))])):(0,c.Q3)("",!0),(0,c.Lk)("label",null,[s[10]||(s[10]=(0,c.eW)(" 间距： ")),(0,c.bo)((0,c.Lk)("input",{type:"number","onUpdate:modelValue":s[3]||(s[3]=e=>i.value=e)},null,512),[[a.Jo,i.value,void 0,{number:!0}]]),s[11]||(s[11]=(0,c.eW)(" px "))]),["stripe","line-horizontal","line-vertical"].includes(t.value)?((0,c.uX)(),(0,c.CE)("label",ee,[s[12]||(s[12]=(0,c.eW)(" 线宽： ")),(0,c.bo)((0,c.Lk)("input",{type:"number","onUpdate:modelValue":s[4]||(s[4]=e=>d.value=e)},null,512),[[a.Jo,d.value,void 0,{number:!0}]]),s[13]||(s[13]=(0,c.eW)(" px "))])):(0,c.Q3)("",!0),(0,c.Lk)("div",{class:"preview",style:(0,h.Tr)({backgroundImage:o.value,backgroundSize:i.value+"px "+i.value+"px"})},null,4),(0,c.Lk)("div",te,[(0,c.Lk)("pre",null,(0,h.v_)(r.value),1)])]))}};const ae=(0,b.A)(ne,[["__scopeId","data-v-072711f4"]]);var ce=ae;const le={class:"course-nav-container text-secondary"},ie={class:"course-nav",ref:"navScroll"},de={class:"category-header"},oe={class:"icon"},re={class:"title"},se={class:"sub-courses"};function me(e,t,n,a,l,i){const d=(0,c.g2)("SkillTag"),o=(0,c.g2)("CollapsibleSection"),r=(0,c.g2)("router-view");return(0,c.uX)(),(0,c.CE)(c.FK,null,[(0,c.bF)(o,{ref:"courseNav",style:{position:"sticky",top:"2.5rem"}},{default:(0,c.k6)((()=>[(0,c.Lk)("div",le,[(0,c.Lk)("div",ie,[((0,c.uX)(!0),(0,c.CE)(c.FK,null,(0,c.pI)(l.categories,((e,t)=>((0,c.uX)(),(0,c.CE)("div",{key:t,class:"category-row"},[(0,c.Lk)("div",de,[(0,c.Lk)("span",oe,(0,h.v_)(e.icon),1),(0,c.Lk)("span",re,(0,h.v_)(e.name),1)]),(0,c.Lk)("div",se,[((0,c.uX)(!0),(0,c.CE)(c.FK,null,(0,c.pI)(e.courses,((e,t)=>((0,c.uX)(),(0,c.Wv)(d,{key:t,skill:e.name,onClick:t=>i.clickCourse(e)},null,8,["skill","onClick"])))),128))])])))),128))],512)])])),_:1},512),(0,c.bF)(r)],64)}n(44114);const pe={class:"course-tag btn-outline"};function he(e,t,n,a,l,i){return(0,c.uX)(),(0,c.CE)("span",pe,(0,h.v_)(n.skill),1)}var ue={name:"SkillTag",props:{skill:String}};const ve=(0,b.A)(ue,[["render",he],["__scopeId","data-v-f04a4dbc"]]);var ge=ve,fe={name:"CourseNav",components:{CollapsibleSection:w,SkillTag:ge},data(){return{categories:n(91741)}},methods:{clickCourse(e){console.log(e),this.$refs.courseNav.toggle(),this.$router.push({path:`/courses/${e.name}/${e.dir}`})}},beforeMount(){}};const be=(0,b.A)(fe,[["render",me],["__scopeId","data-v-248ea644"]]);var ke=be;const we={class:"course-detail-container"},Ce={class:"sidebar"},ye={ref:"content",class:"content-container"};function Le(e,t,n,a,l,i){const d=(0,c.g2)("NavSection"),o=(0,c.g2)("CollapsibleSection"),r=(0,c.g2)("MarkdownRender");return(0,c.uX)(),(0,c.CE)("div",we,[(0,c.bF)(o,{ref:"siderbar",direction:"up",class:"sidebar-container","is-show-arrow":l.sidebarArrowShow},{default:(0,c.k6)((()=>[(0,c.Lk)("nav",Ce,[(0,c.bF)(d,{sections:l.sections,onHandleNavigation:i.handleNavigation},null,8,["sections","onHandleNavigation"])])])),_:1},8,["is-show-arrow"]),(0,c.Lk)("main",ye,[(0,c.bF)(r,{content:l.markdownContent},null,8,["content"])],512)])}const je={class:"nav-section bg-body text-secondary border-gray"},Se={key:1,class:"current-title"},Te={class:"section-nav"},Pe=["onClick"],Ee=["onClick"];function Ke(e,t,n,a,l,i){return(0,c.uX)(),(0,c.CE)("div",je,[l.stack.length>1?((0,c.uX)(),(0,c.CE)("div",{key:0,class:"back-button",onClick:t[0]||(t[0]=(...e)=>i.goBack&&i.goBack(...e))}," ← 返回上一级 ")):(0,c.Q3)("",!0),i.currentLevelTitle?((0,c.uX)(),(0,c.CE)("h4",Se,(0,h.v_)(i.currentLevelTitle),1)):(0,c.Q3)("",!0),(0,c.Lk)("ul",Te,[((0,c.uX)(!0),(0,c.CE)(c.FK,null,(0,c.pI)(i.currentSections,(e=>((0,c.uX)(),(0,c.CE)("li",{key:e.id,class:"nav-item"},[e.children&&e.children.length?((0,c.uX)(),(0,c.CE)("a",{key:0,href:"javascript:void(0)",class:(0,h.C4)(["nav-link has-child hover-primary",{active:l.activeId===e.id}]),onClick:t=>i.enterSubLevel(e)},(0,h.v_)(e.title),11,Pe)):((0,c.uX)(),(0,c.CE)("a",{key:1,href:"javascript:void(0)",class:(0,h.C4)(["nav-link hover-primary",{active:l.activeId===e.id}]),onClick:t=>i.markActive(e)},(0,h.v_)(e.title),11,Ee))])))),128))])])}var xe={name:"NavSection",props:{sections:{type:Array,required:!0}},data(){return{stack:[],activeId:null}},computed:{currentSections(){return this.stack.length?this.stack[this.stack.length-1].children:this.sections},currentLevelTitle(){return 0===this.stack.length?"课程目录":this.stack[this.stack.length-1].title}},watch:{sections:{immediate:!0,handler(e){this.stack=[{title:"课程目录",children:e}],this.activeId=null}}},mounted(){this.stack=[{title:"课程目录",children:this.sections}]},methods:{enterSubLevel(e){this.stack.push(e),this.activeId=e.id},goBack(){this.stack.pop(),0===this.stack.length&&(this.stack=[{title:"课程目录",children:this.sections}])},markActive(e){this.activeId=e.id,this.$emit("handleNavigation",e)}}};const Ie=(0,b.A)(xe,[["render",Ke],["__scopeId","data-v-e83b9f44"]]);var Me=Ie;const De=["innerHTML"];function Oe(e,t,n,a,l,i){return(0,c.uX)(),(0,c.CE)("div",{class:"markdown-body",innerHTML:l.htmlContent},null,8,De)}n(18111),n(7588);var Ae=n(20357),Re=n(45210),Ne=n(81109),Fe=(n(3910),n(10834));function _e(e){return e.normalize("NFKC").toLowerCase().replace(/[\u4e00-\u9fa5]/g,(e=>(0,Fe.iA)(e))).replace(/[^a-z\u4e00-\u9fa5]/g,"-").replace(/-+/g,"-").replace(/^-+|-+$/g,"")}Ne.A.registerLanguage("java",n(90976)),Ne.A.registerLanguage("python",n(91334)),Ne.A.registerLanguage("javascript",n(87019)),Ne.A.registerLanguage("html",n(49895)),Ne.A.registerLanguage("css",n(28057));const $e=new Ae.xI.Renderer;$e.image=function(e,t,n){let a=e.href;return a.startsWith("http")||(a=`/images/${a.replace(/^\.\/images\//,"")}`),`<img src="${a}" alt="${n}" ${t?`title="${t}"`:""} />`},$e.heading=function(e){const t=_e(e.text);return`<h${e.depth} id="${t}">${e.text.replace(/\*+/g,"")}</h${e.depth}>`},$e.link=e=>{const t=e.href,n=e.text,a=e.title||"";return t&&t.startsWith("#")?`<a href="#${_e(t)}" data-anchor>${n}</a>`:`<a href="${t}"${a?` title="${a}"`:""} target="_blank">${n}</a>`},Ae.xI.use((0,Re.A)({output:"mathml",strict:!1,throwOnError:!1})),Ae.xI.setOptions({highlight:(e,t)=>{if(!t)return Ne.A.highlight(e,{language:"plaintext"}).value;try{return Ne.A.highlight(e,{language:t}).value}catch(n){return console.warn(`Highlight.js 无法识别语言：${t}，已自动降级为 plaintext`),Ne.A.highlight(e,{language:"plaintext"}).value}},renderer:$e,gfm:!0,breaks:!1,pedantic:!1,langPrefix:"language-"});var Je={name:"MarkdownRender",props:{content:{type:String,required:!0}},data(){return{htmlContent:""}},computed:{},watch:{content:{immediate:!0,handler(e){this.parseMarkdown(e),this.$nextTick((()=>{document.querySelectorAll("a[data-anchor]").forEach((e=>{e.removeEventListener("click",this.handleAnchorClick),e.addEventListener("click",this.handleAnchorClick)}))}))}}},mounted(){this.parseMarkdown(this.content),this.$nextTick((()=>{this.highlightCode()}))},methods:{handleAnchorClick(e){e.preventDefault();const t=e.target.getAttribute("href"),n=document.querySelector(t);n&&(n.scrollIntoView({behavior:"smooth"}),history.pushState(null,"",t))},parseMarkdown(e){this.htmlContent=Ae.xI.parse(e),this.$nextTick((()=>{this.highlightCode()}))},highlightCode(){document.querySelectorAll("pre code").forEach((e=>{Ne.A.highlightElement(e)}))}}};const Xe=(0,b.A)(Je,[["render",Oe],["__scopeId","data-v-ba06230e"]]);var He=Xe,Be={name:"CourseDetail",components:{MarkdownRender:He,NavSection:Me,CollapsibleSection:w},data(){return{sections:[],markdownContent:"",sidebarArrowShow:window.innerWidth<=768}},watch:{"$route.params.courseDir":{immediate:!0,handler(e){e&&this.loadCourseData(e)}}},methods:{async loadCourseData(e){try{const t=n(91682)(`./${e}/course.json`);this.sections=t;const a=this.getFirstLeaf(t);a&&await this.loadMarkdownContent(e,a.id)}catch(t){this.markdownContent="<h2>找不到该课程的内容</h2>",this.sections=[]}},getFirstLeaf(e){for(const t of e){if(!t.children||0===t.children.length)return t;{const e=this.getFirstLeaf(t.children);if(e)return e}}return null},async loadMarkdownContent(e,t){try{const a=await n(37317)(`./${e}/content/${t}`);this.markdownContent=a.default||a}catch(a){this.markdownContent=`<h2>无法加载 ${t}</h2>`}},async handleNavigation(e){await this.loadMarkdownContent(this.$route.params.courseDir,e.id),this.$nextTick((()=>{setTimeout((()=>{this.$refs.content.scrollTo({top:0,behavior:"smooth"})}),50)}))},handleResize(){window.innerWidth<=768?this.sidebarArrowShow=!0:(this.sidebarArrowShow=!1,this.$refs.siderbar.open())}},beforeMount(){window.addEventListener("resize",this.handleResize)},beforeUnmount(){window.removeEventListener("resize",this.handleResize)}};const ze=(0,b.A)(Be,[["render",Le]]);var We=ze;const Ge={class:"container text-secondary"},Qe={class:"chat-scroll"},Ue={key:0,class:"user"},Ve={class:"input-box"};function Ze(e,t,n,l,i,d){const o=(0,c.g2)("MarkdownRender");return(0,c.uX)(),(0,c.CE)("div",Ge,[(0,c.Lk)("div",Qe,[((0,c.uX)(!0),(0,c.CE)(c.FK,null,(0,c.pI)(i.messages,((e,t)=>((0,c.uX)(),(0,c.CE)("div",{key:t,class:"message-bubble bg-card"},["user"===e.role?((0,c.uX)(),(0,c.CE)("div",Ue,(0,h.v_)(e.content),1)):((0,c.uX)(),(0,c.Wv)(o,{key:1,content:e.content,class:"bot"},null,8,["content"]))])))),128))]),(0,c.Lk)("div",Ve,[(0,c.bo)((0,c.Lk)("textarea",{class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>i.inputText=e),onKeyup:t[1]||(t[1]=(0,a.jR)(((...e)=>d.sendMessage&&d.sendMessage(...e)),["enter"])),placeholder:"输入你的问题...",maxlength:"10000"},null,544),[[a.Jo,i.inputText]])])])}var qe={name:"ChatAI",components:{MarkdownRender:He},data(){return{inputText:"",messages:[],answer_finished:!0}},methods:{async sendMessage(){if(!this.answer_finished)return void alert("请等待聊天助手回复完成");if(!this.inputText.trim())return;this.answer_finished=!1;const e={role:"user",content:this.inputText};this.messages.push(e),this.messages.push({role:"assistant",content:""}),this.inputText="";const t="default";try{const n=await fetch("http://localhost:8000/chat",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user_input:e.content,session_id:t})}),a=n.body.getReader(),c=new TextDecoder,l=this.messages.length-1;while(1){const{done:e,value:t}=await a.read();if(e)break;const n=c.decode(t,{stream:!0});this.messages[l].content+=n}}catch(n){console.log(n),alert("聊天助手正在闭关,敬请期待!")}finally{this.answer_finished=!0}}}};const Ye=(0,b.A)(qe,[["render",Ze],["__scopeId","data-v-4bfe36ee"]]);var et=Ye;const tt={class:"pagination-container"},nt={class:"pages"},at=["innerHTML"],ct={class:"nav"},lt=["disabled"],it=["disabled"];function dt(e,t,n,a,l,i){return(0,c.uX)(),(0,c.CE)("div",tt,[(0,c.Lk)("div",nt,[((0,c.uX)(!0),(0,c.CE)(c.FK,null,(0,c.pI)(l.pages,((e,t)=>((0,c.uX)(),(0,c.CE)("div",{key:t,class:(0,h.C4)(["page",{active:t===l.currentPage}]),innerHTML:e},null,10,at)))),128))]),(0,c.Lk)("div",ct,[(0,c.Lk)("button",{onClick:t[0]||(t[0]=(...e)=>i.prevPage&&i.prevPage(...e)),disabled:0===l.currentPage},"上一页",8,lt),(0,c.Lk)("span",null,"第 "+(0,h.v_)(l.currentPage+1)+" 页 / 共 "+(0,h.v_)(l.pages.length)+" 页",1),(0,c.Lk)("button",{onClick:t[1]||(t[1]=(...e)=>i.nextPage&&i.nextPage(...e)),disabled:l.currentPage===l.pages.length-1},"下一页",8,it)])])}n(61701);var ot=n(29157),rt=n.n(ot),st={name:"PaginatedContentView",props:{htmlContent:{type:String,default:()=>rt()}},data(){return{pages:[],currentPage:0,resizeTimeout:null,headerHTML:"",scripts:[]}},methods:{reflowPages(){const e=new DOMParser,t=e.parseFromString(this.htmlContent,"text/html");this.headerHTML=Array.from(t.head.children).map((e=>e.outerHTML)).join("\n");const n=document.createElement("div");n.innerHTML=t.body.innerHTML;const a=Array.from(n.children);this.scripts=Array.from(t.scripts).map((e=>e.src));let c=0,l="";const i=window.innerHeight-150;for(const d of a){const e=d.cloneNode(!0);e.style.visibility="hidden",e.style.position="absolute",document.body.appendChild(e);const t=e.offsetHeight;document.body.removeChild(e),c+t>i&&""!==l&&(this.pages.push(`<head>${this.headerHTML}</head>${l}`),l="",c=0),l+=d.outerHTML,c+=t}""!==l&&this.pages.push(`<head>${this.headerHTML}</head><body>${l}</body>`),this.loadScripts()},loadScripts(){this.scripts.forEach((e=>{if(!e)return;const t=document.createElement("script");t.src=e,t.async=!0,document.body.appendChild(t)}))},nextPage(){this.currentPage<this.pages.length-1&&this.currentPage++},prevPage(){this.currentPage>0&&this.currentPage--},handleResize(){clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout((()=>{this.currentPage=0,this.pages=[],this.reflowPages()}),300)}},mounted(){this.reflowPages(),window.addEventListener("resize",this.handleResize)},beforeUnmount(){window.removeEventListener("resize",this.handleResize)}};const mt=(0,b.A)(st,[["render",dt],["__scopeId","data-v-6f74091c"]]);var pt=mt;const ht={class:"article-container border-primary"},ut={class:"article-list sidebar"},vt=["onClick"],gt={key:0,class:"empty-tip"},ft={class:"content-container"},bt={key:0,style:{display:"flex","flex-direction":"column",height:"100%"}},kt={class:"article-meta text-muted"},wt={key:1,class:"empty-tip text-muted"};function Ct(e,t,n,a,l,i){const d=(0,c.g2)("CollapsibleSection"),o=(0,c.g2)("MarkdownRender");return(0,c.uX)(),(0,c.CE)("div",ht,[(0,c.bF)(d,{ref:"siderbar",direction:"up",class:"sidebar-container","is-show-arrow":l.sidebarArrowShow},{default:(0,c.k6)((()=>[(0,c.Lk)("div",ut,[t[0]||(t[0]=(0,c.Lk)("h2",null,"文章列表",-1)),(0,c.Lk)("ul",null,[((0,c.uX)(!0),(0,c.CE)(c.FK,null,(0,c.pI)(l.articles,((e,t)=>((0,c.uX)(),(0,c.CE)("li",{key:t,class:(0,h.C4)([{active:l.selectedIndex>=0&&l.selectedIndex===t},"hover-primary"]),onClick:e=>i.selectArticle(t)},(0,h.v_)(e.title),11,vt)))),128))]),0===l.articles.length?((0,c.uX)(),(0,c.CE)("div",gt,"暂无文章")):(0,c.Q3)("",!0)])])),_:1},8,["is-show-arrow"]),(0,c.Lk)("div",ft,[-1!==l.selectedIndex?((0,c.uX)(),(0,c.CE)("div",bt,[(0,c.bF)(o,{style:{flex:"1"},content:l.articles[l.selectedIndex].content},null,8,["content"]),(0,c.Lk)("div",kt,"发布于: "+(0,h.v_)(l.articles[l.selectedIndex].date),1)])):((0,c.uX)(),(0,c.CE)("div",wt," 请选择一篇文章查看详情 "))])])}var yt=JSON.parse('[{"title":"强化学习基础","dirName":"enhanceLearing","date":"2025-6-6"}]'),Lt={name:"ArticlePage",components:{CollapsibleSection:w,MarkdownRender:He},data(){return{articles:yt,selectedIndex:-1,sidebarArrowShow:window.innerWidth<=768}},methods:{async selectArticle(e){try{if(void 0===this.articles[e]?.content){const t=await n(36456)(`./${yt[e].dirName}/article.md`);this.articles[e].content=t.default||t}}catch(t){console.log(t),this.articles[e].content=`<h2>无法加载 ${yt[e].dirName}/article.md</h2>`}console.log(`select ${e}`),this.selectedIndex=e},formatDate(e){return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")}`},handleResize(){window.innerWidth<=768?this.sidebarArrowShow=!0:(this.sidebarArrowShow=!1,this.$refs.siderbar.open())}},beforeMount(){window.addEventListener("resize",this.handleResize)},beforeUnmount(){window.removeEventListener("resize",this.handleResize)}};const jt=(0,b.A)(Lt,[["render",Ct],["__scopeId","data-v-4a54d0f8"]]);var St=jt;const Tt=[{path:"/",component:_},{path:"/about",component:V},{path:"/linear",component:ce},{path:"/courses",component:ke,children:[{path:"/courses/:courseName/:courseDir",component:We}]},{path:"/chat-ai",component:et},{path:"/test",component:pt},{path:"/acticle",component:St}],Pt=(0,D.aE)({history:(0,D.Bt)(),routes:Tt});var Et=Pt;function Kt(){const e=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches;e&&(console.log("Dark mode enabled"),document.body.classList.add("dark-mode"))}(0,a.Ef)(M).use(Et).mount("#app"),Kt(),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",(e=>{e.matches?document.body.classList.add("dark-mode"):document.body.classList.remove("dark-mode")}))},99998:function(e){"use strict";e.exports=JSON.parse('[{"title":"一、C 语言基础知识","level":1,"id":"001-一C 语言基础知识.md","children":[{"title":"1. C 语言简介","level":2,"id":"002-1 C 语言简介.md","children":[]},{"title":"2. 基本语法","level":2,"id":"003-2 基本语法.md","children":[]}]},{"title":"二、控制结构","level":1,"id":"004-二控制结构.md","children":[{"title":"1. 条件语句","level":2,"id":"005-1 条件语句.md","children":[]},{"title":"2. 循环语句","level":2,"id":"006-2 循环语句.md","children":[]},{"title":"3. 跳转语句","level":2,"id":"007-3 跳转语句.md","children":[]}]},{"title":"三、数组与字符串","level":1,"id":"008-三数组与字符串.md","children":[{"title":"1. 数组","level":2,"id":"009-1 数组.md","children":[]},{"title":"2. 字符串","level":2,"id":"010-2 字符串.md","children":[]}]},{"title":"四、函数","level":1,"id":"011-四函数.md","children":[{"title":"1. 函数的基本概念","level":2,"id":"012-1 函数的基本概念.md","children":[]},{"title":"2. 函数的分类","level":2,"id":"013-2 函数的分类.md","children":[]},{"title":"3. 递归函数","level":2,"id":"014-3 递归函数.md","children":[]},{"title":"4. 库函数","level":2,"id":"015-4 库函数.md","children":[]}]},{"title":"五、指针","level":1,"id":"016-五指针.md","children":[{"title":"1. 指针的基本概念","level":2,"id":"017-1 指针的基本概念.md","children":[]},{"title":"2. 指针的运算","level":2,"id":"018-2 指针的运算.md","children":[]},{"title":"3. 指针与数组","level":2,"id":"019-3 指针与数组.md","children":[]},{"title":"4. 指针与字符串","level":2,"id":"020-4 指针与字符串.md","children":[]},{"title":"5. 指针与函数","level":2,"id":"021-5 指针与函数.md","children":[]},{"title":"6. 动态内存分配","level":2,"id":"022-6 动态内存分配.md","children":[]}]},{"title":"六、结构体与联合体","level":1,"id":"023-六结构体与联合体.md","children":[{"title":"1. 结构体","level":2,"id":"024-1 结构体.md","children":[]},{"title":"2. 联合体","level":2,"id":"025-2 联合体.md","children":[]},{"title":"3. 枚举类型","level":2,"id":"026-3 枚举类型.md","children":[]},{"title":"4. 位域","level":2,"id":"027-4 位域.md","children":[]}]},{"title":"七、文件操作","level":1,"id":"028-七文件操作.md","children":[{"title":"1. 文件的基本概念","level":2,"id":"029-1 文件的基本概念.md","children":[]},{"title":"2. 文件的读写操作","level":2,"id":"030-2 文件的读写操作.md","children":[]},{"title":"3. 文件定位","level":2,"id":"031-3 文件定位.md","children":[]}]},{"title":"八、预处理指令","level":1,"id":"032-八预处理指令.md","children":[{"title":"1. 宏定义","level":2,"id":"033-1 宏定义.md","children":[]},{"title":"2. 条件编译","level":2,"id":"034-2 条件编译.md","children":[]},{"title":"3. 文件包含","level":2,"id":"035-3 文件包含.md","children":[]}]},{"title":"九、内存管理","level":1,"id":"036-九内存管理.md","children":[{"title":"1. 内存布局","level":2,"id":"037-1 内存布局.md","children":[]},{"title":"2. 内存泄漏与预防","level":2,"id":"038-2 内存泄漏与预防.md","children":[]}]},{"title":"十、数据结构","level":1,"id":"039-十数据结构.md","children":[{"title":"1. 链表（Linked List）","level":2,"id":"040-1 链表Linked List.md","children":[]},{"title":"2. 栈（Stack）","level":2,"id":"041-2 栈Stack.md","children":[]},{"title":"3. 队列（Queue）","level":2,"id":"042-3 队列Queue.md","children":[]},{"title":"4. 树（Tree）","level":2,"id":"043-4 树Tree.md","children":[]}]},{"title":"十二、线程与并发","level":1,"id":"044-十二线程与并发.md","children":[{"title":"1. 线程的基本概念","level":2,"id":"045-1 线程的基本概念.md","children":[]},{"title":"2. 使用 POSIX 线程（`pthread`）","level":2,"id":"046-2 使用 POSIX 线程pthread.md","children":[]},{"title":"3. 使用 Windows API","level":2,"id":"047-3 使用 Windows API.md","children":[]},{"title":"4. 线程同步","level":2,"id":"048-4 线程同步.md","children":[]},{"title":"总结","level":2,"id":"049-总结.md","children":[]}]},{"title":"十三、错误处理","level":1,"id":"050-十三错误处理.md","children":[{"title":"1. 错误检测与调试技巧","level":2,"id":"051-1 错误检测与调试技巧.md","children":[]},{"title":"2. `errno` 的使用","level":2,"id":"052-2 errno 的使用.md","children":[]},{"title":"总结","level":2,"id":"053-总结.md","children":[]}]},{"title":"十、综合练习与项目实践","level":1,"id":"054-十综合练习与项目实践.md","children":[]},{"title":"十一、常见面试题与注意事项","level":1,"id":"055-十一常见面试题与注意事项.md","children":[]}]')}},t={};function n(a){var c=t[a];if(void 0!==c)return c.exports;var l=t[a]={exports:{}};return e[a].call(l.exports,l,l.exports,n),l.exports}n.m=e,function(){var e=[];n.O=function(t,a,c,l){if(!a){var i=1/0;for(s=0;s<e.length;s++){a=e[s][0],c=e[s][1],l=e[s][2];for(var d=!0,o=0;o<a.length;o++)(!1&l||i>=l)&&Object.keys(n.O).every((function(e){return n.O[e](a[o])}))?a.splice(o--,1):(d=!1,l<i&&(i=l));if(d){e.splice(s--,1);var r=c();void 0!==r&&(t=r)}}return t}l=l||0;for(var s=e.length;s>0&&e[s-1][2]>l;s--)e[s]=e[s-1];e[s]=[a,c,l]}}(),function(){n.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return n.d(t,{a:t}),t}}(),function(){n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}}(),function(){n.f={},n.e=function(e){return Promise.all(Object.keys(n.f).reduce((function(t,a){return n.f[a](e,t),t}),[]))}}(),function(){n.u=function(e){return"js/"+e+"."+{0:"da7b80d0",22:"0b58a41e",40:"173fd73c",71:"46dd1562",99:"47a13168",111:"ed5c052d",112:"b5752ad7",118:"ab117f28",129:"cc08fe33",132:"b8eab3e6",241:"8495114e",287:"6f7d75de",296:"a7af3dbc",328:"47b85927",334:"a445d784",355:"f53812b9",381:"864b7fe3",383:"039f8cd2",408:"4f66c498",414:"4e406975",466:"ba843e80",471:"90f527bb",496:"52688be1",511:"d8b24225",565:"e8bb8ba3",566:"5928f725",572:"e925d96e",574:"2ec795f4",595:"61b45d18",644:"24dca8f8",722:"2cd07084",740:"0c1bb943",753:"a498be77",797:"32df3c03",809:"c104f648",810:"e412da91",847:"05a0c8ff",866:"5a720699",872:"d24819b1",903:"3e5f50e7",911:"de791f25",920:"7f975f53",1069:"7c7ebb3e",1102:"e1d1db59",1104:"81d27585",1113:"e680281e",1173:"0bb3f6be",1194:"873759de",1214:"0d5eb68d",1215:"b77c9fc7",1235:"a3799995",1304:"38367ed5",1339:"b99526c0",1364:"e53fbf48",1371:"f5ef0a14",1380:"975cafe3",1397:"1d1ee6e3",1406:"aeac44e9",1409:"631dcb93",1428:"c273b46c",1440:"839c087d",1471:"c4d7a00b",1473:"c5be5044",1476:"c2cab80d",1477:"b37ac002",1586:"0c144a82",1587:"73148fa2",1590:"c44a3c5d",1600:"a33e6947",1624:"455e7a07",1645:"e80c5284",1725:"cc9f71f5",1731:"93bd515f",1734:"b26dd1cd",1754:"f3be08f4",1817:"137b45a7",1828:"6d6e9b99",1850:"bcd6c39b",1855:"0103c306",1864:"6997181e",1873:"7c86af24",1917:"340a2e05",1921:"df4813de",1922:"2f4bbcf5",1954:"aed26ca5",2007:"9f7a6d41",2019:"2677f6fd",2069:"cbb3c72a",2091:"c76e1390",2095:"53311549",2096:"8328e9f8",2125:"ef158602",2132:"c5d7a445",2153:"efe5ddcf",2173:"2268fa6e",2202:"9de86f85",2320:"5a491dda",2333:"64e3401d",2346:"4969abd9",2399:"c5643940",2423:"f39029a9",2435:"8f951917",2510:"409c1efb",2512:"cd8b8c52",2514:"3e21dbaf",2518:"d4b57ddf",2522:"efffc8f6",2542:"4a01e9c2",2622:"9707d6cf",2646:"c75751d4",2648:"d9785ddf",2650:"a30f0569",2677:"dfd43890",2679:"495b9bc5",2685:"b6ca16e8",2689:"2957d78c",2785:"e618f033",2799:"5421b399",2833:"41ad909b",2845:"bb78dbe0",2849:"6b3afeb4",2874:"dc060e3f",2882:"671c29ce",2893:"6eee5388",2901:"8d97a2b9",2995:"f12d812f",3057:"a0180564",3094:"9f684737",3110:"6f80a89e",3125:"721010b1",3165:"d9b4d2fe",3171:"c72fb2a1",3176:"ffe1ccb3",3202:"ba79e500",3238:"8915cdae",3261:"7d9ddc43",3274:"e3412d14",3286:"5ff023de",3296:"2c9bdd50",3329:"1491a789",3349:"07733ac0",3366:"17d02e41",3371:"c9837b92",3382:"2cf2aa0d",3389:"fac99388",3437:"93b8c5d7",3442:"7a66ca6f",3456:"1d176c69",3472:"124d2266",3513:"a2d5ccdb",3517:"5814f078",3530:"d9eaafcd",3534:"422435f9",3542:"9acff1d2",3551:"da38f5e9",3594:"d4bbbab4",3613:"14792652",3614:"25e6f8c7",3615:"e881599d",3652:"a8c4f5c6",3654:"c8e70710",3726:"7b564766",3753:"f69836c2",3767:"420bdb87",3804:"964d4ff9",3805:"a040255c",3818:"a8e90bf3",3820:"7265f303",3833:"09a74699",3853:"771ecdb0",3894:"aadb8967",3916:"2f15cb7f",3923:"d23cabcf",3974:"8879c607",3985:"14b7f461",3995:"56bada0c",4002:"babe87e9",4051:"6197358c",4107:"11e52bb0",4146:"51e12ae0",4161:"d4e8fb16",4197:"da0bfb87",4205:"317a4308",4214:"0ccedb57",4218:"beae771a",4257:"bae02a71",4274:"5d40c0d1",4299:"850815dd",4331:"1ee17923",4341:"c818fbf9",4362:"9aa0003f",4407:"6fe464d2",4435:"0fdda32e",4439:"f3d8bce5",4442:"bb552f95",4466:"d849c8f1",4472:"8144e833",4480:"8075f327",4489:"67b214be",4491:"d525159e",4512:"4b379616",4562:"53caebbb",4569:"9ee605d0",4612:"17256e70",4625:"6c95d2ef",4628:"910d4d6c",4660:"4234467d",4672:"5b7371b8",4674:"e4236b1a",4682:"ca4e6b9f",4697:"a5613d4f",4699:"bf99b1bd",4707:"53790ca6",4731:"9559c813",4751:"6389894c",4773:"b2b3c127",4806:"0a3b1682",4810:"2ff3391b",4839:"a6b75214",4849:"6e50e0aa",4870:"1be1f3ff",4881:"45347dbf",4886:"bd5e0a5c",4898:"5ca0ac9f",4925:"04bc8074",4927:"ae65ef59",4939:"bb1143df",5e3:"b6e6fc71",5015:"610ef618",5037:"a71657fe",5038:"a9994cf1",5068:"c26e213f",5077:"b7683e69",5106:"cda46a09",5119:"edf2c4a9",5124:"5caaf6de",5125:"ab62f2f6",5130:"6b730813",5143:"5d6784c7",5146:"9343bc8f",5180:"4506f290",5215:"af86e104",5227:"4f8aff04",5245:"bf04d014",5333:"fd700d5a",5339:"cbdcbff9",5363:"d0ca929c",5374:"27e07385",5396:"334d65a6",5414:"39b37b66",5417:"80ad9e32",5441:"5de68c41",5447:"5adb4c21",5456:"9ba196c4",5461:"0b138c79",5478:"c0af70cb",5484:"c11c16df",5509:"1d0b1e2c",5591:"3cdb2a57",5806:"99d5ff12",5889:"c5acb0bb",5897:"10eaca51",5900:"396f266c",5912:"42b55342",5961:"9d6d246a",5971:"afc912a3",5972:"5588c2ce",5975:"89b1ba85",5999:"14ddbad9",6008:"3ca0228e",6024:"748dd22d",6054:"3f3bca6e",6085:"19d83ce5",6087:"c5a9a261",6099:"afda1142",6133:"90b57d5b",6134:"b3e9564a",6165:"a9b4df3d",6172:"bbcae8c8",6190:"5b93759d",6200:"647119db",6201:"e9fbb5aa",6202:"ccab7b3f",6258:"0a8bfe1b",6292:"c55b3ad6",6339:"ac6228d8",6350:"fd1f5306",6381:"474defd7",6407:"37b5f915",6415:"cc5be21a",6425:"f9c6641f",6449:"912e60c2",6459:"0f6e0b55",6488:"7db9bbc7",6493:"e6bdd0ed",6513:"7a14d2cb",6533:"d82cf0fb",6543:"011b7587",6556:"433bdea5",6596:"dd32ad8a",6615:"21d82f58",6647:"756e7c0c",6660:"c848e9cf",6679:"84e98936",6717:"d0174f90",6726:"e8936c26",6753:"f09771ac",6758:"f01b830a",6769:"3ead08f6",6772:"10b9fa11",6891:"8b850d78",6928:"3b2da633",6955:"0f2189e9",7036:"0a27a1b2",7038:"730719c4",7053:"b9076814",7061:"d232d3b2",7090:"44e34c54",7102:"9516dc4d",7117:"f1f88c9b",7121:"fd9e2751",7166:"c474e7b2",7183:"7b360b03",7224:"b256b4a7",7228:"7b1ae892",7237:"e7d246be",7257:"862b0273",7296:"260ac4a7",7343:"67f7a796",7344:"0a066c7f",7364:"54a74c42",7400:"108d754c",7432:"b7aee3ef",7451:"0101edd4",7458:"3b042bcd",7473:"db1282e3",7487:"a3c9e9c1",7502:"ddd8391a",7504:"fe128c8e",7508:"086a5c24",7521:"ccd2b70f",7536:"ecc64e85",7545:"b340102f",7566:"58699256",7574:"90b9122e",7577:"56fbe6c6",7581:"5f4b23b7",7584:"46ac36df",7585:"b31627e9",7588:"63c45b1b",7601:"fab70f9c",7634:"c39b2e32",7639:"2db40990",7641:"8a0bdf85",7708:"05135df4",7711:"006b5cf3",7734:"1b07d95a",7768:"7182b235",7813:"9da8c58b",7816:"4960d2f2",7828:"243d74b8",7830:"5044a8e8",7845:"ce5a891a",7875:"d421fd30",7915:"edee7801",7922:"ffeb81c5",7926:"663b340e",7937:"eeacc21b",7981:"74aacaa0",8030:"1bfcb01e",8036:"a9a7b940",8046:"601d932d",8049:"ae36806a",8057:"1ef99371",8060:"ed2f02d3",8064:"6b20a86b",8082:"86180fa2",8085:"5edefd60",8090:"2e105740",8211:"bb9c1fdb",8225:"8dc0c067",8240:"abfdec42",8254:"18481b75",8298:"4b3d31cb",8335:"44409390",8362:"c64bd81d",8374:"46f97add",8398:"9b3b0e89",8401:"f532e658",8413:"54b2eddf",8429:"e2578cd2",8451:"cc5e540d",8460:"e41dfa40",8499:"89ebe7b4",8504:"620db037",8505:"f8054e6f",8521:"dbc7e91d",8541:"7c9a925a",8575:"37d06089",8576:"10c05c26",8607:"ae0767f6",8649:"86c65eb2",8654:"7818b74d",8657:"3deaf6b6",8686:"7b9a0e49",8779:"d309615a",8780:"640f70cc",8788:"676031e5",8796:"4bc881b8",8825:"b0ca3247",8861:"03d5b61a",8903:"2bfd5b8c",8915:"473fa8d9",8924:"f0ee0eb0",8942:"1b608884",8978:"5a1181f2",8993:"af29d31b",8996:"8433528b",9007:"3ebe9999",9052:"8d961cef",9081:"4b9e87fb",9151:"4a47f8e1",9165:"fc717b9f",9171:"50f06019",9172:"c4f6db3a",9191:"a814377c",9228:"501c0d4d",9234:"8676c6e0",9242:"577118ef",9326:"862d145b",9332:"db379981",9336:"19f15d96",9366:"99439ab2",9416:"a467eced",9434:"f7fb9622",9443:"48cee137",9444:"c39fb60f",9470:"b048f21b",9496:"7015763b",9497:"e467d2b9",9562:"ec555d0e",9591:"5dc7b1af",9605:"4364717e",9613:"aa9d7ccf",9616:"c27cd375",9640:"6de6d978",9677:"669f71e6",9690:"7352d01f",9703:"f6904f9b",9708:"67a84083",9718:"77f71201",9735:"703c496e",9736:"5368fc4c",9748:"9cef11bd",9759:"a49cbe4f",9765:"ebfea237",9798:"208fe2e6",9799:"c71aa586",9805:"2e6e0f62",9807:"f4688f81",9855:"75766f3f",9924:"169e6ac0",9962:"624a85fe"}[e]+".js"}}(),function(){n.miniCssF=function(e){}}(),function(){n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={},t="myblog:";n.l=function(a,c,l,i){if(e[a])e[a].push(c);else{var d,o;if(void 0!==l)for(var r=document.getElementsByTagName("script"),s=0;s<r.length;s++){var m=r[s];if(m.getAttribute("src")==a||m.getAttribute("data-webpack")==t+l){d=m;break}}d||(o=!0,d=document.createElement("script"),d.charset="utf-8",d.timeout=120,n.nc&&d.setAttribute("nonce",n.nc),d.setAttribute("data-webpack",t+l),d.src=a),e[a]=[c];var p=function(t,n){d.onerror=d.onload=null,clearTimeout(h);var c=e[a];if(delete e[a],d.parentNode&&d.parentNode.removeChild(d),c&&c.forEach((function(e){return e(n)})),t)return t(n)},h=setTimeout(p.bind(null,void 0,{type:"timeout",target:d}),12e4);d.onerror=p.bind(null,d.onerror),d.onload=p.bind(null,d.onload),o&&document.head.appendChild(d)}}}(),function(){n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){n.p="/"}(),function(){var e={3524:0};n.f.j=function(t,a){var c=n.o(e,t)?e[t]:void 0;if(0!==c)if(c)a.push(c[2]);else{var l=new Promise((function(n,a){c=e[t]=[n,a]}));a.push(c[2]=l);var i=n.p+n.u(t),d=new Error,o=function(a){if(n.o(e,t)&&(c=e[t],0!==c&&(e[t]=void 0),c)){var l=a&&("load"===a.type?"missing":a.type),i=a&&a.target&&a.target.src;d.message="Loading chunk "+t+" failed.\n("+l+": "+i+")",d.name="ChunkLoadError",d.type=l,d.request=i,c[1](d)}};n.l(i,o,"chunk-"+t,t)}},n.O.j=function(t){return 0===e[t]};var t=function(t,a){var c,l,i=a[0],d=a[1],o=a[2],r=0;if(i.some((function(t){return 0!==e[t]}))){for(c in d)n.o(d,c)&&(n.m[c]=d[c]);if(o)var s=o(n)}for(t&&t(a);r<i.length;r++)l=i[r],n.o(e,l)&&e[l]&&e[l][0](),e[l]=0;return n.O(s)},a=self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))}();var a=n.O(void 0,[504],(function(){return n(98317)}));a=n.O(a)})();
//# sourceMappingURL=app.c51d088a.js.map