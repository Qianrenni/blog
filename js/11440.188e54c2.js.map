{"version":3,"file":"js/11440.188e54c2.js","mappings":"qHAAA,u8B","sources":["webpack://myblog/./src/assets/md/java/content/020-5 工具类.md"],"sourcesContent":["export default \"## **5. 工具类**\\r\\n\\r\\n### **5.1 Collections 工具类**\\r\\n\\r\\n- **常用方法**：\\r\\n  - `sort(List<T> list)`：对列表进行排序。\\r\\n  - `reverse(List<T> list)`：反转列表。\\r\\n  - `shuffle(List<T> list)`：随机打乱列表。\\r\\n  - `synchronizedList(List<T> list)`：返回线程安全的列表。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  List<Integer> list = new ArrayList<>(Arrays.asList(3, 1, 2));\\r\\n  Collections.sort(list); // 排序\\r\\n  System.out.println(list); // 输出：[1, 2, 3]\\r\\n\\r\\n  Collections.reverse(list); // 反转\\r\\n  System.out.println(list); // 输出：[3, 2, 1]\\r\\n  ```\\r\\n\\r\\n### **5.2 Arrays 工具类**\\r\\n\\r\\n- **常用方法**：\\r\\n  - `sort(T[] array)`：对数组进行排序。\\r\\n  - `binarySearch(T[] array, T key)`：在已排序数组中查找元素。\\r\\n  - `asList(T... a)`：将数组转换为列表。\\r\\n- **示例**：\\r\\n\\r\\n  ```java\\r\\n  int[] array = {3, 1, 2};\\r\\n  Arrays.sort(array); // 排序\\r\\n  System.out.println(Arrays.toString(array)); // 输出：[1, 2, 3]\\r\\n\\r\\n  int index = Arrays.binarySearch(array, 2); // 查找\\r\\n  System.out.println(index); // 输出：1\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}