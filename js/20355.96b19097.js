"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[20355],{20355:function(r,n,e){e.r(n),n["default"]='## **加密与解密**\r\n\r\n加密与解密是计算机科学和密码学领域中的一个重要概念。加密是指将原始信息转换为不可读的格式的过程，而解密则是将加密后的信息恢复为原始信息的过程。加密的目的是为了保护信息免受未经授权的访问和修改。\r\n\r\n**示例**\r\n\r\n```python\r\nfrom Crypto.PublicKey import RSA\r\nfrom Crypto.Cipher import PKCS1_OAEP\r\nfrom Crypto.Random import get_random_bytes\r\n\r\n# 生成 RSA 密钥对\r\nkey = RSA.generate(2048)\r\nprivate_key = key.export_key()\r\npublic_key = key.publickey().export_key()\r\n\r\ndef encrypt_rsa(plaintext, public_key):\r\n    # 导入公钥并创建加密器\r\n    rsa_key = RSA.import_key(public_key)\r\n    cipher = PKCS1_OAEP.new(rsa_key)\r\n    ciphertext = cipher.encrypt(plaintext.encode())\r\n    return ciphertext\r\n\r\ndef decrypt_rsa(ciphertext, private_key):\r\n    # 导入私钥并创建解密器\r\n    rsa_key = RSA.import_key(private_key)\r\n    cipher = PKCS1_OAEP.new(rsa_key)\r\n    plaintext = cipher.decrypt(ciphertext)\r\n    return plaintext.decode()\r\n\r\n# 测试加密和解密\r\nplaintext = "This is a secret message encrypted with RSA!"\r\nprint("Original:", plaintext)\r\n\r\nciphertext = encrypt_rsa(plaintext, public_key)\r\nprint("Encrypted:", ciphertext)\r\n\r\ndecrypted_text = decrypt_rsa(ciphertext, private_key)\r\nprint("Decrypted:", decrypted_text)\r\n```\r\n\r\n对于对称加密和非对称加密，有许多不同的算法可供选择。以下是一些常见的对称加密和非对称加密算法的例子：\r\n\r\n### 对称加密算法\r\n\r\n1. **AES (Advanced Encryption Standard)**\r\n   - 高级加密标准，是目前最常用的对称加密算法之一。\r\n   - 支持128、192或256位密钥长度。\r\n   - 广泛应用于数据加密，包括文件加密、数据库加密等。\r\n\r\n2. **DES (Data Encryption Standard) 和 3DES (Triple DES)**\r\n   - DES是一种较老的对称加密算法，使用56位密钥，由于密钥长度较短，现在已不安全。\r\n   - 3DES通过应用DES三次来增加安全性，但速度较慢，逐渐被AES取代。\r\n\r\n3. **ChaCha20**\r\n   - 一种流加密算法，设计用于提高软件实现的速度和安全性。\r\n   - 在移动设备和网络协议中广泛应用，如在TLS 1.3中作为推荐的加密算法之一。\r\n\r\n4. **Blowfish 和 Twofish**\r\n   - Blowfish是一个可变密钥大小的块密码算法，支持从32到448位的密钥长度。\r\n   - Twofish是Blowfish的后继者，支持128位块大小和高达256位的密钥长度。\r\n\r\n### 非对称加密算法\r\n\r\n1. **RSA (Rivest-Shamir-Adleman)**\r\n   - 最早广泛使用的公钥加密技术之一。\r\n   - 常用于数字签名、密钥交换等场合。密钥长度通常为2048位或更高以确保安全性。\r\n\r\n2. **ECC (Elliptic Curve Cryptography)**\r\n   - 椭圆曲线密码学，提供与RSA相似的安全性，但所需的密钥长度更短（例如，256位的ECC密钥被认为与3072位的RSA密钥同样安全）。\r\n   - 更适合于资源受限的环境，如移动设备。\r\n\r\n3. **DSA (Digital Signature Algorithm)**\r\n   - 主要用于数字签名，而不是通用的数据加密。\r\n   - DSA只能用来创建和验证数字签名，不能用于加密消息本身。\r\n\r\n4. **Diffie-Hellman 密钥交换**\r\n   - 虽然不是直接的加密算法，但它提供了一种方法让双方可以安全地建立共享的秘密密钥，而无需事先交换任何秘密信息。\r\n   - 经常与其它加密算法结合使用，尤其是在SSL/TLS协议中用于密钥协商。'}}]);
//# sourceMappingURL=20355.96b19097.js.map