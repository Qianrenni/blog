"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[51922],{51922:function(n,r,l){l.r(r),r["default"]='## **运算符**\r\n\r\nJavaScript 的运算符是语言的核心部分，用于执行各种操作（如数学计算、比较、逻辑判断等）。以下是 JavaScript 中常见的运算符分类及其详细说明。\r\n\r\n---\r\n\r\n### **1. 算术运算符**\r\n\r\n算术运算符用于执行数学计算，支持基本的加减乘除和取模操作。\r\n\r\n#### **常用算术运算符**\r\n\r\n- **`+`**：加法\r\n  - 可以用于数字相加，也可以用于字符串拼接。\r\n\r\n    ```javascript\r\n    console.log(5 + 3); // 输出 8\r\n    console.log("Hello " + "World"); // 输出 "Hello World"\r\n    ```\r\n\r\n- **`-`**：减法\r\n  - 仅用于数字之间的减法操作。\r\n\r\n    ```javascript\r\n    console.log(10 - 3); // 输出 7\r\n    ```\r\n\r\n- **`*`**：乘法\r\n  - 用于数字之间的乘法操作。\r\n\r\n    ```javascript\r\n    console.log(4 * 5); // 输出 20\r\n    ```\r\n\r\n- **`/`**：除法\r\n  - 用于数字之间的除法操作，结果为浮点数。\r\n\r\n    ```javascript\r\n    console.log(10 / 2); // 输出 5\r\n    console.log(10 / 3); // 输出 3.3333333333333335\r\n    ```\r\n\r\n- **`%`**：取模（求余）\r\n  - 返回两个数字相除后的余数。\r\n\r\n    ```javascript\r\n    console.log(10 % 3); // 输出 1\r\n    console.log(9 % 3); // 输出 0\r\n    ```\r\n\r\n#### **特殊行为**\r\n\r\n- **一元运算符**：\r\n  - **`+`**：将值转换为数字。\r\n\r\n    ```javascript\r\n    console.log(+"123"); // 输出 123\r\n    console.log(+"abc"); // 输出 NaN\r\n    ```\r\n\r\n  - **`-`**：将值转换为负数或负的数字。\r\n\r\n    ```javascript\r\n    console.log(-"123"); // 输出 -123\r\n    console.log(-"abc"); // 输出 NaN\r\n    ```\r\n\r\n- **自增/自减运算符**：\r\n  - **`++`** 和 **`--`**：分别用于增加或减少变量的值。\r\n\r\n    ```javascript\r\n    let x = 5;\r\n    console.log(x++); // 输出 5（后置自增，先返回原值再递增）\r\n    console.log(++x); // 输出 7（前置自增，先递增再返回新值）\r\n\r\n    let y = 5;\r\n    console.log(y--); // 输出 5（后置自减，先返回原值再递减）\r\n    console.log(--y); // 输出 3（前置自减，先递减再返回新值）\r\n    ```\r\n\r\n---\r\n\r\n### **2. 比较运算符**\r\n\r\n比较运算符用于比较两个值，返回布尔值 `true` 或 `false`。\r\n\r\n#### **常用比较运算符**\r\n\r\n- **`==`**：宽松等于（只比较值，不比较类型）。\r\n  - 如果类型不同，会尝试进行类型转换后再比较。\r\n\r\n    ```javascript\r\n    console.log(5 == "5"); // 输出 true（字符串 "5" 被转换为数字 5）\r\n    console.log(false == 0); // 输出 true（false 被转换为数字 0）\r\n    ```\r\n\r\n- **`===`**：严格等于（既比较值，又比较类型）。\r\n  - 不会进行类型转换。\r\n\r\n    ```javascript\r\n    console.log(5 === "5"); // 输出 false（类型不同）\r\n    console.log(false === 0); // 输出 false（类型不同）\r\n    ```\r\n\r\n- **`!=`**：宽松不等于（只比较值，不比较类型）。\r\n  - 类型不同会尝试转换后再比较。\r\n\r\n    ```javascript\r\n    console.log(5 != "5"); // 输出 false\r\n    ```\r\n\r\n- **`!==`**：严格不等于（既比较值，又比较类型）。\r\n  - 不会进行类型转换。\r\n\r\n    ```javascript\r\n    console.log(5 !== "5"); // 输出 true\r\n    ```\r\n\r\n- **`>`**、**`<`**、**`>=`**、**`<=`**：大于、小于、大于等于、小于等于。\r\n  - 支持数字和字符串的比较。\r\n\r\n    ```javascript\r\n    console.log(5 > 3); // 输出 true\r\n    console.log("apple" < "banana"); // 输出 true（按字典顺序比较）\r\n    ```\r\n\r\n#### **注意事项**\r\n\r\n- **`NaN` 的比较**：\r\n  - `NaN` 是唯一一个与自身不相等的值。\r\n\r\n    ```javascript\r\n    console.log(NaN == NaN); // 输出 false\r\n    console.log(NaN === NaN); // 输出 false\r\n    ```\r\n\r\n  - 使用 `isNaN()` 或 `Number.isNaN()` 来检测 `NaN`。\r\n\r\n    ```javascript\r\n    console.log(isNaN(NaN)); // 输出 true\r\n    console.log(Number.isNaN(NaN)); // 输出 true\r\n    ```\r\n\r\n---\r\n\r\n### **3. 逻辑运算符**\r\n\r\n逻辑运算符用于组合多个条件表达式，返回布尔值 `true` 或 `false`。\r\n\r\n#### **常用逻辑运算符**\r\n\r\n- **`&&`**：逻辑与（AND）\r\n  - 当所有条件都为 `true` 时，返回最后一个条件的值；否则返回第一个为 `false` 的值。\r\n\r\n    ```javascript\r\n    console.log(true && false); // 输出 false\r\n    console.log(5 && 10); // 输出 10（因为 5 和 10 都为真值）\r\n    console.log(null && "hello"); // 输出 null（null 为假值）\r\n    ```\r\n\r\n- **`||`**：逻辑或（OR）\r\n  - 当任意一个条件为 `true` 时，返回第一个为 `true` 的值；否则返回最后一个假值。\r\n\r\n    ```javascript\r\n    console.log(true || false); // 输出 true\r\n    console.log(0 || "hello"); // 输出 "hello"（0 为假值）\r\n    console.log(null || undefined); // 输出 undefined（两者均为假值）\r\n    ```\r\n\r\n- **`!`**：逻辑非（NOT）\r\n  - 将布尔值取反。\r\n\r\n    ```javascript\r\n    console.log(!true); // 输出 false\r\n    console.log(!false); // 输出 true\r\n    console.log(!0); // 输出 true（0 被视为假值）\r\n    console.log(!"hello"); // 输出 false（非空字符串被视为真值）\r\n    ```\r\n\r\n#### **短路特性**\r\n\r\n- **`&&`** 和 **`||`** 具有短路特性：\r\n  - **`&&`**：如果左侧为 `false`，直接返回左侧值，不再计算右侧。\r\n  - **`||`**：如果左侧为 `true`，直接返回左侧值，不再计算右侧。\r\n\r\n    ```javascript\r\n    const result = (false && console.log("This won\'t run")); // 不会打印\r\n    const result2 = (true || console.log("This won\'t run either")); // 不会打印\r\n    ```\r\n\r\n---\r\n\r\n### **4. 赋值运算符**\r\n\r\n赋值运算符用于给变量赋值或更新值。\r\n\r\n#### **常用赋值运算符**\r\n\r\n- **`=`**：简单赋值。\r\n\r\n  ```javascript\r\n  let x = 10;\r\n  console.log(x); // 输出 10\r\n  ```\r\n\r\n- **复合赋值运算符**：\r\n  - **`+=`**：加后赋值。\r\n\r\n    ```javascript\r\n    let x = 5;\r\n    x += 3; // 等价于 x = x + 3\r\n    console.log(x); // 输出 8\r\n    ```\r\n\r\n  - **`-=`**：减后赋值。\r\n\r\n    ```javascript\r\n    let x = 10;\r\n    x -= 4; // 等价于 x = x - 4\r\n    console.log(x); // 输出 6\r\n    ```\r\n\r\n  - **`*=`**：乘后赋值。\r\n\r\n    ```javascript\r\n    let x = 3;\r\n    x *= 5; // 等价于 x = x * 5\r\n    console.log(x); // 输出 15\r\n    ```\r\n\r\n  - **`/=`**：除后赋值。\r\n\r\n    ```javascript\r\n    let x = 10;\r\n    x /= 2; // 等价于 x = x / 2\r\n    console.log(x); // 输出 5\r\n    ```\r\n\r\n  - **`%=`**：取模后赋值。\r\n\r\n    ```javascript\r\n    let x = 10;\r\n    x %= 3; // 等价于 x = x % 3\r\n    console.log(x); // 输出 1\r\n    ```\r\n\r\n---\r\n\r\n### **5. 特殊运算符**\r\n\r\n#### **空值合并运算符（`??`）**\r\n\r\n- **用途**：用于处理 `null` 或 `undefined` 的情况，返回第一个非 `null` 或 `undefined` 的值。\r\n\r\n  ```javascript\r\n  const value = null ?? "default";\r\n  console.log(value); // 输出 "default"\r\n\r\n  const value2 = "hello" ?? "default";\r\n  console.log(value2); // 输出 "hello"\r\n  ```\r\n\r\n#### **可选链运算符（`?.`）**\r\n\r\n- **用途**：用于安全地访问对象的属性或方法，避免因中间某个属性不存在而导致报错。\r\n\r\n  ```javascript\r\n  const user = {\r\n      name: "Alice",\r\n      address: {\r\n          city: "Wonderland"\r\n      }\r\n  };\r\n\r\n  console.log(user.address?.city); // 输出 "Wonderland"\r\n  console.log(user.phone?.number); // 输出 undefined（不会报错）\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=51922.4430a11f.js.map