"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[71855],{71855:function(n,r,i){i.r(r),r["default"]='## **4. 递归函数**\r\n\r\n### **4.1 递归的基本原理**\r\n\r\n递归是指函数直接或间接调用自身的过程。递归函数通常包含两个部分：\r\n\r\n- **基准条件（Base Case）**：停止递归的条件。\r\n- **递归步骤（Recursive Step）**：调用自身解决子问题。\r\n\r\n- **示例**：\r\n  计算阶乘：\r\n\r\n  ```cpp\r\n  int factorial(int n) {\r\n      if (n <= 1) { // 基准条件\r\n          return 1;\r\n      }\r\n      return n * factorial(n - 1); // 递归步骤\r\n  }\r\n\r\n  int main() {\r\n      cout << "Factorial of 5: " << factorial(5) << endl; // 输出：120\r\n  }\r\n  ```\r\n\r\n### **4.2 经典递归问题**\r\n\r\n- **斐波那契数列**：\r\n  斐波那契数列定义为：`F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2)`。\r\n\r\n  ```cpp\r\n  int fibonacci(int n) {\r\n      if (n == 0) {\r\n          return 0;\r\n      }\r\n      if (n == 1) {\r\n          return 1;\r\n      }\r\n      return fibonacci(n - 1) + fibonacci(n - 2);\r\n  }\r\n\r\n  int main() {\r\n      cout << "Fibonacci of 6: " << fibonacci(6) << endl; // 输出：8\r\n  }\r\n  ```\r\n\r\n- **注意事项**：\r\n  - 递归可能导致栈溢出，应避免深度过大的递归。\r\n  - 对于性能要求高的场景，可以使用迭代代替递归。\r\n\r\n---'}}]);
//# sourceMappingURL=71855.bb0606b5.js.map