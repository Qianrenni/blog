"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[2514],{12514:function(n,r,p){p.r(r),r["default"]='## **1. 指针的基本概念**\r\n\r\n### **1.1 指针的定义与初始化**\r\n\r\n#### **1. 定义**\r\n\r\n- 指针是一个变量，用于存储另一个变量的内存地址。\r\n- **语法**：\r\n\r\n  ```c\r\n  type *pointer_name;\r\n  ```\r\n\r\n  - `type`：指针所指向的变量的数据类型。\r\n  - `*`：表示这是一个指针变量。\r\n  - `pointer_name`：指针的名称。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int x = 10;       // 定义一个整型变量\r\n  int *p = &x;      // 定义一个指针 p，并将其初始化为变量 x 的地址\r\n  ```\r\n\r\n#### **2. 初始化**\r\n\r\n- 使用取地址运算符 `&` 获取变量的地址。\r\n- 示例：\r\n\r\n  ```c\r\n  int a = 5;\r\n  int *ptr = &a;  // 初始化指针 ptr，使其指向变量 a\r\n  ```\r\n\r\n#### **3. 访问指针指向的值**\r\n\r\n- 使用解引用运算符 `*` 访问指针指向的值。\r\n- 示例：\r\n\r\n  ```c\r\n  int a = 5;\r\n  int *ptr = &a;\r\n  printf("Value of a: %d\\n", *ptr);  // 输出：5\r\n  ```\r\n\r\n---\r\n\r\n### **1.2 指针与地址的关系**\r\n\r\n- 每个变量在内存中都有一个唯一的地址。\r\n- 指针存储的是变量的地址，而不是变量的值。\r\n- 示例：\r\n\r\n  ```c\r\n  int x = 10;\r\n  int *p = &x;\r\n  printf("Address of x: %p\\n", (void*)&x);  // 输出 x 的地址\r\n  printf("Value of p: %p\\n", (void*)p);     // 输出 p 存储的地址（即 x 的地址）\r\n  printf("Value pointed by p: %d\\n", *p);   // 输出 p 指向的值（即 x 的值）\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=2514.3e21dbaf.js.map