"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[58060],{58060:function(n,r,t){t.r(r),r["default"]='## **CSS 操作**\r\n\r\n在 JavaScript 中，可以通过 DOM 操作动态修改网页的样式。这包括直接操作行内样式（`element.style.property`）或通过类名操作（`classList` 方法）来控制元素的外观。以下是关于 CSS 操作的详细讲解。\r\n\r\n### **1.行内样式`element.style.property`**\r\n\r\n通过 `element.style.property` 可以直接修改元素的行内样式。这种方法简单直观，但不适合复杂的样式管理。\r\n\r\n#### **1.1 基本语法**\r\n\r\n```javascript\r\nelement.style.property = value;\r\n```\r\n\r\n- **`property`**：CSS 属性名称，需使用驼峰命名法（如 `backgroundColor` 对应 CSS 的 `background-color`）。\r\n- **`value`**：属性值，必须是字符串。\r\n\r\n#### **1.2 示例**\r\n\r\n```html\r\n<div id="box">Hello, World!</div>\r\n```\r\n\r\n```javascript\r\nconst box = document.getElementById("box");\r\n\r\n// 修改背景颜色\r\nbox.style.backgroundColor = "lightblue";\r\n\r\n// 修改字体大小\r\nbox.style.fontSize = "20px";\r\n\r\n// 修改边框\r\nbox.style.border = "2px solid black";\r\n```\r\n\r\n#### **1.3 注意事项**\r\n\r\n1. **优先级**：\r\n   - 行内样式具有较高的优先级，会覆盖外部样式表或内部样式表中的规则。\r\n2. **局限性**：\r\n   - 仅适用于简单的样式修改。\r\n   - 如果需要频繁切换样式，建议使用类名操作。\r\n\r\n---\r\n\r\n### **2. 类名操作：`classList`**\r\n\r\n`classList` 是一个更灵活、更强大的工具，用于动态添加、移除或切换类名。它不会直接修改行内样式，而是通过类名间接控制样式。\r\n\r\n#### **2.1 常用方法**\r\n\r\n- **`add`**：\r\n  - 添加一个或多个类名。\r\n  - **语法**：\r\n\r\n    ```javascript\r\n    element.classList.add("className1", "className2");\r\n    ```\r\n\r\n- **`remove`**：\r\n  - 移除一个或多个类名。\r\n  - **语法**：\r\n\r\n    ```javascript\r\n    element.classList.remove("className1", "className2");\r\n    ```\r\n\r\n- **`toggle`**：\r\n  - 切换类名（如果存在则移除，不存在则添加）。\r\n  - **语法**：\r\n\r\n    ```javascript\r\n    element.classList.toggle("className");\r\n    ```\r\n\r\n- **`contains`**：\r\n  - 检查是否包含某个类名，返回布尔值。\r\n  - **语法**：\r\n\r\n    ```javascript\r\n    const hasClass = element.classList.contains("className");\r\n    ```\r\n\r\n#### **2.2 示例**\r\n\r\n```html\r\n<style>\r\n    .highlight {\r\n        background-color: yellow;\r\n    }\r\n    .bold {\r\n        font-weight: bold;\r\n    }\r\n    .hidden {\r\n        display: none;\r\n    }\r\n</style>\r\n\r\n<div id="text">This is a sample text.</div>\r\n<button id="toggleBtn">Toggle Highlight</button>\r\n```\r\n\r\n```javascript\r\nconst text = document.getElementById("text");\r\nconst toggleBtn = document.getElementById("toggleBtn");\r\n\r\n// 添加类名\r\ntext.classList.add("bold");\r\n\r\n// 切换高亮类名\r\ntoggleBtn.addEventListener("click", () => {\r\n    text.classList.toggle("highlight");\r\n});\r\n\r\n// 检查是否包含类名\r\nif (text.classList.contains("bold")) {\r\n    console.log("The text is bold.");\r\n}\r\n\r\n// 移除类名\r\nsetTimeout(() => {\r\n    text.classList.remove("bold");\r\n}, 5000);\r\n```\r\n\r\n#### **2.3 优势**\r\n\r\n1. **分离样式与逻辑**：\r\n   - 通过类名操作，可以将样式定义集中到 CSS 文件中，便于维护和复用。\r\n2. **性能优化**：\r\n   - 类名操作比直接修改行内样式更高效，尤其是在处理复杂样式时。\r\n3. **动态控制**：\r\n   - 支持动态添加、移除或切换多个类名，适合实现交互效果。\r\n\r\n---\r\n\r\n### **3. 综合示例：动态交互效果**\r\n\r\n以下是一个综合示例，展示如何结合行内样式和类名操作实现动态交互效果。\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>CSS 操作示例</title>\r\n    <style>\r\n        .box {\r\n            width: 100px;\r\n            height: 100px;\r\n            background-color: lightblue;\r\n            transition: all 0.3s ease;\r\n        }\r\n        .large {\r\n            width: 200px;\r\n            height: 200px;\r\n        }\r\n        .red {\r\n            background-color: red;\r\n        }\r\n        .hidden {\r\n            display: none;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div id="box" class="box"></div>\r\n    <button id="toggleClassBtn">Toggle Class</button>\r\n    <button id="hideBtn">Hide Box</button>\r\n\r\n    <script>\r\n        const box = document.getElementById("box");\r\n        const toggleClassBtn = document.getElementById("toggleClassBtn");\r\n        const hideBtn = document.getElementById("hideBtn");\r\n\r\n        // 切换类名\r\n        toggleClassBtn.addEventListener("click", () => {\r\n            box.classList.toggle("large");\r\n            box.classList.toggle("red");\r\n        });\r\n\r\n        // 隐藏元素\r\n        hideBtn.addEventListener("click", () => {\r\n            box.classList.add("hidden");\r\n        });\r\n    <\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\n**功能说明**：\r\n\r\n1. 点击“Toggle Class”按钮，动态切换 `.large` 和 `.red` 类名，改变盒子的大小和颜色。\r\n2. 点击“Hide Box”按钮，添加 `.hidden` 类名，隐藏盒子。\r\n\r\n---'}}]);
//# sourceMappingURL=58060.2d111300.js.map