"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[97121],{97121:function(r,n,t){t.r(n),n["default"]='## **2. 使用 POSIX 线程（`pthread`）**\r\n\r\nPOSIX 线程是跨平台的线程库，广泛用于 Linux 和 macOS 系统。\r\n\r\n### **2.1 创建线程**\r\n\r\n- 使用 `pthread_create` 函数创建线程。\r\n- **语法**：\r\n\r\n  ```c\r\n  int pthread_create(pthread_t *thread, const pthread_attr_t *attr,\r\n                     void *(*start_routine)(void *), void *arg);\r\n  ```\r\n\r\n  - `thread`：指向线程标识符的指针。\r\n  - `attr`：线程属性（通常为 `NULL` 表示默认属性）。\r\n  - `start_routine`：线程启动时调用的函数。\r\n  - `arg`：传递给线程函数的参数。\r\n\r\n- **示例**：\r\n\r\n  ```c\r\n  #include <stdio.h>\r\n  #include <pthread.h>\r\n\r\n  void *printMessage(void *message) {\r\n      printf("Thread: %s\\n", (char *)message);\r\n      return NULL;\r\n  }\r\n\r\n  int main() {\r\n      pthread_t thread;\r\n      char *msg = "Hello from thread!";\r\n      \r\n      if (pthread_create(&thread, NULL, printMessage, (void *)msg) != 0) {\r\n          perror("Failed to create thread");\r\n          return -1;\r\n      }\r\n\r\n      // 等待线程结束\r\n      pthread_join(thread, NULL);\r\n\r\n      printf("Main thread finished.\\n");\r\n      return 0;\r\n  }\r\n  ```\r\n\r\n---\r\n\r\n### **2.2 等待线程结束**\r\n\r\n- 使用 `pthread_join` 等待线程完成。\r\n- **语法**：\r\n\r\n  ```c\r\n  int pthread_join(pthread_t thread, void **retval);\r\n  ```\r\n\r\n  - `thread`：要等待的线程。\r\n  - `retval`：存储线程返回值的指针（可选）。\r\n\r\n- **示例**：\r\n\r\n  ```c\r\n  pthread_join(thread, NULL);  // 等待线程结束\r\n  ```\r\n\r\n---\r\n\r\n### **2.3 终止线程**\r\n\r\n- 使用 `pthread_exit` 主动终止线程。\r\n- **语法**：\r\n\r\n  ```c\r\n  void pthread_exit(void *retval);\r\n  ```\r\n\r\n  - `retval`：线程的返回值。\r\n\r\n- **示例**：\r\n\r\n  ```c\r\n  pthread_exit(NULL);\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=97121.47f04800.js.map