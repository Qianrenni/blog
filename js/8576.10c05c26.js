"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[8576],{88576:function(r,n,e){e.r(n),n["default"]="## **4.6 子查询**\r\n\r\n子查询（Subquery）是指在一个SQL查询内部嵌套另一个查询。根据子查询与外部查询的关系，可以将子查询分为嵌套子查询和相关子查询。\r\n\r\n### **嵌套子查询（Non-Correlated Subquery）**\r\n\r\n嵌套子查询也叫做非相关子查询或普通子查询。这种子查询独立于外部查询执行，其结果集在外部查询开始之前就已经确定了。也就是说，嵌套子查询的结果不依赖于外部查询的任何行，它只执行一次，并且其结果被用于外部查询的WHERE或其他子句中。\r\n\r\n**特点：**\r\n\r\n- 独立于外部查询。\r\n- 只执行一次，结果集固定。\r\n- 通常用于比较运算符（如=, <, >等）或者IN、ANY、ALL等关键字中。\r\n\r\n**示例：**\r\n\r\n```sql\r\nSELECT employee_name\r\nFROM employees\r\nWHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales');\r\n```\r\n\r\n### **相关子查询（Correlated Subquery）**\r\n\r\n相关子查询指的是在子查询中引用了外部查询中的值，因此它的执行依赖于外部查询的每一行数据。这意味着对于外部查询返回的每一行，相关子查询都要重新执行一次。由于每次执行都需要访问数据库，这可能导致性能问题，尤其是在处理大数据集时。\r\n\r\n**特点：**\r\n\r\n- 依赖于外部查询的数据。\r\n- 对于外部查询的每一行都会执行一次。\r\n- 通常使用EXISTS、NOT EXISTS、IN、NOT IN等关键字。\r\n\r\n**示例：**\r\n\r\n```sql\r\nSELECT employee_name\r\nFROM employees e\r\nWHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);\r\n```\r\n\r\n在这个例子中，子查询计算的是每个部门的平均工资，而这个平均值是基于外部查询中的`department_id`来决定的，所以对于每一个员工，子查询都会重新计算一次他/她所在部门的平均工资。\r\n\r\n**总结：**\r\n\r\n- **嵌套子查询**更适合那些结果集独立于外部查询的情况，而且如果可能的话，应该尽量使用嵌套子查询，因为它们通常比相关子查询更有效率。\r\n- **相关子查询**则适用于需要针对外部查询的每一条记录进行特定计算或检查的情况。尽管它们可能不如嵌套子查询高效，但在某些情况下，这是实现所需逻辑的唯一方式。\r\n\r\n---"}}]);
//# sourceMappingURL=8576.10c05c26.js.map