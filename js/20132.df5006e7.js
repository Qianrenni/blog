"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[20132],{20132:function(n,r,l){l.r(r),r["default"]='## **4. 多态**\r\n\r\n### **4.1 虚函数与纯虚函数**\r\n\r\n- **虚函数**：\r\n  使用 `virtual` 关键字声明，允许子类重写父类的方法。\r\n\r\n  ```cpp\r\n  class Animal {\r\n  public:\r\n      virtual void sound() { cout << "Animal sound" << endl; }\r\n  };\r\n\r\n  class Dog : public Animal {\r\n  public:\r\n      void sound() override { cout << "Woof!" << endl; }\r\n  };\r\n  ```\r\n\r\n- **纯虚函数**：\r\n  纯虚函数使类成为抽象类，不能实例化。\r\n\r\n  ```cpp\r\n  class Shape {\r\n  public:\r\n      virtual void draw() = 0; // 纯虚函数\r\n  };\r\n  ```\r\n\r\n### **4.2 动态绑定与静态绑定**\r\n\r\n- **动态绑定**：\r\n  在运行时确定调用哪个函数（通过虚函数实现）。\r\n\r\n  ```cpp\r\n  Animal* animal = new Dog();\r\n  animal->sound(); // 输出 "Woof!"\r\n  ```\r\n\r\n- **静态绑定**：\r\n  在编译时确定调用哪个函数。\r\n\r\n  ```cpp\r\n  Dog dog;\r\n  dog.sound(); // 输出 "Woof!"\r\n  ```\r\n\r\n### **4.3 抽象类与接口**\r\n\r\n- **抽象类**：\r\n  包含纯虚函数的类称为抽象类，不能实例化。\r\n\r\n  ```cpp\r\n  class AbstractClass {\r\n  public:\r\n      virtual void func() = 0;\r\n  };\r\n  ```\r\n\r\n- **接口**：\r\n  接口是一个只包含纯虚函数的抽象类。\r\n\r\n  ```cpp\r\n  class Interface {\r\n  public:\r\n      virtual void method1() = 0;\r\n      virtual void method2() = 0;\r\n  };\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=20132.df5006e7.js.map