{"version":3,"file":"js/38779.80f52223.js","mappings":"qHAAA,o6L","sources":["webpack://myblog/./src/assets/md/javascript/content/012-数组操作.md"],"sourcesContent":["export default \"## **数组操作**\\r\\n\\r\\n数组是 JavaScript 中最常用的数据结构之一，用于存储有序的集合。JavaScript 提供了丰富的内置方法来操作数组，包括遍历、查找、修改等。以下是关于数组操作的详细讲解。\\r\\n\\r\\n---\\r\\n\\r\\n### **1. 数组的创建与常用方法**\\r\\n\\r\\n#### **1.1 数组的创建**\\r\\n\\r\\n数组可以通过字面量或构造函数创建。\\r\\n\\r\\n**字面量方式**：\\r\\n\\r\\n```javascript\\r\\nconst arr = [1, 2, 3];\\r\\n```\\r\\n\\r\\n**构造函数方式**：\\r\\n\\r\\n```javascript\\r\\nconst arr = new Array(1, 2, 3);\\r\\n```\\r\\n\\r\\n#### **1.2 常用方法分类**\\r\\n\\r\\n根据功能，数组方法可以分为以下几类：\\r\\n\\r\\n---\\r\\n\\r\\n### **2. 遍历**\\r\\n\\r\\n遍历是指依次访问数组中的每个元素，并对其进行操作。\\r\\n\\r\\n#### **2.1 `forEach`**\\r\\n\\r\\n- **用途**：对数组中的每个元素执行一次回调函数。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  array.forEach(callback(currentValue, index, array));\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3];\\r\\n  numbers.forEach((num, index) => {\\r\\n      console.log(`Index: ${index}, Value: ${num}`);\\r\\n  });\\r\\n  // 输出：\\r\\n  // Index: 0, Value: 1\\r\\n  // Index: 1, Value: 2\\r\\n  // Index: 2, Value: 3\\r\\n  ```\\r\\n\\r\\n#### **2.2 `map`**\\r\\n\\r\\n- **用途**：对数组中的每个元素执行回调函数，并返回一个新数组（不会修改原数组）。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const newArray = array.map(callback(currentValue, index, array));\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3];\\r\\n  const doubled = numbers.map(num => num * 2);\\r\\n  console.log(doubled); // 输出：[2, 4, 6]\\r\\n  ```\\r\\n\\r\\n#### **2.3 `filter`**\\r\\n\\r\\n- **用途**：过滤数组中的元素，返回一个包含满足条件的元素的新数组。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const filteredArray = array.filter(callback(currentValue, index, array));\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3, 4];\\r\\n  const evens = numbers.filter(num => num % 2 === 0);\\r\\n  console.log(evens); // 输出：[2, 4]\\r\\n  ```\\r\\n\\r\\n#### **2.4 `reduce`**\\r\\n\\r\\n- **用途**：将数组中的元素累积为单个值。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const result = array.reduce(callback(accumulator, currentValue, index, array), initialValue);\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3, 4];\\r\\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\\r\\n  console.log(sum); // 输出：10\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **3. 查找**\\r\\n\\r\\n查找是指在数组中搜索特定的元素或索引。\\r\\n\\r\\n#### **3.1 `find`**\\r\\n\\r\\n- **用途**：返回数组中第一个满足条件的元素，如果没有找到则返回 `undefined`。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const foundElement = array.find(callback(currentValue, index, array));\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3, 4];\\r\\n  const found = numbers.find(num => num > 2);\\r\\n  console.log(found); // 输出：3\\r\\n  ```\\r\\n\\r\\n#### **3.2 `findIndex`**\\r\\n\\r\\n- **用途**：返回数组中第一个满足条件的元素的索引，如果没有找到则返回 `-1`。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const index = array.findIndex(callback(currentValue, index, array));\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3, 4];\\r\\n  const index = numbers.findIndex(num => num > 2);\\r\\n  console.log(index); // 输出：2\\r\\n  ```\\r\\n\\r\\n#### **3.3 `includes`**\\r\\n\\r\\n- **用途**：检查数组是否包含某个值，返回布尔值。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const hasValue = array.includes(valueToFind, fromIndex);\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3, 4];\\r\\n  console.log(numbers.includes(3)); // 输出：true\\r\\n  console.log(numbers.includes(5)); // 输出：false\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **4. 修改**\\r\\n\\r\\n修改是指对数组进行增删改操作。\\r\\n\\r\\n#### **4.1 `push` 和 `pop`**\\r\\n\\r\\n- **`push`**：向数组末尾添加一个或多个元素，返回新数组长度。\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3];\\r\\n  numbers.push(4);\\r\\n  console.log(numbers); // 输出：[1, 2, 3, 4]\\r\\n  ```\\r\\n\\r\\n- **`pop`**：移除数组末尾的元素，返回被移除的元素。\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3];\\r\\n  const last = numbers.pop();\\r\\n  console.log(last);    // 输出：3\\r\\n  console.log(numbers); // 输出：[1, 2]\\r\\n  ```\\r\\n\\r\\n#### **4.2 `shift` 和 `unshift`**\\r\\n\\r\\n- **`shift`**：移除数组开头的元素，返回被移除的元素。\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3];\\r\\n  const first = numbers.shift();\\r\\n  console.log(first);   // 输出：1\\r\\n  console.log(numbers); // 输出：[2, 3]\\r\\n  ```\\r\\n\\r\\n- **`unshift`**：向数组开头添加一个或多个元素，返回新数组长度。\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [2, 3];\\r\\n  numbers.unshift(1);\\r\\n  console.log(numbers); // 输出：[1, 2, 3]\\r\\n  ```\\r\\n\\r\\n#### **4.3 `splice`**\\r\\n\\r\\n- **用途**：从数组中删除、替换或添加元素。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  array.splice(start, deleteCount, item1, item2, ...);\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n  - 删除元素：\\r\\n\\r\\n    ```javascript\\r\\n    const numbers = [1, 2, 3, 4];\\r\\n    numbers.splice(1, 2); // 从索引 1 开始删除 2 个元素\\r\\n    console.log(numbers); // 输出：[1, 4]\\r\\n    ```\\r\\n\\r\\n  - 添加元素：\\r\\n\\r\\n    ```javascript\\r\\n    const numbers = [1, 2, 4];\\r\\n    numbers.splice(2, 0, 3); // 在索引 2 插入元素 3\\r\\n    console.log(numbers); // 输出：[1, 2, 3, 4]\\r\\n    ```\\r\\n\\r\\n  - 替换元素：\\r\\n\\r\\n    ```javascript\\r\\n    const numbers = [1, 2, 3, 4];\\r\\n    numbers.splice(1, 2, \\\"a\\\", \\\"b\\\"); // 替换索引 1 和 2 的元素\\r\\n    console.log(numbers); // 输出：[1, \\\"a\\\", \\\"b\\\", 4]\\r\\n    ```\\r\\n\\r\\n#### **4.4 `slice`**\\r\\n\\r\\n- **用途**：返回数组的一个浅拷贝子集，不会修改原数组。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const newArray = array.slice(start, end);\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const numbers = [1, 2, 3, 4];\\r\\n  const subArray = numbers.slice(1, 3); // 返回索引 1 到 2 的元素\\r\\n  console.log(subArray); // 输出：[2, 3]\\r\\n  console.log(numbers);  // 输出：[1, 2, 3, 4]（原数组未改变）\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **5. 数组解构赋值**\\r\\n\\r\\n数组解构是一种从数组中提取值并赋值给变量的简洁方式。\\r\\n\\r\\n#### **基本语法**\\r\\n\\r\\n```javascript\\r\\nconst [变量1, 变量2, ...rest] = 数组;\\r\\n```\\r\\n\\r\\n#### **示例**\\r\\n\\r\\n```javascript\\r\\n// 基本解构\\r\\nconst numbers = [1, 2, 3];\\r\\nconst [a, b, c] = numbers;\\r\\nconsole.log(a, b, c); // 输出：1 2 3\\r\\n\\r\\n// 跳过某些元素\\r\\nconst [x, , z] = numbers;\\r\\nconsole.log(x, z); // 输出：1 3\\r\\n\\r\\n// 解构剩余元素\\r\\nconst [first, ...rest] = numbers;\\r\\nconsole.log(first); // 输出：1\\r\\nconsole.log(rest);  // 输出：[2, 3]\\r\\n\\r\\n// 默认值\\r\\nconst [p = 10, q = 20] = [1];\\r\\nconsole.log(p, q); // 输出：1 20\\r\\n```\\r\\n\\r\\n#### **嵌套解构**\\r\\n\\r\\n如果数组包含嵌套数组，也可以进行嵌套解构。\\r\\n\\r\\n```javascript\\r\\nconst nested = [1, [2, 3], 4];\\r\\nconst [a, [b, c], d] = nested;\\r\\nconsole.log(a, b, c, d); // 输出：1 2 3 4\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}