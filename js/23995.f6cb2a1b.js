"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[23995],{23995:function(r,n,a){a.r(n),n["default"]='## **5.5 桥接模式**\r\n\r\n### **定义与特点**\r\n\r\n桥接模式将抽象部分与实现部分分离，使它们可以独立变化。它通过组合的方式实现解耦。\r\n\r\n### **分离抽象与实现**\r\n\r\n- 抽象类持有实现类的引用，而不是继承实现类。\r\n\r\n### **示例：跨平台图形绘制**\r\n\r\n```python\r\n# 实现类接口\r\nclass DrawingAPI:\r\n    def draw_circle(self, x, y, radius):\r\n        pass\r\n\r\n# 具体实现类\r\nclass DrawingAPI1(DrawingAPI):\r\n    def draw_circle(self, x, y, radius):\r\n        return f"DrawingAPI1.circle at ({x}, {y}) with radius {radius}"\r\n\r\nclass DrawingAPI2(DrawingAPI):\r\n    def draw_circle(self, x, y, radius):\r\n        return f"DrawingAPI2.circle at ({x}, {y}) with radius {radius}"\r\n\r\n# 抽象类\r\nclass Shape:\r\n    def __init__(self, drawing_api):\r\n        self.drawing_api = drawing_api\r\n\r\n    def draw(self):\r\n        pass\r\n\r\n# 扩展抽象类\r\nclass CircleShape(Shape):\r\n    def __init__(self, x, y, radius, drawing_api):\r\n        super().__init__(drawing_api)\r\n        self.x = x\r\n        self.y = y\r\n        self.radius = radius\r\n\r\n    def draw(self):\r\n        return self.drawing_api.draw_circle(self.x, self.y, self.radius)\r\n\r\n# 使用示例\r\napi1 = DrawingAPI1()\r\ncircle1 = CircleShape(1, 2, 3, api1)\r\nprint(circle1.draw())\r\n# 输出: DrawingAPI1.circle at (1, 2) with radius 3\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=23995.f6cb2a1b.js.map