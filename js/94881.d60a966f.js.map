{"version":3,"file":"js/94881.d60a966f.js","mappings":"qHAAA,4jD","sources":["webpack://myblog/./src/assets/md/software/content/018-41 单例模式.md"],"sourcesContent":["export default \"## **4.1 单例模式**\\r\\n\\r\\n- **定义与特点**：单例模式确保一个类只有一个实例，并提供一个全局访问点来访问这个唯一实例。其特点是只能有一个实例存在，且必须自行创建该实例。\\r\\n  \\r\\n- **实现方式**：\\r\\n  - **懒汉式**：在第一次被引用时才初始化实例，节省资源但需要考虑线程安全问题。\\r\\n  \\r\\n  ```python\\r\\n  class SingletonLazy:\\r\\n    _instance = None\\r\\n\\r\\n    def __new__(cls, *args, **kwargs):\\r\\n        if not cls._instance:\\r\\n            cls._instance = super(SingletonLazy, cls).__new__(cls)\\r\\n        return cls._instance\\r\\n\\r\\n  # 使用示例\\r\\n  obj1 = SingletonLazy()\\r\\n  obj2 = SingletonLazy()\\r\\n  print(obj1 is obj2)  # 输出: True\\r\\n\\r\\n  ```\\r\\n\\r\\n  - **饿汉式**：类加载时就创建实例，简单高效但可能浪费资源。\\r\\n\\r\\n  ```python\\r\\n  class SingletonEager:\\r\\n    class _Singleton:\\r\\n        def __init__(self):\\r\\n            pass\\r\\n\\r\\n    instance = _Singleton()\\r\\n\\r\\n  # 使用示例\\r\\n  obj1 = SingletonEager.instance\\r\\n  obj2 = SingletonEager.instance\\r\\n  print(obj1 is obj2)  # 输出: True\\r\\n\\r\\n  ```\\r\\n\\r\\n  - **双重检查锁定**：结合懒汉式的延迟加载与同步代码块，减少性能开销同时保证线程安全。\\r\\n  \\r\\n  ```python\\r\\n  import threading\\r\\n\\r\\n  class SingletonDoubleChecked:\\r\\n      _instance = None\\r\\n      _lock = threading.Lock()\\r\\n\\r\\n      def __new__(cls, *args, **kwargs):\\r\\n          if not cls._instance:\\r\\n              with cls._lock:\\r\\n                  if not cls._instance:\\r\\n                      cls._instance = super(SingletonDoubleChecked, cls).__new__(cls)\\r\\n          return cls._instance\\r\\n\\r\\n  # 使用示例\\r\\n  obj1 = SingletonDoubleChecked()\\r\\n  obj2 = SingletonDoubleChecked()\\r\\n  print(obj1 is obj2)  # 输出: True\\r\\n  ```\\r\\n\\r\\n- **应用场景与优缺点**：适用于需要频繁使用的单一资源场景，如数据库连接池等。优点是减少了内存开销并提高了性能；缺点是不支持有参数的构造函数，且难以进行单元测试。\";"],"names":[],"sourceRoot":""}