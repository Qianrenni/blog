{"version":3,"file":"js/8298.4b3d31cb.js","mappings":"oHAAA,2qB","sources":["webpack://myblog/./src/assets/md/database/content/040-4 优化 JOIN 操作.md"],"sourcesContent":["export default \"## **4. 优化 JOIN 操作**\\r\\n\\r\\nJOIN 操作在处理多个表之间的关系时非常常见，但如果设计不当，可能会导致性能问题。以下是优化 JOIN 操作的一些策略：\\r\\n\\r\\n- **选择合适的 JOIN 类型**:\\r\\n  - **INNER JOIN**: 返回两个表中满足连接条件的所有行。\\r\\n  - **LEFT JOIN**: 返回左表中的所有行及右表中满足条件的行。\\r\\n  - **RIGHT JOIN**: 类似于 LEFT JOIN，但方向相反。\\r\\n  - **CROSS JOIN**: 返回两个表的笛卡尔积。\\r\\n\\r\\n- **确保连接条件上有索引**:\\r\\n  连接条件上的列应该有索引，以加速 JOIN 操作。\\r\\n\\r\\n- **减少参与 JOIN 的列数量**:\\r\\n  尽量只选择需要的列，而不是使用 `SELECT *`。\\r\\n\\r\\n- **使用 EXPLAIN 分析 JOIN 性能**:\\r\\n  通过 `EXPLAIN` 查看 JOIN 的执行计划，了解哪些部分可能成为瓶颈。\\r\\n\\r\\n```sql\\r\\n-- 示例：优化后的 JOIN 操作\\r\\nSELECT a.name, b.department \\r\\nFROM employees a \\r\\nINNER JOIN departments b ON a.dept_id = b.dept_id \\r\\nWHERE a.salary > 50000;\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}