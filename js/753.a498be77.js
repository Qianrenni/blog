"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[753],{90753:function(r,n,t){t.r(n),n["default"]='## **6. 泛型**\r\n\r\n### **6.1 泛型的基本概念**\r\n\r\n- **定义**：\r\n  - 泛型允许在编译时指定类型参数，从而提高代码的安全性和复用性。\r\n- **语法**：\r\n  - `<T>` 表示类型参数。\r\n- **示例**：\r\n\r\n  ```java\r\n  List<String> list = new ArrayList<>();\r\n  list.add("A");\r\n  String value = list.get(0); // 不需要强制类型转换\r\n  ```\r\n\r\n---\r\n\r\n### **6.2 泛型类、泛型方法、通配符的使用**\r\n\r\n#### **6.2.1 泛型类**\r\n\r\n- **定义**：\r\n  - 类中定义类型参数。\r\n- **示例**：\r\n\r\n  ```java\r\n  public class Box<T> {\r\n      private T item;\r\n\r\n      public void setItem(T item) {\r\n          this.item = item;\r\n      }\r\n\r\n      public T getItem() {\r\n          return item;\r\n      }\r\n  }\r\n\r\n  Box<String> box = new Box<>();\r\n  box.setItem("Hello");\r\n  System.out.println(box.getItem()); // 输出：Hello\r\n  ```\r\n\r\n#### **6.2.2 泛型方法**\r\n\r\n- **定义**：\r\n  - 方法中定义类型参数。\r\n- **示例**：\r\n\r\n  ```java\r\n  public <T> void printArray(T[] array) {\r\n      for (T element : array) {\r\n          System.out.println(element);\r\n      }\r\n  }\r\n\r\n  String[] array = {"A", "B", "C"};\r\n  printArray(array);\r\n  ```\r\n\r\n#### **6.2.3 通配符**\r\n\r\n- **定义**：\r\n  - `?` 表示未知类型。\r\n  - `? extends T`：上限，表示类型必须是 `T` 或其子类。\r\n  - `? super T`：下限，表示类型必须是 `T` 或其父类。\r\n- **示例**：\r\n\r\n  ```java\r\n  public static void processElements(List<? extends Number> list) {\r\n      for (Number num : list) {\r\n          System.out.println(num);\r\n      }\r\n  }\r\n\r\n  List<Integer> integers = Arrays.asList(1, 2, 3);\r\n  processElements(integers);\r\n  ```\r\n\r\n---\r\n\r\n### **6.3 泛型的限制**\r\n\r\n- 不能实例化泛型类型的数组：\r\n\r\n  ```java\r\n  T[] array = new T[10]; // 编译错误\r\n  ```\r\n\r\n- 不能使用基本类型作为泛型参数：\r\n\r\n  ```java\r\n  List<int> list = new ArrayList<>(); // 编译错误\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=753.a498be77.js.map