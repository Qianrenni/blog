"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[28686],{28686:function(r,n,e){e.r(n),n["default"]='## **2. 字符串算法**\r\n\r\n- **匹配算法**：  \r\n  - KMP（部分匹配表）  \r\n  - Rabin-Karp（哈希滚动）  \r\n- **高级结构**：  \r\n  - Trie树（前缀匹配）  \r\n  - 后缀数组（DC3算法）  \r\n\r\n### **AC自动机**\r\n\r\n```python\r\nfrom collections import  deque\r\nclass Node:\r\n    def __init__(self):\r\n        self.children = {}\r\n        self.fail = None\r\n        self.is_end = False\r\n        self.output = []    # 当前节点及其fail路径上所有匹配的模式串\r\nclass AC_Automaton:\r\n    def __init__(self, words):\r\n        self.root = Node()\r\n        for word in words:\r\n            self.insert(word)\r\n        self.build_fail()\r\n    def insert(self, word):\r\n        cur = self.root\r\n        for ch in word:\r\n            if ch not in cur.children:\r\n                cur.children[ch] = Node()\r\n            cur = cur.children[ch]\r\n        if cur!= self.root:\r\n            cur.is_end = True\r\n            cur.output.append(word)  # 将当前模式串加入输出链表\r\n    def build_fail(self):\r\n        for _,node in self.root.children.items():\r\n            node.fail = self.root\r\n        queue=deque([ node for node in self.root.children.values()])\r\n        while queue:\r\n            cur = queue.popleft()\r\n            for ch,node in cur.children.items():\r\n                p=cur.fail\r\n                while p is not None:\r\n                    if ch in p.children:\r\n                        node.fail = p.children[ch]\r\n                        break\r\n                    p = p.fail\r\n                if p is None:\r\n                    node.fail = self.root\r\n                node.output += node.fail.output\r\n                queue.append(node)\r\n\r\n    def search(self, text):\r\n        cur = self.root\r\n        ans = []\r\n        for ch in text:\r\n            # 如果当前字符不在子节点中，沿着fail指针回溯\r\n            while ch not in cur.children and cur != self.root:\r\n                cur = cur.fail\r\n            cur = cur.children.get(ch, self.root)\r\n            # 检查当前节点及其fail指针指向的节点是否为模式串的结尾\r\n            # 直接检查当前节点的输出链表\r\n            ans.extend(cur.output)\r\n        return ans\r\n\r\nif __name__ == \'__main__\':\r\n    words = ["aa", "bb", "cc", "dd"]\r\n    ac = AC_Automaton(words)\r\n    print(ac.search(text = "aabbccdd"))\r\n```'}}]);
//# sourceMappingURL=28686.53c1faf8.js.map