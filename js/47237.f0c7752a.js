"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[47237],{47237:function(n,r,p){p.r(r),r["default"]='## **1. 指针基础**\r\n\r\n### **1.1 指针的概念与声明**\r\n\r\n指针是一种特殊的变量，用于存储内存地址。通过指针，可以间接访问和操作内存中的数据。\r\n\r\n- **声明指针**：\r\n\r\n  ```cpp\r\n  数据类型* 指针名;\r\n  ```\r\n\r\n  - `数据类型`：指针所指向的数据类型。\r\n  - `*`：表示这是一个指针变量。\r\n\r\n  示例：\r\n\r\n  ```cpp\r\n  int x = 10;   // 定义一个整数变量\r\n  int* ptr = &x; // 定义一个指针，指向 x 的地址\r\n  ```\r\n\r\n- **指针的初始化**：\r\n  指针必须被初始化为有效地址或 `nullptr`（C++11 引入），否则可能导致未定义行为。\r\n\r\n  ```cpp\r\n  int* ptr = nullptr; // 初始化为空指针\r\n  ```\r\n\r\n### **1.2 指针的解引用与地址操作**\r\n\r\n- **取地址操作符（`&`）**：\r\n  使用 `&` 获取变量的内存地址。\r\n\r\n  ```cpp\r\n  int x = 42;\r\n  int* ptr = &x; // ptr 存储了 x 的地址\r\n  ```\r\n\r\n- **解引用操作符（`*`）**：\r\n  使用 `*` 访问指针所指向的内存中的值。\r\n\r\n  ```cpp\r\n  int value = *ptr; // 解引用 ptr，获取 x 的值（42）\r\n  ```\r\n\r\n- **示例**：\r\n\r\n  ```cpp\r\n  int main() {\r\n      int a = 5;\r\n      int* p = &a; // p 指向 a 的地址\r\n      cout << "Address of a: " << p << endl; // 输出 a 的地址\r\n      cout << "Value of a: " << *p << endl; // 输出 a 的值\r\n      *p = 10; // 修改 a 的值\r\n      cout << "New value of a: " << a << endl; // 输出 10\r\n  }\r\n  ```\r\n\r\n### **1.3 指针与数组的关系**\r\n\r\n在 C++ 中，数组名本质上是一个指向数组首元素的指针。\r\n\r\n- **数组名作为指针**：\r\n\r\n  ```cpp\r\n  int arr[5] = {1, 2, 3, 4, 5};\r\n  int* ptr = arr; // ptr 指向数组的第一个元素\r\n  cout << *ptr << endl; // 输出 1\r\n  cout << *(ptr + 1) << endl; // 输出 2\r\n  ```\r\n\r\n- **指针运算**：\r\n  指针支持加减运算，用于遍历数组。\r\n\r\n  ```cpp\r\n  for (int i = 0; i < 5; ++i) {\r\n      cout << *(ptr + i) << " "; // 输出数组元素\r\n  }\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=47237.f0c7752a.js.map