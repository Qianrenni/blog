"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[9332],{49332:function(r,n,a){a.r(n),n["default"]='## **5. 抽象类与接口**\r\n\r\n### **5.1 抽象类的定义与使用**\r\n\r\n- 抽象类使用 `abstract` 关键字定义，不能实例化。\r\n- 包含抽象方法（无实现）和普通方法（有实现）。\r\n\r\n    ```java\r\n    public abstract class Shape {\r\n        public abstract void draw(); // 抽象方法\r\n\r\n        public void print() { // 普通方法\r\n            System.out.println("This is a shape.");\r\n        }\r\n    }\r\n    ```\r\n\r\n### **5.2 接口的定义与实现**\r\n\r\n- 接口使用 `interface` 关键字定义，包含抽象方法和默认方法。\r\n- 类通过 `implements` 实现接口。\r\n\r\n    ```java\r\n    public interface Drawable {\r\n        void draw(); // 抽象方法\r\n    }\r\n\r\n    public class Circle implements Drawable {\r\n        @Override\r\n        public void draw() {\r\n            System.out.println("Drawing a circle.");\r\n        }\r\n    }\r\n    ```\r\n\r\n### **5.3 抽象类与接口的区别**\r\n\r\n| 特性               | 抽象类                           | 接口                           |\r\n|--------------------|----------------------------------|--------------------------------|\r\n| **关键字**         | `abstract`                      | `interface`                   |\r\n| **成员变量**       | 可以有普通变量                  | 只能有常量（`final`）         |\r\n| **方法**           | 可以有普通方法和抽象方法         | 默认只有抽象方法（Java 8+ 支持默认方法） |\r\n| **继承方式**       | 单继承（只能继承一个抽象类）     | 多继承（可以实现多个接口）    |\r\n\r\n---'}}]);
//# sourceMappingURL=9332.db379981.js.map