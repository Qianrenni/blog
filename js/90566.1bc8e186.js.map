{"version":3,"file":"js/90566.1bc8e186.js","mappings":"qHAAA,uyJ","sources":["webpack://myblog/./src/assets/md/c-plus/content/023-STL标准模板库.md"],"sourcesContent":["export default \"## **STL（标准模板库）**\\r\\n\\r\\nC++ 标准模板库（Standard Template Library，简称 STL）是 C++ 的核心组件之一，提供了一组高效的工具来处理数据结构和算法。STL 主要由**容器**、**迭代器**和**算法**三部分组成。以下将详细讲解这些内容。\\r\\n\\r\\n---\\r\\n\\r\\n### **1. 容器**\\r\\n\\r\\n容器是 STL 中用于存储和管理数据的类模板。根据数据的组织方式，容器可以分为**序列容器**和**关联容器**。\\r\\n\\r\\n#### **1.1 序列容器**\\r\\n\\r\\n序列容器以线性方式存储元素，支持按顺序访问。\\r\\n\\r\\n- **`vector`**：\\r\\n  - 动态数组，支持随机访问。\\r\\n  - 元素在内存中连续存储，插入和删除操作效率较低（O(n)），但访问速度快（O(1)）。\\r\\n  - **常用操作**：\\r\\n\\r\\n    ```cpp\\r\\n    #include <vector>\\r\\n    vector<int> v = {1, 2, 3};\\r\\n    v.push_back(4); // 添加元素\\r\\n    cout << v[0] << endl; // 输出第一个元素\\r\\n    ```\\r\\n\\r\\n- **`list`**：\\r\\n  - 双向链表，支持快速插入和删除（O(1)），但不支持随机访问。\\r\\n  - **常用操作**：\\r\\n\\r\\n    ```cpp\\r\\n    #include <list>\\r\\n    list<int> l = {1, 2, 3};\\r\\n    l.push_back(4); // 在末尾添加元素\\r\\n    l.push_front(0); // 在开头添加元素\\r\\n    ```\\r\\n\\r\\n- **`deque`**：\\r\\n  - 双端队列，支持在两端高效插入和删除（O(1)），同时支持随机访问。\\r\\n  - **常用操作**：\\r\\n\\r\\n    ```cpp\\r\\n    #include <deque>\\r\\n    deque<int> d = {1, 2, 3};\\r\\n    d.push_front(0); // 在开头添加元素\\r\\n    d.push_back(4); // 在末尾添加元素\\r\\n    ```\\r\\n\\r\\n#### **1.2 关联容器**\\r\\n\\r\\n关联容器以键值对的形式存储数据，通常基于平衡二叉树或哈希表实现。\\r\\n\\r\\n- **`set`**：\\r\\n  - 集合，存储唯一且有序的元素。\\r\\n  - 基于红黑树实现，插入、删除和查找操作的时间复杂度为 O(log n)。\\r\\n  - **常用操作**：\\r\\n\\r\\n    ```cpp\\r\\n    #include <set>\\r\\n    set<int> s = {1, 2, 3};\\r\\n    s.insert(4); // 插入元素\\r\\n    s.erase(2); // 删除元素\\r\\n    ```\\r\\n\\r\\n- **`map`**：\\r\\n  - 映射，存储键值对，键唯一且有序。\\r\\n  - **常用操作**：\\r\\n\\r\\n    ```cpp\\r\\n    #include <map>\\r\\n    map<string, int> m;\\r\\n    m[\\\"Alice\\\"] = 25; // 插入键值对\\r\\n    cout << m[\\\"Alice\\\"] << endl; // 访问值\\r\\n    ```\\r\\n\\r\\n- **`unordered_set` 和 `unordered_map`**：\\r\\n  - 基于哈希表实现，元素无序，插入、删除和查找操作的时间复杂度平均为 O(1)。\\r\\n  - **常用操作**：\\r\\n\\r\\n    ```cpp\\r\\n    #include <unordered_set>\\r\\n    unordered_set<int> us = {1, 2, 3};\\r\\n    us.insert(4); // 插入元素\\r\\n\\r\\n    #include <unordered_map>\\r\\n    unordered_map<string, int> um;\\r\\n    um[\\\"Bob\\\"] = 30; // 插入键值对\\r\\n    ```\\r\\n\\r\\n---\\r\\n\\r\\n### **2. 迭代器**\\r\\n\\r\\n迭代器是 STL 中用于遍历容器的工具，类似于指针。它提供了统一的接口来访问容器中的元素。\\r\\n\\r\\n#### **2.1 迭代器的分类**\\r\\n\\r\\n根据功能，迭代器可以分为以下几种类型：\\r\\n\\r\\n- **输入迭代器**：只能单向遍历，支持读取操作。\\r\\n- **输出迭代器**：只能单向遍历，支持写入操作。\\r\\n- **前向迭代器**：支持单向遍历，可读可写。\\r\\n- **双向迭代器**：支持双向遍历（如 `list` 和 `set`）。\\r\\n- **随机访问迭代器**：支持随机访问（如 `vector` 和 `deque`）。\\r\\n\\r\\n#### **2.2 迭代器的使用**\\r\\n\\r\\n迭代器通过容器的成员函数（如 `begin()` 和 `end()`）获取。\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```cpp\\r\\n  #include <vector>\\r\\n  #include <iostream>\\r\\n  using namespace std;\\r\\n\\r\\n  int main() {\\r\\n      vector<int> v = {1, 2, 3, 4, 5};\\r\\n      for (auto it = v.begin(); it != v.end(); ++it) {\\r\\n          cout << *it << \\\" \\\"; // 输出：1 2 3 4 5\\r\\n      }\\r\\n      cout << endl;\\r\\n\\r\\n      // 使用范围 for 循环（C++11 起）\\r\\n      for (const auto& elem : v) {\\r\\n          cout << elem << \\\" \\\";\\r\\n      }\\r\\n      cout << endl;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **3. 算法**\\r\\n\\r\\nSTL 提供了大量通用算法，可以直接应用于容器和迭代器。这些算法定义在 `<algorithm>` 头文件中。\\r\\n\\r\\n#### **3.1 常用算法**\\r\\n\\r\\n以下是 STL 中常用的算法及其示例：\\r\\n\\r\\n- **`sort`**：\\r\\n  对容器中的元素进行排序。\\r\\n\\r\\n  ```cpp\\r\\n  #include <vector>\\r\\n  #include <algorithm>\\r\\n  #include <iostream>\\r\\n  using namespace std;\\r\\n\\r\\n  int main() {\\r\\n      vector<int> v = {5, 2, 8, 1, 9};\\r\\n      sort(v.begin(), v.end()); // 默认升序排序\\r\\n      for (int x : v) cout << x << \\\" \\\"; // 输出：1 2 5 8 9\\r\\n      cout << endl;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **`find`**：\\r\\n  查找指定值的元素，返回指向该元素的迭代器。\\r\\n\\r\\n  ```cpp\\r\\n  #include <vector>\\r\\n  #include <algorithm>\\r\\n  #include <iostream>\\r\\n  using namespace std;\\r\\n\\r\\n  int main() {\\r\\n      vector<int> v = {1, 2, 3, 4, 5};\\r\\n      auto it = find(v.begin(), v.end(), 3);\\r\\n      if (it != v.end()) {\\r\\n          cout << \\\"Found: \\\" << *it << endl; // 输出：Found: 3\\r\\n      }\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **`accumulate`**：\\r\\n  计算容器中元素的累加和。\\r\\n\\r\\n  ```cpp\\r\\n  #include <vector>\\r\\n  #include <numeric>\\r\\n  #include <iostream>\\r\\n  using namespace std;\\r\\n\\r\\n  int main() {\\r\\n      vector<int> v = {1, 2, 3, 4, 5};\\r\\n      int sum = accumulate(v.begin(), v.end(), 0); // 初始值为 0\\r\\n      cout << \\\"Sum: \\\" << sum << endl; // 输出：Sum: 15\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **`count`**：\\r\\n  统计容器中某个值出现的次数。\\r\\n\\r\\n  ```cpp\\r\\n  #include <vector>\\r\\n  #include <algorithm>\\r\\n  #include <iostream>\\r\\n  using namespace std;\\r\\n\\r\\n  int main() {\\r\\n      vector<int> v = {1, 2, 3, 2, 4};\\r\\n      int cnt = count(v.begin(), v.end(), 2);\\r\\n      cout << \\\"Count of 2: \\\" << cnt << endl; // 输出：Count of 2: 2\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **`transform`**：\\r\\n  对容器中的每个元素应用一个函数，并将结果存储到另一个容器中。\\r\\n\\r\\n  ```cpp\\r\\n  #include <vector>\\r\\n  #include <algorithm>\\r\\n  #include <iostream>\\r\\n  using namespace std;\\r\\n\\r\\n  int square(int x) {\\r\\n      return x * x;\\r\\n  }\\r\\n\\r\\n  int main() {\\r\\n      vector<int> v1 = {1, 2, 3, 4};\\r\\n      vector<int> v2(v1.size());\\r\\n      transform(v1.begin(), v1.end(), v2.begin(), square);\\r\\n      for (int x : v2) cout << x << \\\" \\\"; // 输出：1 4 9 16\\r\\n      cout << endl;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}