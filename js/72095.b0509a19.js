"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[72095],{72095:function(n,r,i){i.r(r),r["default"]='## **1. 数组**\r\n\r\n数组是一种用于存储固定大小的相同类型元素的数据结构。C 语言中的数组可以是一维或多维的。\r\n\r\n### **1.1 一维数组的定义与初始化**\r\n\r\n#### **1. 定义**\r\n\r\n- 语法：\r\n\r\n  ```c\r\n  type array_name[size];\r\n  ```\r\n\r\n  - `type`：数组元素的数据类型（如 `int`, `float`, `char` 等）。\r\n  - `array_name`：数组的名称。\r\n  - `size`：数组的大小（必须是常量表达式）。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int numbers[5];  // 定义一个包含 5 个整数的数组\r\n  ```\r\n\r\n#### **2. 初始化**\r\n\r\n- **静态初始化**：\r\n  - 在定义时直接赋值。\r\n  - 示例：\r\n\r\n    ```c\r\n    int numbers[5] = {1, 2, 3, 4, 5};  // 初始化数组\r\n    ```\r\n\r\n  - 如果初始化列表的元素数量少于数组大小，剩余元素会被自动初始化为 0。\r\n\r\n    ```c\r\n    int numbers[5] = {1, 2};  // 元素为 {1, 2, 0, 0, 0}\r\n    ```\r\n\r\n- **动态初始化**：\r\n  - 使用循环或其他逻辑对数组进行赋值。\r\n  - 示例：\r\n\r\n    ```c\r\n    int numbers[5];\r\n    for (int i = 0; i < 5; i++) {\r\n        numbers[i] = i * 2;  // 动态赋值\r\n    }\r\n    ```\r\n\r\n#### **3. 访问数组元素**\r\n\r\n- 数组下标从 `0` 开始。\r\n- 示例：\r\n\r\n  ```c\r\n  int numbers[5] = {10, 20, 30, 40, 50};\r\n  printf("%d\\n", numbers[0]);  // 输出第一个元素：10\r\n  printf("%d\\n", numbers[4]);  // 输出最后一个元素：50\r\n  ```\r\n\r\n---\r\n\r\n### **1.2 多维数组的定义与初始化**\r\n\r\n多维数组通常用于表示表格或矩阵等复杂数据结构。\r\n\r\n#### **1. 定义**\r\n\r\n- 语法：\r\n\r\n  ```c\r\n  type array_name[size1][size2]...[sizeN];\r\n  ```\r\n\r\n  - `size1`, `size2`, ..., `sizeN` 分别表示每一维的大小。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int matrix[3][3];  // 定义一个 3x3 的二维数组\r\n  ```\r\n\r\n#### **2. 初始化**\r\n\r\n- **静态初始化**：\r\n  - 示例：\r\n\r\n    ```c\r\n    int matrix[3][3] = {\r\n        {1, 2, 3},\r\n        {4, 5, 6},\r\n        {7, 8, 9}\r\n    };\r\n    ```\r\n\r\n  - 如果初始化列表的元素数量不足，剩余元素会被初始化为 0。\r\n\r\n- **动态初始化**：\r\n  - 示例：\r\n\r\n    ```c\r\n    int matrix[3][3];\r\n    for (int i = 0; i < 3; i++) {\r\n        for (int j = 0; j < 3; j++) {\r\n            matrix[i][j] = i + j;\r\n        }\r\n    }\r\n    ```\r\n\r\n#### **3. 访问多维数组元素**\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int matrix[3][3] = {\r\n      {1, 2, 3},\r\n      {4, 5, 6},\r\n      {7, 8, 9}\r\n  };\r\n  printf("%d\\n", matrix[0][0]);  // 输出左上角元素：1\r\n  printf("%d\\n", matrix[2][2]);  // 输出右下角元素：9\r\n  ```\r\n\r\n---\r\n\r\n### **1.3 数组的遍历与操作**\r\n\r\n#### **1. 遍历**\r\n\r\n- 使用循环访问数组中的每个元素。\r\n- 示例：\r\n\r\n  ```c\r\n  int numbers[5] = {10, 20, 30, 40, 50};\r\n  for (int i = 0; i < 5; i++) {\r\n      printf("numbers[%d] = %d\\n", i, numbers[i]);\r\n  }\r\n  ```\r\n\r\n#### **2. 常见操作**\r\n\r\n- **求和**：\r\n\r\n  ```c\r\n  int sum = 0;\r\n  for (int i = 0; i < 5; i++) {\r\n      sum += numbers[i];\r\n  }\r\n  printf("Sum: %d\\n", sum);\r\n  ```\r\n\r\n- **查找最大值**：\r\n\r\n  ```c\r\n  int max = numbers[0];\r\n  for (int i = 1; i < 5; i++) {\r\n      if (numbers[i] > max) {\r\n          max = numbers[i];\r\n      }\r\n  }\r\n  printf("Max: %d\\n", max);\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=72095.b0509a19.js.map