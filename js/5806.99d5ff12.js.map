{"version":3,"file":"js/5806.99d5ff12.js","mappings":"oHAAA,ipC","sources":["webpack://myblog/./src/assets/md/software/content/035-64 状态模式.md"],"sourcesContent":["export default \"## **6.4 状态模式**\\r\\n\\r\\n### **定义与特点**\\r\\n\\r\\n状态模式允许对象在内部状态改变时改变其行为，看起来像是改变了类。\\r\\n\\r\\n### **对象行为随状态变化而改变**\\r\\n\\r\\n- 每个状态封装为一个类。\\r\\n- 上下文持有当前状态。\\r\\n\\r\\n### **示例：订单状态管理**\\r\\n\\r\\n```python\\r\\nfrom abc import ABC, abstractmethod\\r\\n\\r\\n# 抽象状态\\r\\nclass OrderState(ABC):\\r\\n    @abstractmethod\\r\\n    def handle(self, order):\\r\\n        pass\\r\\n\\r\\n# 具体状态A\\r\\nclass NewOrderState(OrderState):\\r\\n    def handle(self, order):\\r\\n        print(\\\"Handling new order.\\\")\\r\\n        order.state = ProcessingOrderState()\\r\\n\\r\\n# 具体状态B\\r\\nclass ProcessingOrderState(OrderState):\\r\\n    def handle(self, order):\\r\\n        print(\\\"Processing order.\\\")\\r\\n        order.state = ShippedOrderState()\\r\\n\\r\\n# 具体状态C\\r\\nclass ShippedOrderState(OrderState):\\r\\n    def handle(self, order):\\r\\n        print(\\\"Order shipped.\\\")\\r\\n\\r\\n# 上下文\\r\\nclass Order:\\r\\n    def __init__(self):\\r\\n        self.state = NewOrderState()\\r\\n\\r\\n    def next_state(self):\\r\\n        self.state.handle(self)\\r\\n\\r\\n# 使用示例\\r\\norder = Order()\\r\\norder.next_state()  # 输出: Handling new order.\\r\\norder.next_state()  # 输出: Processing order.\\r\\norder.next_state()  # 输出: Order shipped.\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}