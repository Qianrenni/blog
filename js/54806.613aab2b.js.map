{"version":3,"file":"js/54806.613aab2b.js","mappings":"qHAAA,s/D","sources":["webpack://myblog/./src/assets/md/c/content/048-4 线程同步.md"],"sourcesContent":["export default \"## **4. 线程同步**\\r\\n\\r\\n当多个线程访问共享资源时，可能会发生竞争条件（Race Condition）。线程同步机制用于避免这种情况。\\r\\n\\r\\n### **4.1 互斥锁（Mutex）**\\r\\n\\r\\n- 使用互斥锁确保同一时间只有一个线程访问共享资源。\\r\\n- **POSIX 示例**：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <pthread.h>\\r\\n\\r\\n  pthread_mutex_t mutex;\\r\\n\\r\\n  void *increment(void *arg) {\\r\\n      pthread_mutex_lock(&mutex);\\r\\n      int *counter = (int *)arg;\\r\\n      (*counter)++;\\r\\n      printf(\\\"Counter: %d\\\\n\\\", *counter);\\r\\n      pthread_mutex_unlock(&mutex);\\r\\n      return NULL;\\r\\n  }\\r\\n\\r\\n  int main() {\\r\\n      pthread_t t1, t2;\\r\\n      int counter = 0;\\r\\n\\r\\n      pthread_mutex_init(&mutex, NULL);\\r\\n\\r\\n      pthread_create(&t1, NULL, increment, &counter);\\r\\n      pthread_create(&t2, NULL, increment, &counter);\\r\\n\\r\\n      pthread_join(t1, NULL);\\r\\n      pthread_join(t2, NULL);\\r\\n\\r\\n      pthread_mutex_destroy(&mutex);\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **4.2 条件变量**\\r\\n\\r\\n- 条件变量用于线程间的协调。\\r\\n- **POSIX 示例**：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <pthread.h>\\r\\n\\r\\n  pthread_mutex_t mutex;\\r\\n  pthread_cond_t cond;\\r\\n  int ready = 0;\\r\\n\\r\\n  void *producer(void *arg) {\\r\\n      pthread_mutex_lock(&mutex);\\r\\n      ready = 1;\\r\\n      pthread_cond_signal(&cond);\\r\\n      pthread_mutex_unlock(&mutex);\\r\\n      return NULL;\\r\\n  }\\r\\n\\r\\n  void *consumer(void *arg) {\\r\\n      pthread_mutex_lock(&mutex);\\r\\n      while (!ready) {\\r\\n          pthread_cond_wait(&cond, &mutex);\\r\\n      }\\r\\n      printf(\\\"Consumed!\\\\n\\\");\\r\\n      pthread_mutex_unlock(&mutex);\\r\\n      return NULL;\\r\\n  }\\r\\n\\r\\n  int main() {\\r\\n      pthread_t prod, cons;\\r\\n\\r\\n      pthread_mutex_init(&mutex, NULL);\\r\\n      pthread_cond_init(&cond, NULL);\\r\\n\\r\\n      pthread_create(&cons, NULL, consumer, NULL);\\r\\n      pthread_create(&prod, NULL, producer, NULL);\\r\\n\\r\\n      pthread_join(prod, NULL);\\r\\n      pthread_join(cons, NULL);\\r\\n\\r\\n      pthread_mutex_destroy(&mutex);\\r\\n      pthread_cond_destroy(&cond);\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}