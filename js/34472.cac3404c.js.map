{"version":3,"file":"js/34472.cac3404c.js","mappings":"qHAAA,o0B","sources":["webpack://myblog/./src/assets/md/java/content/007-4 多态.md"],"sourcesContent":["export default \"## **4. 多态**\\r\\n\\r\\n### **4.1 编译时多态（方法重载）**\\r\\n\\r\\n- 方法重载是指在同一个类中定义多个同名方法，但参数列表不同。\\r\\n- 示例：\\r\\n\\r\\n    ```java\\r\\n    public class Calculator {\\r\\n        public int add(int a, int b) {\\r\\n            return a + b;\\r\\n        }\\r\\n\\r\\n        public double add(double a, double b) {\\r\\n            return a + b;\\r\\n        }\\r\\n    }\\r\\n    ```\\r\\n\\r\\n### **4.2 运行时多态（方法重写）**\\r\\n\\r\\n- 运行时多态通过继承和方法重写实现。\\r\\n- 父类引用指向子类对象时，调用的方法由实际对象决定。\\r\\n\\r\\n    ```java\\r\\n    Animal animal = new Dog(\\\"Tom\\\");\\r\\n    animal.eat(); // 输出：Tom is eating bones.\\r\\n    ```\\r\\n\\r\\n### **4.3 向上转型与向下转型**\\r\\n\\r\\n- **向上转型**：将子类对象赋值给父类引用（自动完成）。\\r\\n\\r\\n    ```java\\r\\n    Animal animal = new Dog(\\\"Tom\\\"); // 向上转型\\r\\n    ```\\r\\n\\r\\n- **向下转型**：将父类引用强制转换为子类类型（需确保实际对象类型匹配）。\\r\\n\\r\\n    ```java\\r\\n    Dog dog = (Dog) animal; // 向下转型\\r\\n    ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}