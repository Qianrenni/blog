{"version":3,"file":"js/65124.c1566fae.js","mappings":"qHAAA,+/H","sources":["webpack://myblog/./src/assets/md/javascript/content/017-BOM 操作.md"],"sourcesContent":["export default \"## **BOM 操作**\\r\\n\\r\\nBOM（Browser Object Model）是浏览器提供的一套接口，用于与浏览器窗口进行交互。它没有标准化的规范，但主流浏览器都支持类似的功能。以下是 BOM 的核心部分及其详细讲解。\\r\\n\\r\\n---\\r\\n\\r\\n### **1. `window` 对象**\\r\\n\\r\\n`window` 是 BOM 的核心对象，代表浏览器窗口或框架。它是全局对象，所有全局变量和函数都挂载在 `window` 上。\\r\\n\\r\\n#### **1.1 弹窗方法**\\r\\n\\r\\n`window` 提供了三种常用的弹窗方法：`alert`、`confirm` 和 `prompt`。\\r\\n\\r\\n- **`alert`**：\\r\\n  - **用途**：显示一个简单的提示框。\\r\\n  - **语法**：\\r\\n\\r\\n    ```javascript\\r\\n    window.alert(message);\\r\\n    ```\\r\\n\\r\\n  - **示例**：\\r\\n\\r\\n    ```javascript\\r\\n    alert(\\\"This is an alert!\\\");\\r\\n    ```\\r\\n\\r\\n- **`confirm`**：\\r\\n  - **用途**：显示一个带有“确定”和“取消”按钮的对话框，返回布尔值。\\r\\n  - **语法**：\\r\\n\\r\\n    ```javascript\\r\\n    const result = window.confirm(message);\\r\\n    ```\\r\\n\\r\\n  - **示例**：\\r\\n\\r\\n    ```javascript\\r\\n    const isConfirmed = confirm(\\\"Are you sure?\\\");\\r\\n    if (isConfirmed) {\\r\\n        console.log(\\\"User clicked OK.\\\");\\r\\n    } else {\\r\\n        console.log(\\\"User clicked Cancel.\\\");\\r\\n    }\\r\\n    ```\\r\\n\\r\\n- **`prompt`**：\\r\\n  - **用途**：显示一个带有输入框的对话框，允许用户输入文本。\\r\\n  - **语法**：\\r\\n\\r\\n    ```javascript\\r\\n    const input = window.prompt(message, defaultValue);\\r\\n    ```\\r\\n\\r\\n  - **示例**：\\r\\n\\r\\n    ```javascript\\r\\n    const name = prompt(\\\"What is your name?\\\", \\\"Guest\\\");\\r\\n    console.log(`Hello, ${name || \\\"Guest\\\"}!`);\\r\\n    ```\\r\\n\\r\\n---\\r\\n\\r\\n### **2. 定时器**\\r\\n\\r\\n定时器是 JavaScript 中用于延迟执行代码或重复执行代码的机制。\\r\\n\\r\\n#### **2.1 `setTimeout`**\\r\\n\\r\\n- **用途**：在指定的时间后执行一次代码。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const timerId = setTimeout(callback, delay, arg1, arg2, ...);\\r\\n  ```\\r\\n\\r\\n  - `callback`：要执行的函数。\\r\\n  - `delay`：延迟时间（毫秒）。\\r\\n  - `arg1, arg2, ...`（可选）：传递给回调函数的参数。\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const timerId = setTimeout(() => {\\r\\n      console.log(\\\"This runs after 2 seconds.\\\");\\r\\n  }, 2000);\\r\\n\\r\\n  // 取消定时器\\r\\n  clearTimeout(timerId);\\r\\n  ```\\r\\n\\r\\n#### **2.2 `setInterval`**\\r\\n\\r\\n- **用途**：每隔指定的时间重复执行代码。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  const intervalId = setInterval(callback, delay, arg1, arg2, ...);\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  let count = 0;\\r\\n  const intervalId = setInterval(() => {\\r\\n      console.log(`Count: ${++count}`);\\r\\n      if (count >= 5) {\\r\\n          clearInterval(intervalId); // 停止定时器\\r\\n      }\\r\\n  }, 1000);\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **3. 浏览器信息**\\r\\n\\r\\nBOM 提供了多个对象来获取浏览器的相关信息，包括 `navigator`、`location` 和 `history`。\\r\\n\\r\\n#### **3.1 `navigator`**\\r\\n\\r\\n- **用途**：提供关于浏览器的信息。\\r\\n- **常用属性**：\\r\\n  - `navigator.userAgent`：返回用户代理字符串（包含浏览器和操作系统信息）。\\r\\n  - `navigator.language`：返回用户的首选语言。\\r\\n  - `navigator.platform`：返回运行浏览器的操作系统平台。\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  console.log(navigator.userAgent); // 输出：Mozilla/5.0 ...\\r\\n  console.log(navigator.language); // 输出：en-US\\r\\n  console.log(navigator.platform); // 输出：Win32 或其他\\r\\n  ```\\r\\n\\r\\n#### **3.2 `location`**\\r\\n\\r\\n- **用途**：提供当前页面的 URL 信息，并允许导航到新页面。\\r\\n- **常用属性**：\\r\\n  - `location.href`：当前页面的完整 URL。\\r\\n  - `location.protocol`：协议（如 `http:` 或 `https:`）。\\r\\n  - `location.host`：主机名和端口号。\\r\\n  - `location.pathname`：路径部分。\\r\\n  - `location.search`：查询字符串。\\r\\n  - `location.hash`：哈希部分（锚点）。\\r\\n- **常用方法**：\\r\\n  - `location.reload()`：重新加载当前页面。\\r\\n  - `location.assign(url)`：跳转到指定 URL。\\r\\n  - `location.replace(url)`：替换当前页面，不会留下历史记录。\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  console.log(location.href); // 输出：当前页面的完整 URL\\r\\n  console.log(location.protocol); // 输出：http: 或 https:\\r\\n  console.log(location.pathname); // 输出：当前页面的路径\\r\\n\\r\\n  location.assign(\\\"https://example.com\\\"); // 跳转到新页面\\r\\n  ```\\r\\n\\r\\n#### **3.3 `history`**\\r\\n\\r\\n- **用途**：管理浏览器的历史记录。\\r\\n- **常用方法**：\\r\\n  - `history.back()`：返回上一页。\\r\\n  - `history.forward()`：前进到下一页。\\r\\n  - `history.go(n)`：跳转到相对当前页面的第 `n` 页（正数为前进，负数为后退）。\\r\\n  - `history.pushState(state, title, url)`：向历史记录中添加一条记录。\\r\\n  - `history.replaceState(state, title, url)`：替换当前历史记录。\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  history.back(); // 返回上一页\\r\\n  history.forward(); // 前进到下一页\\r\\n  history.go(-2); // 返回两页\\r\\n\\r\\n  history.pushState({ page: 1 }, \\\"Title\\\", \\\"/page1\\\");\\r\\n  console.log(history.state); // 输出：{ page: 1 }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}