{"version":3,"file":"js/3985.14b7f461.js","mappings":"mHAAA,uqC","sources":["webpack://myblog/./src/assets/md/software/content/029-56 组合模式.md"],"sourcesContent":["export default \"## **5.6 组合模式**\\r\\n\\r\\n### **定义与特点**\\r\\n\\r\\n组合模式允许将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户端可以统一处理单个对象和组合对象。\\r\\n\\r\\n### **树形结构的处理**\\r\\n\\r\\n- 叶节点和组合节点共享相同的接口。\\r\\n\\r\\n### **示例：文件系统**\\r\\n\\r\\n```python\\r\\nfrom abc import ABC, abstractmethod\\r\\n\\r\\n# 抽象组件\\r\\nclass Component(ABC):\\r\\n    @abstractmethod\\r\\n    def show(self):\\r\\n        pass\\r\\n\\r\\n# 叶节点\\r\\nclass File(Component):\\r\\n    def __init__(self, name):\\r\\n        self.name = name\\r\\n\\r\\n    def show(self):\\r\\n        return f\\\"File: {self.name}\\\"\\r\\n\\r\\n# 组合节点\\r\\nclass Directory(Component):\\r\\n    def __init__(self, name):\\r\\n        self.name = name\\r\\n        self.children = []\\r\\n\\r\\n    def add(self, component):\\r\\n        self.children.append(component)\\r\\n\\r\\n    def show(self):\\r\\n        results = [f\\\"Directory: {self.name}\\\"]\\r\\n        for child in self.children:\\r\\n            results.append(child.show())\\r\\n        return \\\"\\\\n\\\".join(results)\\r\\n\\r\\n# 使用示例\\r\\nfile1 = File(\\\"file1.txt\\\")\\r\\nfile2 = File(\\\"file2.txt\\\")\\r\\ndirectory = Directory(\\\"root\\\")\\r\\ndirectory.add(file1)\\r\\ndirectory.add(file2)\\r\\nprint(directory.show())\\r\\n# 输出:\\r\\n# Directory: root\\r\\n# File: file1.txt\\r\\n# File: file2.txt\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}