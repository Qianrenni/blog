{"version":3,"file":"js/59416.b653792e.js","mappings":"qHAAA,osB","sources":["webpack://myblog/./src/assets/md/operatingsystem/content/010-31 分页Paging.md"],"sourcesContent":["export default \"## **3.1. 分页（Paging）**\\r\\n\\r\\n### **基本概念**\\r\\n\\r\\n分页是一种将进程的虚拟地址空间划分为固定大小块的技术，这些块称为**页（Page）**。同时，物理内存也被划分为同样大小的块，称为**页框（Page Frame）**。每个页可以被放置在任意可用的页框中。\\r\\n\\r\\n- **虚拟地址空间**：由多个页组成，每个页的大小通常是 4KB 或更大。\\r\\n- **物理地址空间**：由多个页框组成，页框的大小与页相同。\\r\\n- **页表（Page Table）**：用于记录虚拟页到物理页框的映射关系。\\r\\n\\r\\n### **工作原理**\\r\\n\\r\\n1. 虚拟地址被划分为两部分：\\r\\n   - **页号（Page Number, PN）**：标识虚拟地址属于哪个页。\\r\\n   - **页内偏移量（Offset）**：标识页内的具体位置。\\r\\n2. 操作系统通过页表查找虚拟页号对应的物理页框号（Frame Number, FN）。\\r\\n3. 最终的物理地址由物理页框号和页内偏移量组合而成。\\r\\n\\r\\n### **优点**\\r\\n\\r\\n- **减少外部碎片**：由于页的大小是固定的，不会出现像分段那样的外部碎片问题。\\r\\n- **简化内存分配**：只需找到一个空闲的页框即可完成分配。\\r\\n\\r\\n### **缺点**\\r\\n\\r\\n- **内部碎片**：如果页的大小不完全匹配实际需求，可能会浪费部分页框空间。\\r\\n- **页表开销大**：对于大地址空间，页表可能占用大量内存。\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}