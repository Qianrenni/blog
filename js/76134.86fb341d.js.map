{"version":3,"file":"js/76134.86fb341d.js","mappings":"qHAAA,85B","sources":["webpack://myblog/./src/assets/md/software/content/022-45 原型模式.md"],"sourcesContent":["export default \"## **4.5 原型模式**\\r\\n\\r\\n- **定义与特点**：原型模式是指当创建给定类的实例很复杂或成本高昂时，先创建一个实例，然后通过复制这个实例来创建新的实例。这可以通过浅拷贝或深拷贝实现。\\r\\n  \\r\\n- **浅拷贝与深拷贝**：浅拷贝复制对象的基本数据类型成员，但共享引用类型的成员；深拷贝则会递归地复制整个对象图，包括引用类型的成员。\\r\\n  \\r\\n- **应用场景与示例**：常用于避免创建复杂对象的高成本操作，如游戏中的角色克隆。示例可以是在图形编辑软件中复制一个复杂的形状对象，而不是重新创建一个新的。\\r\\n\\r\\n```python\\r\\n\\r\\nimport copy\\r\\n\\r\\nclass Prototype:\\r\\n    def __init__(self, name):\\r\\n        self.name = name\\r\\n        self.components = [\\\"Component1\\\", \\\"Component2\\\"]\\r\\n\\r\\n    def clone(self, deep=False):\\r\\n        if deep:\\r\\n            return copy.deepcopy(self)\\r\\n        else:\\r\\n            return copy.copy(self)\\r\\n\\r\\n# 使用示例\\r\\noriginal = Prototype(\\\"Original\\\")\\r\\nshallow_copy = original.clone()\\r\\ndeep_copy = original.clone(deep=True)\\r\\n\\r\\nprint(original.components is shallow_copy.components)  # 输出: True (浅拷贝共享引用)\\r\\nprint(original.components is deep_copy.components)     # 输出: False (深拷贝独立副本)\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}