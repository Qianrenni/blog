{"version":3,"file":"js/1754.f3be08f4.js","mappings":"oHAAA,42B","sources":["webpack://myblog/./src/assets/md/algorithm/content/019-1 数论算法.md"],"sourcesContent":["export default \"## **1. 数论算法**\\r\\n\\r\\n### **质数筛法**\\r\\n\\r\\n```python\\r\\n# Definition for singly-linked list.\\r\\ndef sieve_of_eratosthenes(limit):\\r\\n    # 创建一个布尔数组\\\"prime[0..limit]\\\"并初始化为True。\\r\\n    # 一个索引如果为质数，则对应的值保持为True；否则设为False。\\r\\n    prime = [True for _ in range(limit + 1)]\\r\\n    p = 2\\r\\n    while (p * p <= limit):\\r\\n        # 如果prime[p]没有被改变, 则说明p是质数\\r\\n        if prime[p]:\\r\\n            # 更新所有p的倍数为非质数\\r\\n            for i in range(p * p, limit + 1, p):\\r\\n                prime[i] = False\\r\\n        p += 1\\r\\n\\r\\n    # 打印所有质数\\r\\n    primes = [p for p in range(2, limit + 1) if prime[p]]\\r\\n    return primes\\r\\nif __name__==\\\"__main__\\\":\\r\\n    limit = 100\\r\\n    primes = sieve_of_eratosthenes(limit)\\r\\n    print(primes)\\r\\n```\\r\\n\\r\\n### **最大公约数**\\r\\n\\r\\n```python\\r\\n\\r\\ndef gcd(a, b):\\r\\n    if b == 0:\\r\\n        return a\\r\\n    return gcd(b, a % b)\\r\\n```\";"],"names":[],"sourceRoot":""}