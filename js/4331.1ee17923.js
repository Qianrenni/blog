"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[4331],{24331:function(n,r,t){t.r(r),r["default"]='## **1. 函数的基本概念**\r\n\r\n### **1.1 函数的定义与调用**\r\n\r\n#### **1. 定义**\r\n\r\n- 函数是一段可重复使用的代码块，用于完成特定任务。\r\n- **语法**：\r\n\r\n  ```c\r\n  return_type function_name(parameter_list) {\r\n      // 函数体\r\n      return value;  // 可选，根据返回值类型决定是否需要返回\r\n  }\r\n  ```\r\n\r\n  - `return_type`：函数的返回值类型（如 `int`, `float`, `void` 等）。\r\n  - `function_name`：函数的名称。\r\n  - `parameter_list`：函数的参数列表（可以为空）。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int add(int a, int b) {\r\n      return a + b;\r\n  }\r\n  ```\r\n\r\n#### **2. 调用**\r\n\r\n- 调用函数时，传递必要的参数并接收返回值（如果有的话）。\r\n- 示例：\r\n\r\n  ```c\r\n  #include <stdio.h>\r\n\r\n  int add(int a, int b) {\r\n      return a + b;\r\n  }\r\n\r\n  int main() {\r\n      int result = add(3, 5);  // 调用函数\r\n      printf("Result: %d\\n", result);  // 输出：8\r\n      return 0;\r\n  }\r\n  ```\r\n\r\n---\r\n\r\n### **1.2 函数的返回值与参数传递**\r\n\r\n#### **1. 返回值**\r\n\r\n- 函数可以通过 `return` 语句返回一个值。\r\n- 如果函数没有返回值，则返回类型为 `void`。\r\n- 示例：\r\n\r\n  ```c\r\n  void greet() {\r\n      printf("Hello, World!\\n");\r\n  }\r\n\r\n  int square(int x) {\r\n      return x * x;\r\n  }\r\n  ```\r\n\r\n#### **2. 参数传递**\r\n\r\n- **按值传递**：\r\n  - 将实参的值复制给形参，函数内对形参的修改不会影响实参。\r\n  - 示例：\r\n\r\n    ```c\r\n    void increment(int x) {\r\n        x++;\r\n        printf("Inside function: %d\\n", x);\r\n    }\r\n\r\n    int main() {\r\n        int a = 5;\r\n        increment(a);  // 按值传递\r\n        printf("Outside function: %d\\n", a);  // 输出：5\r\n        return 0;\r\n    }\r\n    ```\r\n\r\n- **按地址传递（指针传递）**：\r\n  - 将变量的地址传递给函数，函数内对指针的操作会影响原始变量。\r\n  - 示例：\r\n\r\n    ```c\r\n    void increment(int *x) {\r\n        (*x)++;\r\n        printf("Inside function: %d\\n", *x);\r\n    }\r\n\r\n    int main() {\r\n        int a = 5;\r\n        increment(&a);  // 按地址传递\r\n        printf("Outside function: %d\\n", a);  // 输出：6\r\n        return 0;\r\n    }\r\n    ```\r\n\r\n---\r\n\r\n### **1.3 函数原型声明**\r\n\r\n- 函数原型声明告诉编译器函数的存在及其签名（返回值类型、参数列表等），即使函数的定义在调用之后。\r\n- **语法**：\r\n\r\n  ```c\r\n  return_type function_name(parameter_list);\r\n  ```\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  #include <stdio.h>\r\n\r\n  // 函数原型声明\r\n  int add(int a, int b);\r\n\r\n  int main() {\r\n      int result = add(3, 5);  // 调用函数\r\n      printf("Result: %d\\n", result);  // 输出：8\r\n      return 0;\r\n  }\r\n\r\n  // 函数定义\r\n  int add(int a, int b) {\r\n      return a + b;\r\n  }\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=4331.1ee17923.js.map