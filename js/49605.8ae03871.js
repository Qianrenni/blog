"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[49605],{49605:function(n,r,e){e.r(r),r["default"]='## **1. 文件的基本概念**\r\n\r\n### **1.1 文件的打开与关闭**\r\n\r\n在 C 语言中，文件操作通过 `FILE` 类型的指针实现。文件必须先打开才能进行读写操作，完成后需要关闭。\r\n\r\n#### **1. 打开文件**\r\n\r\n- 使用 `fopen` 函数打开文件。\r\n- **语法**：\r\n\r\n  ```c\r\n  FILE *fopen(const char *filename, const char *mode);\r\n  ```\r\n\r\n  - `filename`：文件名（可以包含路径）。\r\n  - `mode`：打开模式（如 `"r"`, `"w"`, `"a"` 等）。\r\n  - 返回值：成功返回文件指针，失败返回 `NULL`。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  FILE *file = fopen("example.txt", "r");\r\n  if (file == NULL) {\r\n      printf("Error: Could not open file.\\n");\r\n      return -1;\r\n  }\r\n  ```\r\n\r\n#### **2. 关闭文件**\r\n\r\n- 使用 `fclose` 函数关闭文件。\r\n- **语法**：\r\n\r\n  ```c\r\n  int fclose(FILE *stream);\r\n  ```\r\n\r\n  - 成功返回 `0`，失败返回 `EOF`。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  fclose(file);\r\n  ```\r\n\r\n---\r\n\r\n### **1.2 文件的读写模式**\r\n\r\n文件的打开模式决定了对文件的操作权限和行为。\r\n\r\n| 模式 | 描述                                                         |\r\n|------|--------------------------------------------------------------|\r\n| `r`  | 只读模式。如果文件不存在，则打开失败。                       |\r\n| `w`  | 写入模式。如果文件存在，则清空内容；如果文件不存在，则创建。 |\r\n| `a`  | 追加模式。如果文件存在，则在末尾追加；如果文件不存在，则创建。|\r\n| `rb` | 以二进制方式只读打开文件。                                   |\r\n| `wb` | 以二进制方式写入文件。                                       |\r\n| `ab` | 以二进制方式追加文件。                                       |\r\n| `r+` | 读写模式。如果文件不存在，则打开失败。                       |\r\n| `w+` | 读写模式。如果文件存在，则清空内容；如果文件不存在，则创建。 |\r\n| `a+` | 读写模式。如果文件存在，则在末尾追加；如果文件不存在，则创建。|\r\n\r\n---'}}]);
//# sourceMappingURL=49605.8ae03871.js.map