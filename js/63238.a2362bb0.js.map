{"version":3,"file":"js/63238.a2362bb0.js","mappings":"qHAAA,snD","sources":["webpack://myblog/./src/assets/md/c/content/033-1 宏定义.md"],"sourcesContent":["export default \"## **1. 宏定义**\\r\\n\\r\\n宏定义用于在编译前对代码进行文本替换，分为无参数宏和带参数宏。\\r\\n\\r\\n### **1.1 无参数宏：`#define`**\\r\\n\\r\\n- **作用**：定义一个标识符或常量，在编译时用指定的值替换。\\r\\n- **语法**：\\r\\n\\r\\n  ```c\\r\\n  #define identifier value\\r\\n  ```\\r\\n\\r\\n  - `identifier`：宏的名称。\\r\\n  - `value`：宏的值（可以是数字、字符串或其他表达式）。\\r\\n\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n\\r\\n  #define PI 3.14159\\r\\n\\r\\n  int main() {\\r\\n      float radius = 5.0;\\r\\n      float area = PI * radius * radius;  // 编译时将 PI 替换为 3.14159\\r\\n      printf(\\\"Area: %.2f\\\\n\\\", area);\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- 注意事项：\\r\\n  - 宏名通常使用大写字母表示，以便区分普通变量。\\r\\n  - 宏定义不会分配内存，只是简单的文本替换。\\r\\n\\r\\n---\\r\\n\\r\\n### **1.2 带参数宏：`#define`**\\r\\n\\r\\n- **作用**：定义一个带有参数的宏，类似于函数，但没有类型检查。\\r\\n- **语法**：\\r\\n\\r\\n  ```c\\r\\n  #define macro_name(arg1, arg2, ...) (expression)\\r\\n  ```\\r\\n\\r\\n  - `macro_name`：宏的名称。\\r\\n  - `arg1, arg2, ...`：宏的参数。\\r\\n  - `expression`：宏展开后的表达式。\\r\\n\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n\\r\\n  #define MAX(a, b) ((a) > (b) ? (a) : (b))\\r\\n\\r\\n  int main() {\\r\\n      int x = 10, y = 20;\\r\\n      int max_value = MAX(x, y);  // 编译时将 MAX(x, y) 替换为 ((x) > (y) ? (x) : (y))\\r\\n      printf(\\\"Max Value: %d\\\\n\\\", max_value);\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- 注意事项：\\r\\n  - 带参数宏的参数需要用括号包裹，避免运算优先级问题。\\r\\n  - 宏展开时不检查参数类型，可能导致意外行为。\\r\\n\\r\\n- 示例（潜在问题）：\\r\\n\\r\\n  ```c\\r\\n  #define SQUARE(x) (x * x)\\r\\n\\r\\n  int main() {\\r\\n      int a = 5;\\r\\n      int result = SQUARE(a + 1);  // 展开后为 (a + 1 * a + 1)，结果错误\\r\\n      printf(\\\"Result: %d\\\\n\\\", result);  // 输出：11（预期为 36）\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n  解决方法：确保宏表达式中每个参数都用括号包裹：\\r\\n\\r\\n  ```c\\r\\n  #define SQUARE(x) ((x) * (x))\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}