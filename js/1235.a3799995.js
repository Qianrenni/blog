"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[1235],{81235:function(r,n,e){e.r(n),n["default"]="## **迭代器与生成器**\r\n\r\n在 Python 中，**迭代器（Iterator）** 和 **生成器（Generator）** 是用于处理序列数据的强大工具。它们允许你逐个访问元素，而不需要一次性将所有数据加载到内存中。\r\n\r\n### 迭代器协议\r\n\r\n在 Python 中，迭代器是遵循迭代器协议的对象。这个协议要求对象实现两个方法：\r\n\r\n- `__iter__()`：返回迭代器对象自身。它使得对象可以被用于 `for` 循环和其他需要迭代的地方。\r\n- `__next__()`：返回容器中的下一个值。如果没有更多元素可返回，则抛出 `StopIteration` 异常。\r\n\r\n#### 示例\r\n\r\n```python\r\nclass MyIterator:\r\n    def __init__(self, max_value):\r\n        self.max_value = max_value\r\n        self.current = 0\r\n\r\n    def __iter__(self):\r\n        return self\r\n\r\n    def __next__(self):\r\n        if self.current < self.max_value:\r\n            value = self.current\r\n            self.current += 1\r\n            return value\r\n        else:\r\n            raise StopIteration\r\n\r\n# 使用自定义迭代器\r\nmy_iterator = MyIterator(3)\r\nfor number in my_iterator:\r\n    print(number)  # 输出: 0, 1, 2\r\n```\r\n\r\n#### 内置函数 `iter()` 和 `next()`\r\n\r\n- `iter(object)`：返回一个对象的迭代器。如果对象本身就是一个迭代器，`iter()` 返回该对象。否则，调用对象的 `__iter__()` 方法来获取迭代器。\r\n- `next(iterator)`：从迭代器中获取下一个项目。当没有更多项时，会抛出 `StopIteration` 异常。\r\n\r\n#### 示例\r\n\r\n```python\r\nmy_list = [1, 2, 3]\r\niterator = iter(my_list)\r\n\r\nprint(next(iterator))  # 输出: 1\r\nprint(next(iterator))  # 输出: 2\r\nprint(next(iterator))  # 输出: 3\r\n# print(next(iterator))  # 抛出 StopIteration 异常\r\n```\r\n\r\n### 生成器\r\n\r\n生成器是一种特殊的迭代器，通过使用 `yield` 关键字来创建。与普通函数不同的是，生成器不会一次返回所有结果，而是每次遇到 `yield` 语句时暂停执行并返回一个值，直到下一次调用 `next()` 继续执行。\r\n\r\n#### 使用 `yield` 关键字\r\n\r\n```python\r\ndef simple_generator():\r\n    yield 1\r\n    yield 2\r\n    yield 3\r\n\r\ngen = simple_generator()\r\nprint(next(gen))  # 输出: 1\r\nprint(next(gen))  # 输出: 2\r\nprint(next(gen))  # 输出: 3\r\n# print(next(gen))  # 抛出 StopIteration 异常\r\n```\r\n\r\n#### 生成器表达式\r\n\r\n类似于列表推导式，生成器表达式提供了一种简洁的方式来创建生成器。不过，与列表推导式不同，生成器表达式使用圆括号而不是方括号，并且只在需要时计算值，从而节省内存。\r\n\r\n#### 示例\r\n\r\n```python\r\n# 列表推导式\r\nsquares_list = [x * x for x in range(5)]\r\nprint(squares_list)  # 输出: [0, 1, 4, 9, 16]\r\n\r\n# 生成器表达式\r\nsquares_gen = (x * x for x in range(5))\r\nprint(next(squares_gen))  # 输出: 0\r\nprint(next(squares_gen))  # 输出: 1\r\n# 可以继续调用 next() 直到 StopIteration\r\n```"}}]);
//# sourceMappingURL=1235.a3799995.js.map