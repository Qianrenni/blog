"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[43726],{43726:function(r,n,t){t.r(n),n["default"]="## **5.位运算**\r\n\r\n>**题目描述**\r\n给定一个长度为 $n$ 的数组 `arr` 和 $m$ 个位运算操作（包括按位与 `&`、按位或 `|`、按位异或 `^`），每个操作会对数组中的所有元素进行相应的位运算。请设计一个算法，高效地对数组中的每个元素逐一应用这些操作，并输出最终结果。\r\n由于直接对每个元素逐一应用所有操作的时间复杂度为 $O(n \\cdot m)$，在 $n$ 和 $m$ 较大时效率较低，请优化你的算法以降低时间复杂度。\r\n\r\n```python\r\ndef apply_bitwise_operations(arr, operations):\r\n    # 初始化 state_0 和 state_1\r\n    state_0 = [0] * 32  # 从 0 出发的状态\r\n    state_1 = [1] * 32  # 从 1 出发的状态\r\n\r\n    # 预处理每一位的状态\r\n    for op, value in operations:\r\n        for i in range(32):\r\n            bit = (value >> i) & 1  # 获取 value 的第 i 位\r\n            if op == '&':\r\n                state_0[i] &= bit\r\n                state_1[i] &= bit\r\n            elif op == '|':\r\n                state_0[i] |= bit\r\n                state_1[i] |= bit\r\n            elif op == '^':\r\n                state_0[i] ^= bit\r\n                state_1[i] ^= bit\r\n\r\n    # 更新数组中的每个元素\r\n    for i in range(len(arr)):\r\n        result = 0\r\n        for j in range(32):\r\n            if (arr[i] >> j) & 1:  # 当前元素的第 j 位是 1\r\n                result |= (state_1[j] << j)\r\n            else:  # 当前元素的第 j 位是 0\r\n                result |= (state_0[j] << j)\r\n        arr[i] = result\r\n\r\n    return arr\r\n```\r\n\r\n---"}}]);
//# sourceMappingURL=43726.adcc440b.js.map