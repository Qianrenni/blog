"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[6425],{16425:function(r,e,n){n.r(e),e["default"]='## **4. 树（Tree）**\r\n\r\n树是一种非线性的分层数据结构，常用于表示具有层次关系的数据。\r\n\r\n### **4.1 二叉树**\r\n\r\n- **特点**：\r\n  - 每个节点最多有两个子节点：左子节点和右子节点。\r\n\r\n- **定义**：\r\n\r\n  ```c\r\n  struct TreeNode {\r\n      int data;\r\n      struct TreeNode *left;\r\n      struct TreeNode *right;\r\n  };\r\n  ```\r\n\r\n- **实现**：\r\n\r\n  ```c\r\n  #include <stdio.h>\r\n  #include <stdlib.h>\r\n\r\n  struct TreeNode {\r\n      int data;\r\n      struct TreeNode *left;\r\n      struct TreeNode *right;\r\n  };\r\n\r\n  struct TreeNode* createNode(int value) {\r\n      struct TreeNode *newNode = (struct TreeNode *)malloc(sizeof(struct TreeNode));\r\n      newNode->data = value;\r\n      newNode->left = NULL;\r\n      newNode->right = NULL;\r\n      return newNode;\r\n  }\r\n\r\n  void inorderTraversal(struct TreeNode *root) {\r\n      if (root != NULL) {\r\n          inorderTraversal(root->left);\r\n          printf("%d ", root->data);\r\n          inorderTraversal(root->right);\r\n      }\r\n  }\r\n\r\n  int main() {\r\n      struct TreeNode *root = createNode(1);\r\n      root->left = createNode(2);\r\n      root->right = createNode(3);\r\n      root->left->left = createNode(4);\r\n      root->left->right = createNode(5);\r\n\r\n      printf("Inorder Traversal: ");\r\n      inorderTraversal(root);  // 输出：4 2 5 1 3\r\n      return 0;\r\n  }\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=6425.f9c6641f.js.map