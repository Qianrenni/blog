"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[1624],{1624:function(r,n,e){e.r(n),n["default"]="## **2. JVM 调优**\r\n\r\nJVM 是 Java 程序运行的核心环境，其性能直接影响到程序的运行效率。以下是 JVM 调优的关键点：\r\n\r\n### **2.1 内存模型**\r\n\r\nJVM 的内存分为以下几个区域：\r\n\r\n- **堆（Heap）**：存放对象实例和数组，是 GC 的主要工作区域。\r\n- **栈（Stack）**：存放方法调用的局部变量和操作数栈。\r\n- **方法区（Method Area）**：存放类信息、常量池和静态变量。\r\n- **本地方法栈（Native Method Stack）**：支持 JNI（Java Native Interface）调用。\r\n- **程序计数器（PC Register）**：记录当前线程执行的字节码指令地址。\r\n\r\n### **2.2 GC（垃圾回收）机制**\r\n\r\nGC 是 JVM 自动管理内存的重要机制，主要包括以下几种算法：\r\n\r\n- **标记-清除（Mark-Sweep）**：标记需要回收的对象并清除。\r\n- **复制（Copying）**：将存活对象复制到新的内存区域。\r\n- **标记-整理（Mark-Compact）**：标记后整理内存，避免碎片化。\r\n- **分代收集（Generational Collection）**：将堆划分为新生代（Young Generation）和老年代（Old Generation），分别采用不同的 GC 算法。\r\n\r\n### **2.3 常见的 JVM 参数调优**\r\n\r\nJVM 提供了大量参数用于调优，以下是一些常用的参数：\r\n\r\n- **堆内存设置**：\r\n  - `-Xms<size>`：设置初始堆大小。\r\n  - `-Xmx<size>`：设置最大堆大小。\r\n  - 示例：`-Xms512m -Xmx2g`\r\n- **新生代设置**：\r\n  - `-XX:NewRatio=<ratio>`：设置老年代与新生代的比例。\r\n  - `-XX:SurvivorRatio=<ratio>`：设置 Eden 区与 Survivor 区的比例。\r\n- **GC 算法选择**：\r\n  - `-XX:+UseG1GC`：使用 G1 垃圾回收器。\r\n  - `-XX:+UseParallelGC`：使用并行垃圾回收器。\r\n  - 示例：`-XX:+UseG1GC -XX:MaxGCPauseMillis=200`\r\n\r\n---"}}]);
//# sourceMappingURL=1624.455e7a07.js.map