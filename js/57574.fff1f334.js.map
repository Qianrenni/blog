{"version":3,"file":"js/57574.fff1f334.js","mappings":"qHAAA,0pC","sources":["webpack://myblog/./src/assets/md/software/content/032-61 策略模式.md"],"sourcesContent":["export default \"## **6.1 策略模式**\\r\\n\\r\\n### **定义与特点**\\r\\n\\r\\n策略模式定义了一系列算法，并将每个算法封装起来，使它们可以互换。策略模式让算法的变化独立于使用算法的客户端。\\r\\n\\r\\n### **定义一系列算法并使其可互换**\\r\\n\\r\\n- 将算法抽象为接口或基类。\\r\\n- 客户端根据需求选择具体的算法实现。\\r\\n\\r\\n### **示例：支付策略**\\r\\n\\r\\n```python\\r\\nfrom abc import ABC, abstractmethod\\r\\n\\r\\n# 抽象策略\\r\\nclass PaymentStrategy(ABC):\\r\\n    @abstractmethod\\r\\n    def pay(self, amount):\\r\\n        pass\\r\\n\\r\\n# 具体策略A\\r\\nclass CreditCardPayment(PaymentStrategy):\\r\\n    def pay(self, amount):\\r\\n        return f\\\"Paid {amount} using Credit Card.\\\"\\r\\n\\r\\n# 具体策略B\\r\\nclass PayPalPayment(PaymentStrategy):\\r\\n    def pay(self, amount):\\r\\n        return f\\\"Paid {amount} using PayPal.\\\"\\r\\n\\r\\n# 上下文\\r\\nclass ShoppingCart:\\r\\n    def __init__(self, payment_strategy):\\r\\n        self.payment_strategy = payment_strategy\\r\\n\\r\\n    def checkout(self, amount):\\r\\n        return self.payment_strategy.pay(amount)\\r\\n\\r\\n# 使用示例\\r\\ncredit_card = CreditCardPayment()\\r\\npaypal = PayPalPayment()\\r\\n\\r\\ncart = ShoppingCart(credit_card)\\r\\nprint(cart.checkout(100))  # 输出: Paid 100 using Credit Card.\\r\\n\\r\\ncart = ShoppingCart(paypal)\\r\\nprint(cart.checkout(200))  # 输出: Paid 200 using PayPal.\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}