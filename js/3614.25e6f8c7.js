"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[3614],{13614:function(n,r,e){e.r(r),r["default"]='## **3. 序列化与反序列化**\r\n\r\n### **3.1 Serializable 接口的作用**\r\n\r\n- **定义**：\r\n  - `Serializable` 是一个标记接口，表示对象可以被序列化（转换为字节流）。\r\n- **用途**：\r\n  - 主要用于将对象保存到文件或通过网络传输。\r\n\r\n#### **示例：序列化与反序列化**\r\n\r\n```java\r\nimport java.io.*;\r\n\r\nclass Person implements Serializable {\r\n    private static final long serialVersionUID = 1L;\r\n    private String name;\r\n    private int age;\r\n\r\n    public Person(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return "Person{name=\'" + name + "\', age=" + age + "}";\r\n    }\r\n}\r\n\r\npublic class SerializationExample {\r\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\r\n        // 序列化\r\n        Person person = new Person("Alice", 25);\r\n        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("person.ser"));\r\n        out.writeObject(person);\r\n        out.close();\r\n\r\n        // 反序列化\r\n        ObjectInputStream in = new ObjectInputStream(new FileInputStream("person.ser"));\r\n        Person deserializedPerson = (Person) in.readObject();\r\n        in.close();\r\n\r\n        System.out.println(deserializedPerson); // 输出：Person{name=\'Alice\', age=25}\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n### **3.2 注意事项**\r\n\r\n1. **serialVersionUID**：\r\n   - 建议显式声明 `serialVersionUID`，以确保序列化和反序列化的兼容性。\r\n2. **静态成员**：\r\n   - 静态字段不会被序列化，因为它们属于类而不是对象。\r\n3. **瞬态字段**：\r\n   - 使用 `transient` 关键字修饰的字段不会被序列化。\r\n\r\n---'}}]);
//# sourceMappingURL=3614.25e6f8c7.js.map