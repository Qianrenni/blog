"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[8225],{28225:function(n,r,e){e.r(r),r["default"]='## **3. 继承**\r\n\r\n### **3.1 继承的概念与实现**\r\n\r\n- **继承**是一种机制，允许一个类（子类）继承另一个类（父类）的属性和方法。\r\n- 使用 `extends` 关键字实现继承。\r\n- 示例：\r\n\r\n    ```java\r\n    public class Animal {\r\n        protected String name;\r\n\r\n        public void eat() {\r\n            System.out.println(name + " is eating.");\r\n        }\r\n    }\r\n\r\n    public class Dog extends Animal {\r\n        public void bark() {\r\n            System.out.println(name + " is barking.");\r\n        }\r\n    }\r\n    ```\r\n\r\n### **3.2 方法重写（@Override）**\r\n\r\n- 子类可以重写父类的方法，以实现不同的行为。\r\n- 使用 `@Override` 注解标记重写的方法。\r\n\r\n    ```java\r\n    public class Dog extends Animal {\r\n        @Override\r\n        public void eat() {\r\n            System.out.println(name + " is eating bones.");\r\n        }\r\n    }\r\n    ```\r\n\r\n### **3.3 super 关键字的使用**\r\n\r\n- `super` 用于引用父类的成员（变量、方法或构造方法）。\r\n- 示例：\r\n\r\n    ```java\r\n    public class Dog extends Animal {\r\n        public Dog(String name) {\r\n            super(); // 调用父类构造方法\r\n            this.name = name;\r\n        }\r\n\r\n        @Override\r\n        public void eat() {\r\n            super.eat(); // 调用父类方法\r\n            System.out.println(name + " is eating bones.");\r\n        }\r\n    }\r\n    ```\r\n\r\n---'}}]);
//# sourceMappingURL=8225.8dc0c067.js.map