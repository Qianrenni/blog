"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[75414],{75414:function(r,n,e){e.r(n),n["default"]='## **3. 异常的最佳实践**\r\n\r\n### **3.1 不要吞掉异常**\r\n\r\n- **问题**：\r\n  - 捕获异常后不做任何处理（即“吞掉”异常），会导致问题被隐藏，难以排查。\r\n- **错误示例**：\r\n\r\n  ```java\r\n  try {\r\n      int result = 10 / 0;\r\n  } catch (ArithmeticException e) {\r\n      // 啥也不做，吞掉异常\r\n  }\r\n  ```\r\n\r\n- **正确做法**：\r\n  - 至少记录异常信息或采取补救措施。\r\n  - 示例：\r\n\r\n    ```java\r\n    try {\r\n        int result = 10 / 0;\r\n    } catch (ArithmeticException e) {\r\n        System.err.println("An error occurred: " + e.getMessage());\r\n    }\r\n    ```\r\n\r\n---\r\n\r\n### **3.2 使用日志记录异常信息**\r\n\r\n- **推荐工具**：\r\n  - 使用专业的日志框架（如 Log4j、SLF4J）记录异常信息。\r\n- **优点**：\r\n  - 提供详细的上下文信息，便于问题定位。\r\n  - 避免直接将异常信息打印到控制台。\r\n- **示例**：\r\n\r\n  ```java\r\n  import org.slf4j.Logger;\r\n  import org.slf4j.LoggerFactory;\r\n\r\n  public class LoggingExample {\r\n      private static final Logger logger = LoggerFactory.getLogger(LoggingExample.class);\r\n\r\n      public static void main(String[] args) {\r\n          try {\r\n              int result = 10 / 0;\r\n          } catch (ArithmeticException e) {\r\n              logger.error("An arithmetic error occurred.", e);\r\n          }\r\n      }\r\n  }\r\n  ```\r\n\r\n---\r\n\r\n### **3.3 其他最佳实践**\r\n\r\n1. **避免滥用异常**：\r\n   - 异常应该用于处理异常情况，而不是作为流程控制的手段。\r\n2. **区分受检异常和非受检异常**：\r\n   - 对于可以预见并恢复的错误，使用受检异常。\r\n   - 对于不可预见或无法恢复的错误，使用非受检异常。\r\n3. **保持异常链**：\r\n   - 在重新抛出异常时，保留原始异常信息。\r\n   - 示例：\r\n\r\n     ```java\r\n     try {\r\n         someMethod();\r\n     } catch (Exception e) {\r\n         throw new CustomException("Wrapped exception", e);\r\n     }\r\n     ```\r\n\r\n---'}}]);
//# sourceMappingURL=75414.ea2b9b58.js.map