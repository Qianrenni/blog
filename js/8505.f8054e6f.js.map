{"version":3,"file":"js/8505.f8054e6f.js","mappings":"oHAAA,orC","sources":["webpack://myblog/./src/assets/md/c-plus/content/030-3 移动语义与右值引用.md"],"sourcesContent":["export default \"## **3. 移动语义与右值引用**\\r\\n\\r\\n### **3.1 左值与右值的概念**\\r\\n- **左值**：有名字的对象，可以取地址。\\r\\n- **右值**：临时对象，无法取地址。\\r\\n\\r\\n### **3.2 移动构造函数与移动赋值操作符**\\r\\n- **移动构造函数**：\\r\\n  通过右值引用避免深拷贝，提高性能。\\r\\n  ```cpp\\r\\n  class MyClass {\\r\\n  public:\\r\\n      int* data;\\r\\n      MyClass(int size) : data(new int[size]) {}\\r\\n      ~MyClass() { delete[] data; }\\r\\n\\r\\n      // 移动构造函数\\r\\n      MyClass(MyClass&& other) noexcept : data(other.data) {\\r\\n          other.data = nullptr; // 转移所有权\\r\\n      }\\r\\n\\r\\n      // 移动赋值操作符\\r\\n      MyClass& operator=(MyClass&& other) noexcept {\\r\\n          if (this != &other) {\\r\\n              delete[] data;\\r\\n              data = other.data;\\r\\n              other.data = nullptr;\\r\\n          }\\r\\n          return *this;\\r\\n      }\\r\\n  };\\r\\n  ```\\r\\n\\r\\n### **3.3 `std::move` 的使用**\\r\\n`std::move` 将左值转换为右值，触发移动语义。\\r\\n```cpp\\r\\n#include <iostream>\\r\\n#include <vector>\\r\\n#include <utility>\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n    vector<int> v1 = {1, 2, 3};\\r\\n    vector<int> v2 = move(v1); // 转移 v1 的资源到 v2\\r\\n    cout << \\\"v1 size: \\\" << v1.size() << endl; // 输出：0\\r\\n    cout << \\\"v2 size: \\\" << v2.size() << endl; // 输出：3\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}