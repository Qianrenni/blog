"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[40496],{40496:function(r,n,t){t.r(n),n["default"]='## **2. 文件的读写操作**\r\n\r\nC 语言提供了多种函数用于文件的读写操作，包括字符读写、字符串读写、格式化读写和二进制读写。\r\n\r\n### **2.1 字符读写**\r\n\r\n#### **1. 字符读取：`fgetc`**\r\n\r\n- 从文件中读取一个字符。\r\n- **语法**：\r\n\r\n  ```c\r\n  int fgetc(FILE *stream);\r\n  ```\r\n\r\n  - 成功返回读取的字符（转换为 `int`），失败返回 `EOF`。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  char ch;\r\n  while ((ch = fgetc(file)) != EOF) {\r\n      putchar(ch);  // 输出到控制台\r\n  }\r\n  ```\r\n\r\n#### **2. 字符写入：`fputc`**\r\n\r\n- 向文件中写入一个字符。\r\n- **语法**：\r\n\r\n  ```c\r\n  int fputc(int character, FILE *stream);\r\n  ```\r\n\r\n  - 成功返回写入的字符，失败返回 `EOF`。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  fputc(\'A\', file);\r\n  ```\r\n\r\n---\r\n\r\n### **2.2 字符串读写**\r\n\r\n#### **1. 字符串读取：`fgets`**\r\n\r\n- 从文件中读取一行字符串。\r\n- **语法**：\r\n\r\n  ```c\r\n  char *fgets(char *str, int n, FILE *stream);\r\n  ```\r\n\r\n  - `str`：存储读取结果的缓冲区。\r\n  - `n`：最多读取的字符数（包括 `\\0`）。\r\n  - 成功返回 `str`，失败返回 `NULL`。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  char buffer[100];\r\n  while (fgets(buffer, sizeof(buffer), file) != NULL) {\r\n      printf("%s", buffer);\r\n  }\r\n  ```\r\n\r\n#### **2. 字符串写入：`fputs`**\r\n\r\n- 向文件中写入一个字符串。\r\n- **语法**：\r\n\r\n  ```c\r\n  int fputs(const char *str, FILE *stream);\r\n  ```\r\n\r\n  - 成功返回非负值，失败返回 `EOF`。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  fputs("Hello, World!\\n", file);\r\n  ```\r\n\r\n---\r\n\r\n### **2.3 格式化读写**\r\n\r\n#### **1. 格式化写入：`fprintf`**\r\n\r\n- 向文件中写入格式化的数据。\r\n- **语法**：\r\n\r\n  ```c\r\n  int fprintf(FILE *stream, const char *format, ...);\r\n  ```\r\n\r\n  - 成功返回写入的字符数，失败返回负值。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int age = 25;\r\n  fprintf(file, "Age: %d\\n", age);\r\n  ```\r\n\r\n#### **2. 格式化读取：`fscanf`**\r\n\r\n- 从文件中读取格式化的数据。\r\n- **语法**：\r\n\r\n  ```c\r\n  int fscanf(FILE *stream, const char *format, ...);\r\n  ```\r\n\r\n  - 成功返回成功读取的项数，失败返回 `EOF`。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int age;\r\n  fscanf(file, "Age: %d", &age);\r\n  printf("Read age: %d\\n", age);\r\n  ```\r\n\r\n---\r\n\r\n### **2.4 二进制读写**\r\n\r\n#### **1. 二进制写入：`fwrite`**\r\n\r\n- 向文件中写入二进制数据。\r\n- **语法**：\r\n\r\n  ```c\r\n  size_t fwrite(const void *ptr, size_t size, size_t count, FILE *stream);\r\n  ```\r\n\r\n  - `ptr`：指向要写入的数据的指针。\r\n  - `size`：每个数据项的大小（字节数）。\r\n  - `count`：要写入的数据项数量。\r\n  - 成功返回实际写入的数据项数量。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int arr[5] = {1, 2, 3, 4, 5};\r\n  fwrite(arr, sizeof(int), 5, file);\r\n  ```\r\n\r\n#### **2. 二进制读取：`fread`**\r\n\r\n- 从文件中读取二进制数据。\r\n- **语法**：\r\n\r\n  ```c\r\n  size_t fread(void *ptr, size_t size, size_t count, FILE *stream);\r\n  ```\r\n\r\n  - `ptr`：指向存储读取数据的缓冲区。\r\n  - `size`：每个数据项的大小（字节数）。\r\n  - `count`：要读取的数据项数量。\r\n  - 成功返回实际读取的数据项数量。\r\n\r\n- 示例：\r\n\r\n  ```c\r\n  int arr[5];\r\n  fread(arr, sizeof(int), 5, file);\r\n  for (int i = 0; i < 5; i++) {\r\n      printf("%d ", arr[i]);\r\n  }\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=40496.a43f0df3.js.map