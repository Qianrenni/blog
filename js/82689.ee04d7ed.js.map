{"version":3,"file":"js/82689.ee04d7ed.js","mappings":"qHAAA,8lE","sources":["webpack://myblog/./src/assets/md/software/content/020-43 抽象工厂模式.md"],"sourcesContent":["export default \"## **4.3 抽象工厂模式**\\r\\n\\r\\n- **定义与特点**：抽象工厂模式提供了一系列相关或依赖对象的接口，而无需指定它们具体的类。它是一种更高层次的抽象，允许创建一系列相关的对象，而不必关心这些对象的具体类是什么。\\r\\n  \\r\\n- **工厂方法与抽象工厂的区别**：工厂方法模式关注的是单个产品的创建，而抽象工厂模式则关注一系列相关产品族的创建。\\r\\n  \\r\\n- **示例：跨平台UI组件的实现**：比如为Windows和MacOS设计一套统一的UI组件库，用户界面可以在两个平台上看起来几乎相同，但内部使用了各自平台特定的实现。\\r\\n\\r\\n```python\\r\\nfrom abc import ABC, abstractmethod\\r\\n\\r\\n# 定义抽象产品族\\r\\nclass Button(ABC):\\r\\n    @abstractmethod\\r\\n    def paint(self):\\r\\n        pass\\r\\n\\r\\nclass Checkbox(ABC):\\r\\n    @abstractmethod\\r\\n    def paint(self):\\r\\n        pass\\r\\n\\r\\n# Windows 产品族\\r\\nclass WindowsButton(Button):\\r\\n    def paint(self):\\r\\n        return \\\"Render a button in Windows style.\\\"\\r\\n\\r\\nclass WindowsCheckbox(Checkbox):\\r\\n    def paint(self):\\r\\n        return \\\"Render a checkbox in Windows style.\\\"\\r\\n\\r\\n# MacOS 产品族\\r\\nclass MacOSButton(Button):\\r\\n    def paint(self):\\r\\n        return \\\"Render a button in MacOS style.\\\"\\r\\n\\r\\nclass MacOSCheckbox(Checkbox):\\r\\n    def paint(self):\\r\\n        return \\\"Render a checkbox in MacOS style.\\\"\\r\\n\\r\\n# 抽象工厂接口\\r\\nclass GUIFactory(ABC):\\r\\n    @abstractmethod\\r\\n    def create_button(self) -> Button:\\r\\n        pass\\r\\n\\r\\n    @abstractmethod\\r\\n    def create_checkbox(self) -> Checkbox:\\r\\n        pass\\r\\n\\r\\n# 具体工厂：Windows 工厂\\r\\nclass WindowsFactory(GUIFactory):\\r\\n    def create_button(self) -> Button:\\r\\n        return WindowsButton()\\r\\n\\r\\n    def create_checkbox(self) -> Checkbox:\\r\\n        return WindowsCheckbox()\\r\\n\\r\\n# 具体工厂：MacOS 工厂\\r\\nclass MacOSFactory(GUIFactory):\\r\\n    def create_button(self) -> Button:\\r\\n        return MacOSButton()\\r\\n\\r\\n    def create_checkbox(self) -> Checkbox:\\r\\n        return MacOSCheckbox()\\r\\n\\r\\n# 使用示例\\r\\ndef client_code(factory: GUIFactory):\\r\\n    button = factory.create_button()\\r\\n    checkbox = factory.create_checkbox()\\r\\n    print(button.paint())\\r\\n    print(checkbox.paint())\\r\\n\\r\\nclient_code(WindowsFactory())\\r\\n# 输出:\\r\\n# Render a button in Windows style.\\r\\n# Render a checkbox in Windows style.\\r\\n\\r\\nclient_code(MacOSFactory())\\r\\n# 输出:\\r\\n# Render a button in MacOS style.\\r\\n# Render a checkbox in MacOS style.\\r\\n\\r\\n```\";"],"names":[],"sourceRoot":""}