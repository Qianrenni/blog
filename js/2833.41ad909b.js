"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[2833],{32833:function(n,r,e){e.r(r),r["default"]='## **2. 动态内存分配**\r\n\r\n### **2.1 `new` 和 `delete` 的使用**\r\n\r\n动态内存分配允许在程序运行时分配和释放内存。C++ 提供了 `new` 和 `delete` 操作符来管理堆内存。\r\n\r\n- **分配单个对象**：\r\n\r\n  ```cpp\r\n  int* ptr = new int; // 分配一个整数\r\n  *ptr = 42;          // 赋值\r\n  delete ptr;         // 释放内存\r\n  ```\r\n\r\n- **分配数组**：\r\n\r\n  ```cpp\r\n  int* arr = new int[5]; // 分配一个包含 5 个整数的数组\r\n  for (int i = 0; i < 5; ++i) {\r\n      arr[i] = i + 1; // 初始化数组\r\n  }\r\n  delete[] arr; // 释放数组\r\n  ```\r\n\r\n- **注意事项**：\r\n  - 必须使用 `delete` 或 `delete[]` 释放动态分配的内存，否则会导致内存泄漏。\r\n  - 不要重复释放同一块内存。\r\n\r\n### **2.2 动态数组的分配与释放**\r\n\r\n动态数组允许在运行时决定数组的大小。\r\n\r\n```cpp\r\nint size;\r\ncout << "Enter array size: ";\r\ncin >> size;\r\n\r\nint* dynamicArray = new int[size]; // 动态分配数组\r\nfor (int i = 0; i < size; ++i) {\r\n    dynamicArray[i] = i * 2; // 初始化数组\r\n}\r\n\r\n// 使用数组...\r\ndelete[] dynamicArray; // 释放数组\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=2833.41ad909b.js.map