"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[93456],{93456:function(n,r,e){e.r(r),r["default"]="# 🔥 二、缓存击穿（Cache Breakdown）\r\n\r\n## 📌 定义：\r\n某个热点 key 突然失效（比如过期或被删除），此时有大量并发请求同时访问这个 key，所有请求都穿透到数据库。\r\n\r\n> 和缓存穿透不同的是：缓存击穿中该 key 是存在的，只是暂时失效了。\r\n\r\n## 🧨 危害：\r\n短时间内大量请求直接冲击数据库，可能导致数据库负载过高。\r\n\r\n## ✅ 解决方案：\r\n\r\n1. **互斥锁（Mutex Lock / Redis 分布式锁）**\r\n   - 只让一个线程去加载数据，其他线程等待。\r\n   - 比如使用 `SETNX` 或 Redlock 实现分布式锁。\r\n\r\n2. **逻辑过期时间**\r\n   - 缓存永不过期，但在 value 中保存一个逻辑过期时间。\r\n   - 查询时如果发现已“逻辑过期”，异步更新缓存。\r\n\r\n3. **热点 key 永不过期**\r\n   - 针对特别热点的数据，设置不自动过期，通过后台任务定期刷新。\r\n\r\n---"}}]);
//# sourceMappingURL=93456.c71f5883.js.map