"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[4927],{94927:function(n,r,e){e.r(r),r["default"]='## **4. NIO（New I/O）**\r\n\r\n### **4.1 缓冲区（Buffer）**\r\n\r\n- **定义**：\r\n  - 缓冲区是 NIO 的核心组件，用于存储数据。\r\n  - 常见类型：`ByteBuffer`, `CharBuffer`, `IntBuffer` 等。\r\n- **基本操作**：\r\n  - `put()`：向缓冲区写入数据。\r\n  - `get()`：从缓冲区读取数据。\r\n  - `flip()`：切换到读模式。\r\n  - `clear()`：清空缓冲区，切换到写模式。\r\n\r\n#### **示例：使用 ByteBuffer**\r\n\r\n```java\r\nimport java.nio.ByteBuffer;\r\n\r\npublic class BufferExample {\r\n    public static void main(String[] args) {\r\n        ByteBuffer buffer = ByteBuffer.allocate(10);\r\n\r\n        // 写入数据\r\n        buffer.put((byte) 1);\r\n        buffer.put((byte) 2);\r\n\r\n        // 切换到读模式\r\n        buffer.flip();\r\n\r\n        // 读取数据\r\n        while (buffer.hasRemaining()) {\r\n            System.out.println(buffer.get());\r\n        }\r\n\r\n        // 清空缓冲区\r\n        buffer.clear();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n### **4.2 通道（Channel）**\r\n\r\n- **定义**：\r\n  - 通道是数据传输的载体，支持双向读写。\r\n- **常用类**：\r\n  - `FileChannel`：用于文件操作。\r\n  - `SocketChannel` 和 `ServerSocketChannel`：用于网络通信。\r\n\r\n#### **示例：使用 FileChannel 复制文件**\r\n\r\n```java\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.nio.channels.FileChannel;\r\n\r\npublic class FileChannelExample {\r\n    public static void main(String[] args) throws Exception {\r\n        FileInputStream in = new FileInputStream("source.txt");\r\n        FileOutputStream out = new FileOutputStream("target.txt");\r\n\r\n        FileChannel inChannel = in.getChannel();\r\n        FileChannel outChannel = out.getChannel();\r\n\r\n        outChannel.transferFrom(inChannel, 0, inChannel.size());\r\n\r\n        inChannel.close();\r\n        outChannel.close();\r\n        in.close();\r\n        out.close();\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n### **4.3 文件锁与内存映射文件**\r\n\r\n#### **文件锁**\r\n\r\n- **作用**：\r\n  - 防止多个进程同时修改同一文件。\r\n- **示例**：\r\n\r\n  ```java\r\n  import java.io.RandomAccessFile;\r\n  import java.nio.channels.FileChannel;\r\n  import java.nio.channels.FileLock;\r\n\r\n  public class FileLockExample {\r\n      public static void main(String[] args) throws Exception {\r\n          RandomAccessFile file = new RandomAccessFile("test.txt", "rw");\r\n          FileChannel channel = file.getChannel();\r\n\r\n          FileLock lock = channel.lock(); // 加锁\r\n          System.out.println("File is locked.");\r\n\r\n          lock.release(); // 解锁\r\n          System.out.println("File is unlocked.");\r\n\r\n          channel.close();\r\n          file.close();\r\n      }\r\n  }\r\n  ```\r\n\r\n#### **内存映射文件**\r\n\r\n- **定义**：\r\n  - 将文件直接映射到内存中，提高文件读写效率。\r\n- **示例**：\r\n\r\n  ```java\r\n  import java.io.RandomAccessFile;\r\n  import java.nio.MappedByteBuffer;\r\n  import java.nio.channels.FileChannel;\r\n\r\n  public class MappedFileExample {\r\n      public static void main(String[] args) throws Exception {\r\n          RandomAccessFile file = new RandomAccessFile("test.txt", "rw");\r\n          FileChannel channel = file.getChannel();\r\n\r\n          MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, channel.size());\r\n          buffer.put(0, (byte) \'H\');\r\n          buffer.put(1, (byte) \'i\');\r\n\r\n          channel.close();\r\n          file.close();\r\n      }\r\n  }\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=4927.ae65ef59.js.map