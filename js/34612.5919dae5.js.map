{"version":3,"file":"js/34612.5919dae5.js","mappings":"qHAAA,49B","sources":["webpack://myblog/./src/assets/md/c-plus/content/007-3 默认参数与内联函数.md"],"sourcesContent":["export default \"## **3. 默认参数与内联函数**\\r\\n\\r\\n### **3.1 默认参数的使用**\\r\\n\\r\\n默认参数允许在函数定义时为某些参数指定默认值。如果调用时未提供实参，则使用默认值。\\r\\n\\r\\n- **语法**：\\r\\n\\r\\n  ```cpp\\r\\n  返回类型 函数名(参数1, 参数2 = 默认值) {\\r\\n      // 函数体\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```cpp\\r\\n  void greet(const string& name = \\\"Guest\\\") {\\r\\n      cout << \\\"Hello, \\\" << name << \\\"!\\\" << endl;\\r\\n  }\\r\\n\\r\\n  int main() {\\r\\n      greet();          // 输出：Hello, Guest!\\r\\n      greet(\\\"Alice\\\");   // 输出：Hello, Alice!\\r\\n  }\\r\\n  ```\\r\\n\\r\\n### **3.2 内联函数（`inline` 关键字）**\\r\\n\\r\\n内联函数是一种优化技术，编译器会尝试将函数调用替换为函数体本身，以减少函数调用的开销。\\r\\n\\r\\n- **语法**：\\r\\n\\r\\n  ```cpp\\r\\n  inline 返回类型 函数名(参数列表) {\\r\\n      // 函数体\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```cpp\\r\\n  inline int square(int x) {\\r\\n      return x * x;\\r\\n  }\\r\\n\\r\\n  int main() {\\r\\n      int result = square(5); // 编译器可能会将 square(5) 替换为 5 * 5\\r\\n      cout << \\\"Result: \\\" << result << endl;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **注意事项**：\\r\\n  - 内联函数适合短小的函数，复杂函数不适合内联。\\r\\n  - 内联只是建议，编译器可能忽略。\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}