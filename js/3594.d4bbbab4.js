"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[3594],{23594:function(e,r,n){n.r(r),r["default"]='## **5.1 适配器模式**\r\n\r\n### **定义与特点**\r\n\r\n适配器模式将一个类的接口转换成客户端期望的另一个接口，使得原本不兼容的类可以一起工作。其核心思想是通过适配器类将现有类的接口转换为另一种接口。\r\n\r\n### **类适配器与对象适配器**\r\n\r\n- **类适配器**：通过继承实现适配。\r\n- **对象适配器**：通过组合实现适配。\r\n\r\n### **示例：兼容不同接口的类**\r\n\r\n```python\r\n# 目标接口\r\nclass Target:\r\n    def request(self):\r\n        return "Target: The default target\'s behavior."\r\n\r\n# 被适配的类\r\nclass Adaptee:\r\n    def specific_request(self):\r\n        return ".eetpadA eht fo roivaheb laicepS"\r\n\r\n# 对象适配器\r\nclass Adapter(Target):\r\n    def __init__(self, adaptee):\r\n        self.adaptee = adaptee\r\n\r\n    def request(self):\r\n        return f"Adapter: (TRANSLATED) {self.adaptee.specific_request()[::-1]}"\r\n\r\n# 使用示例\r\nadaptee = Adaptee()\r\nadapter = Adapter(adaptee)\r\nprint(adapter.request())\r\n# 输出: Adapter: (TRANSLATED) Specific behavior of the Adaptee.\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=3594.d4bbbab4.js.map