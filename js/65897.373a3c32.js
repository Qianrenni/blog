"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[65897],{65897:function(r,e,n){n.r(e),e["default"]="## **4.5 连接查询**\r\n\r\n连接查询是SQL中用于从多个表中检索数据的强大工具。通过使用不同的连接类型，可以根据特定条件合并来自不同表的数据。以下是几种主要的连接类型及其详细介绍：\r\n\r\n### **内连接（INNER JOIN）**\r\n\r\n内连接返回两个表中满足连接条件的所有记录。换句话说，只有当连接条件在两个表中都找到匹配项时，才会返回结果集中的行。如果某一行在另一个表中没有对应的匹配项，则该行不会出现在结果集中。\r\n\r\n**示例：**\r\n\r\n```sql\r\nSELECT Orders.OrderID, Customers.CustomerName\r\nFROM Orders\r\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;\r\n```\r\n\r\n### **左连接（LEFT JOIN）**\r\n\r\n左连接返回左表中的所有记录，以及右表中满足连接条件的记录。即使右表中没有与左表记录匹配的项，查询结果也会包含左表中的所有记录，对于那些没有匹配项的字段，结果集中将填充NULL值。\r\n\r\n**示例：**\r\n\r\n```sql\r\nSELECT Customers.CustomerName, Orders.OrderID\r\nFROM Customers\r\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID\r\nORDER BY Customers.CustomerName;\r\n```\r\n\r\n### **右连接（RIGHT JOIN）**\r\n\r\n右连接与左连接相反，它返回右表中的所有记录以及左表中满足连接条件的记录。即使左表中没有与右表记录匹配的项，查询结果也会包含右表中的所有记录，并且对那些没有匹配项的字段填充NULL值。\r\n\r\n**示例：**\r\n\r\n```sql\r\nSELECT Orders.OrderID, Employees.LastName, Employees.FirstName\r\nFROM Orders\r\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\r\nORDER BY Orders.OrderID;\r\n```\r\n\r\n### **全连接（FULL JOIN）**\r\n\r\n全连接返回两个表中的所有记录。如果某个表中的记录在另一个表中没有匹配项，则结果集中另一表的相关字段将填充为NULL。这种连接类型允许你获取尽可能多的数据，不过需要注意的是，并非所有的数据库系统都支持全连接。\r\n\r\n**示例：**\r\n\r\n```sql\r\nSELECT Customers.CustomerName, Orders.OrderID\r\nFROM Customers\r\nFULL JOIN Orders ON Customers.CustomerID = Orders.CustomerID\r\nORDER BY Customers.CustomerName;\r\n```\r\n\r\n### **自连接（Self Join）**\r\n\r\n自连接是指一个表自己与自己进行连接。这通常用于比较同一个表中的记录。执行自连接时，必须使用别名来区分同一个表的不同实例。自连接可以用来查找表中具有层次结构的数据，比如上级和下级之间的关系等。\r\n\r\n**示例：**\r\n\r\n```sql\r\nSELECT a.EmployeeName AS Employee, b.EmployeeName AS Manager\r\nFROM Employees a\r\nJOIN Employees b ON a.ManagerID = b.EmployeeID;\r\n```"}}]);
//# sourceMappingURL=65897.373a3c32.js.map