{"version":3,"file":"js/7816.4960d2f2.js","mappings":"oHAAA,8lD","sources":["webpack://myblog/./src/assets/md/c/content/041-2 栈Stack.md"],"sourcesContent":["export default \"## **2. 栈（Stack）**\\r\\n\\r\\n栈是一种后进先出（LIFO）的数据结构，支持两种主要操作：`push`（入栈）和 `pop`（出栈）。\\r\\n\\r\\n### **2.1 数组实现**\\r\\n\\r\\n- **定义**：\\r\\n\\r\\n  ```c\\r\\n  #define MAX_SIZE 100\\r\\n\\r\\n  struct Stack {\\r\\n      int data[MAX_SIZE];\\r\\n      int top;\\r\\n  };\\r\\n  ```\\r\\n\\r\\n- **实现**：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <stdlib.h>\\r\\n\\r\\n  struct Stack {\\r\\n      int data[MAX_SIZE];\\r\\n      int top;\\r\\n  };\\r\\n\\r\\n  void initStack(struct Stack *stack) {\\r\\n      stack->top = -1;\\r\\n  }\\r\\n\\r\\n  int isFull(struct Stack *stack) {\\r\\n      return stack->top == MAX_SIZE - 1;\\r\\n  }\\r\\n\\r\\n  int isEmpty(struct Stack *stack) {\\r\\n      return stack->top == -1;\\r\\n  }\\r\\n\\r\\n  void push(struct Stack *stack, int value) {\\r\\n      if (isFull(stack)) {\\r\\n          printf(\\\"Stack Overflow\\\\n\\\");\\r\\n          return;\\r\\n      }\\r\\n      stack->data[++(stack->top)] = value;\\r\\n  }\\r\\n\\r\\n  int pop(struct Stack *stack) {\\r\\n      if (isEmpty(stack)) {\\r\\n          printf(\\\"Stack Underflow\\\\n\\\");\\r\\n          return -1;\\r\\n      }\\r\\n      return stack->data[(stack->top)--];\\r\\n  }\\r\\n\\r\\n  int main() {\\r\\n      struct Stack stack;\\r\\n      initStack(&stack);\\r\\n\\r\\n      push(&stack, 10);\\r\\n      push(&stack, 20);\\r\\n      push(&stack, 30);\\r\\n\\r\\n      printf(\\\"Popped: %d\\\\n\\\", pop(&stack));  // 输出：30\\r\\n      printf(\\\"Popped: %d\\\\n\\\", pop(&stack));  // 输出：20\\r\\n\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **2.2 链表实现**\\r\\n\\r\\n- **定义**：\\r\\n\\r\\n  ```c\\r\\n  struct Node {\\r\\n      int data;\\r\\n      struct Node *next;\\r\\n  };\\r\\n\\r\\n  struct Stack {\\r\\n      struct Node *top;\\r\\n  };\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}