{"version":3,"file":"js/71364.1f770154.js","mappings":"qHAAA,++C","sources":["webpack://myblog/./src/assets/md/c-plus/content/013-4 智能指针.md"],"sourcesContent":["export default \"## **4. 智能指针**\\r\\n\\r\\n### **4.1 智能指针简介**\\r\\n\\r\\n智能指针是 C++11 引入的一种资源管理工具，遵循 RAII（Resource Acquisition Is Initialization）原则，自动管理动态分配的内存，避免手动调用 `delete`。\\r\\n\\r\\n- **常用智能指针**：\\r\\n  - `std::unique_ptr`：独占所有权的智能指针。\\r\\n  - `std::shared_ptr`：共享所有权的智能指针。\\r\\n  - `std::weak_ptr`：辅助 `std::shared_ptr`，避免循环引用。\\r\\n\\r\\n### **4.2`std::unique_ptr`**\\r\\n\\r\\n`std::unique_ptr` 是一种独占所有权的智能指针，不能复制，只能移动。\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```cpp\\r\\n  #include <memory>\\r\\n  std::unique_ptr<int> ptr = std::make_unique<int>(42);\\r\\n  cout << *ptr << endl; // 输出 42\\r\\n  // 自动释放内存，无需手动调用 delete\\r\\n  ```\\r\\n\\r\\n### **4.3`std::shared_ptr`**\\r\\n\\r\\n`std::shared_ptr` 允许多个指针共享同一个对象的所有权，引用计数为 0 时自动释放内存。\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```cpp\\r\\n  #include <memory>\\r\\n  std::shared_ptr<int> ptr1 = std::make_shared<int>(42);\\r\\n  std::shared_ptr<int> ptr2 = ptr1; // 共享所有权\\r\\n  cout << *ptr1 << \\\" \\\" << *ptr2 << endl; // 输出 42 42\\r\\n  ```\\r\\n\\r\\n### **4.4 `std::weak_ptr`**\\r\\n\\r\\n`std::weak_ptr` 是一种弱引用智能指针，不增加引用计数，主要用于解决 `std::shared_ptr` 的循环引用问题。\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```cpp\\r\\n  #include <memory>\\r\\n  std::shared_ptr<int> ptr1 = std::make_shared<int>(42);\\r\\n  std::weak_ptr<int> weakPtr = ptr1; // 不增加引用计数\\r\\n\\r\\n  if (auto sharedPtr = weakPtr.lock()) { // 检查是否有效\\r\\n      cout << *sharedPtr << endl; // 输出 42\\r\\n  } else {\\r\\n      cout << \\\"Expired\\\" << endl;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n### **4.5 RAII 原则**\\r\\n\\r\\nRAII 是一种编程范式，强调资源的获取和释放应与对象的生命周期绑定。智能指针正是 RAII 的典型应用。\\r\\n\\r\\n- **优点**：\\r\\n  - 自动管理资源，减少内存泄漏。\\r\\n  - 提高代码的可读性和安全性。\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}