"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[60099],{60099:function(n,r,e){e.r(r),r["default"]='## **2. 数据完整性**\r\n\r\n数据完整性确保数据在传输或存储过程中未被篡改。常用的方法是使用哈希函数和数字签名。\r\n\r\n### **2.1 哈希函数**\r\n\r\n哈希函数将任意长度的数据映射为固定长度的值，且不可逆。常见的哈希算法包括 MD5 和 SHA 系列。\r\n\r\n#### **SHA-256 示例**\r\n\r\n```java\r\nimport java.security.MessageDigest;\r\n\r\npublic class HashExample {\r\n    public static void main(String[] args) throws Exception {\r\n        String data = "Sensitive Data";\r\n        MessageDigest digest = MessageDigest.getInstance("SHA-256");\r\n        byte[] hash = digest.digest(data.getBytes());\r\n        System.out.println("Hash: " + bytesToHex(hash));\r\n    }\r\n\r\n    private static String bytesToHex(byte[] hash) {\r\n        StringBuilder hexString = new StringBuilder();\r\n        for (byte b : hash) {\r\n            String hex = Integer.toHexString(0xff & b);\r\n            if (hex.length() == 1) hexString.append(\'0\');\r\n            hexString.append(hex);\r\n        }\r\n        return hexString.toString();\r\n    }\r\n}\r\n```\r\n\r\n### **2.2 数字签名**\r\n\r\n数字签名结合了哈希函数和非对称加密，用于验证数据的来源和完整性。\r\n\r\n#### **数字签名示例**\r\n\r\n```java\r\nimport java.security.*;\r\nimport java.util.Base64;\r\n\r\npublic class SignatureExample {\r\n    public static void main(String[] args) throws Exception {\r\n        // 生成密钥对\r\n        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");\r\n        keyGen.initialize(2048);\r\n        KeyPair keyPair = keyGen.generateKeyPair();\r\n        PrivateKey privateKey = keyPair.getPrivate();\r\n        PublicKey publicKey = keyPair.getPublic();\r\n\r\n        // 签名\r\n        Signature signature = Signature.getInstance("SHA256withRSA");\r\n        signature.initSign(privateKey);\r\n        signature.update("Sensitive Data".getBytes());\r\n        byte[] digitalSignature = signature.sign();\r\n        System.out.println("Signature: " + Base64.getEncoder().encodeToString(digitalSignature));\r\n\r\n        // 验证签名\r\n        signature.initVerify(publicKey);\r\n        signature.update("Sensitive Data".getBytes());\r\n        boolean isVerified = signature.verify(digitalSignature);\r\n        System.out.println("Verified: " + isVerified);\r\n    }\r\n}\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=60099.ed5626f0.js.map