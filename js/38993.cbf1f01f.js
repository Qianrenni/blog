"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[38993],{38993:function(n,r,s){s.r(r),r["default"]='## **5.4 外观模式**\r\n\r\n### **定义与特点**\r\n\r\n外观模式为子系统中的一组接口提供一个统一的接口，简化客户端与子系统的交互。\r\n\r\n### **提供统一接口简化子系统**\r\n\r\n- 外观模式隐藏了子系统的复杂性，使客户端只需与外观类交互。\r\n\r\n### **示例：复杂系统的简化接口**\r\n\r\n```python\r\n# 子系统类\r\nclass SubsystemA:\r\n    def operation_a(self):\r\n        return "SubsystemA: Operation A"\r\n\r\nclass SubsystemB:\r\n    def operation_b(self):\r\n        return "SubsystemB: Operation B"\r\n\r\nclass SubsystemC:\r\n    def operation_c(self):\r\n        return "SubsystemC: Operation C"\r\n\r\n# 外观类\r\nclass Facade:\r\n    def __init__(self):\r\n        self.subsystem_a = SubsystemA()\r\n        self.subsystem_b = SubsystemB()\r\n        self.subsystem_c = SubsystemC()\r\n\r\n    def operation(self):\r\n        results = []\r\n        results.append(self.subsystem_a.operation_a())\r\n        results.append(self.subsystem_b.operation_b())\r\n        results.append(self.subsystem_c.operation_c())\r\n        return "\\n".join(results)\r\n\r\n# 使用示例\r\nfacade = Facade()\r\nprint(facade.operation())\r\n# 输出:\r\n# SubsystemA: Operation A\r\n# SubsystemB: Operation B\r\n# SubsystemC: Operation C\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=38993.cbf1f01f.js.map