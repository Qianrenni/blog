{"version":3,"file":"js/71339.f106fa42.js","mappings":"qHAAA,m7L","sources":["webpack://myblog/./src/assets/md/javascript/content/016-DOM 操作.md"],"sourcesContent":["export default \"## **DOM 操作**\\r\\n\\r\\nDOM（Document Object Model）是浏览器提供的一套接口，用于将 HTML 文档结构化为一棵树形结构。通过 DOM 操作，开发者可以动态地修改网页内容、样式和行为。\\r\\n\\r\\n---\\r\\n\\r\\n### **1. DOM 树结构**\\r\\n\\r\\nHTML 文档被解析后会生成一个 DOM 树，每个 HTML 元素、属性或文本节点都对应树中的一个节点。\\r\\n\\r\\n- **根节点**：`<html>` 是整个 DOM 树的根节点。\\r\\n- **子节点**：如 `<head>` 和 `<body>` 是 `<html>` 的子节点。\\r\\n- **兄弟节点**：同一父节点下的节点互为兄弟节点。\\r\\n- **叶子节点**：没有子节点的节点，通常是文本节点。\\r\\n\\r\\n**示例 HTML 文档**：\\r\\n\\r\\n```html\\r\\n<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <title>DOM Example</title>\\r\\n</head>\\r\\n<body>\\r\\n    <h1 id=\\\"title\\\">Hello, World!</h1>\\r\\n    <p class=\\\"description\\\">This is a paragraph.</p>\\r\\n</body>\\r\\n</html>\\r\\n```\\r\\n\\r\\n对应的 DOM 树结构：\\r\\n\\r\\n```\\r\\nhtml\\r\\n├── head\\r\\n│   └── title\\r\\n│       └── \\\"DOM Example\\\"\\r\\n└── body\\r\\n    ├── h1#title\\r\\n    │   └── \\\"Hello, World!\\\"\\r\\n    └── p.description\\r\\n        └── \\\"This is a paragraph.\\\"\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### **2. 获取元素**\\r\\n\\r\\nJavaScript 提供了多种方法来获取 DOM 元素。\\r\\n\\r\\n#### **2.1 `getElementById`**\\r\\n\\r\\n- **用途**：通过元素的 `id` 属性获取单个元素。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  document.getElementById(\\\"id\\\");\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const title = document.getElementById(\\\"title\\\");\\r\\n  console.log(title.textContent); // 输出：Hello, World!\\r\\n  ```\\r\\n\\r\\n#### **2.2 `querySelector`**\\r\\n\\r\\n- **用途**：通过 CSS 选择器获取第一个匹配的元素。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  document.querySelector(\\\"selector\\\");\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const description = document.querySelector(\\\".description\\\");\\r\\n  console.log(description.textContent); // 输出：This is a paragraph.\\r\\n  ```\\r\\n\\r\\n#### **2.3`querySelectorAll`**\\r\\n\\r\\n- **用途**：通过 CSS 选择器获取所有匹配的元素，返回一个 `NodeList`。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  document.querySelectorAll(\\\"selector\\\");\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const paragraphs = document.querySelectorAll(\\\"p\\\");\\r\\n  paragraphs.forEach(p => console.log(p.textContent));\\r\\n  // 输出：This is a paragraph.\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **3. 操作属性**\\r\\n\\r\\n可以通过 JavaScript 动态读取或修改 DOM 元素的属性。\\r\\n\\r\\n#### **3.1 `getAttribute`**\\r\\n\\r\\n- **用途**：获取指定属性的值。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  element.getAttribute(\\\"attributeName\\\");\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const link = document.querySelector(\\\"a\\\");\\r\\n  const href = link.getAttribute(\\\"href\\\");\\r\\n  console.log(href); // 输出：https://example.com\\r\\n  ```\\r\\n\\r\\n#### **3.2 `setAttribute`**\\r\\n\\r\\n- **用途**：设置指定属性的值。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  element.setAttribute(\\\"attributeName\\\", \\\"value\\\");\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const link = document.querySelector(\\\"a\\\");\\r\\n  link.setAttribute(\\\"href\\\", \\\"https://new-example.com\\\");\\r\\n  console.log(link.getAttribute(\\\"href\\\")); // 输出：https://new-example.com\\r\\n  ```\\r\\n\\r\\n#### **3.3 直接操作属性**\\r\\n\\r\\n也可以直接通过点运算符访问或修改某些标准属性（如 `id`、`className`、`style` 等）。\\r\\n\\r\\n```javascript\\r\\nconst title = document.getElementById(\\\"title\\\");\\r\\ntitle.id = \\\"newTitle\\\";\\r\\nconsole.log(title.id); // 输出：newTitle\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### **4. 动态修改内容**\\r\\n\\r\\n可以通过 JavaScript 动态修改 DOM 元素的内容。\\r\\n\\r\\n#### **4.1 `innerHTML`**\\r\\n\\r\\n- **用途**：获取或设置元素的 HTML 内容。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  element.innerHTML;\\r\\n  element.innerHTML = \\\"new content\\\";\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const container = document.getElementById(\\\"container\\\");\\r\\n  container.innerHTML = \\\"<strong>New Content</strong>\\\";\\r\\n  ```\\r\\n\\r\\n#### **4.2 `textContent`**\\r\\n\\r\\n- **用途**：获取或设置元素的纯文本内容。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  element.textContent;\\r\\n  element.textContent = \\\"new text\\\";\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const title = document.getElementById(\\\"title\\\");\\r\\n  title.textContent = \\\"Updated Title\\\";\\r\\n  console.log(title.textContent); // 输出：Updated Title\\r\\n  ```\\r\\n\\r\\n#### **区别**\\r\\n\\r\\n- `innerHTML` 会解析 HTML 标签，可能导致 XSS（跨站脚本攻击）风险。\\r\\n- `textContent` 更安全，仅处理纯文本。\\r\\n\\r\\n---\\r\\n\\r\\n### **5. 事件处理**\\r\\n\\r\\n事件是用户与页面交互时触发的行为（如点击、滚动等）。通过事件处理，可以响应这些行为并执行相应的逻辑。\\r\\n\\r\\n#### **5.1`addEventListener`**\\r\\n\\r\\n- **用途**：为元素绑定事件监听器。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  element.addEventListener(\\\"eventType\\\", callback);\\r\\n  ```\\r\\n\\r\\n- **示例**：\\r\\n\\r\\n  ```javascript\\r\\n  const button = document.getElementById(\\\"myButton\\\");\\r\\n  button.addEventListener(\\\"click\\\", () => {\\r\\n      console.log(\\\"Button clicked!\\\");\\r\\n  });\\r\\n  ```\\r\\n\\r\\n#### **5.2 事件冒泡与捕获**\\r\\n\\r\\n- **事件流**：事件在 DOM 树中传播分为三个阶段：\\r\\n  1. **捕获阶段**：从根节点到目标节点。\\r\\n  2. **目标阶段**：到达目标节点。\\r\\n  3. **冒泡阶段**：从目标节点返回根节点。\\r\\n- **默认行为**：事件通常在冒泡阶段触发。\\r\\n\\r\\n**示例**：\\r\\n\\r\\n```html\\r\\n<div id=\\\"outer\\\">\\r\\n    Outer\\r\\n    <div id=\\\"inner\\\">\\r\\n        Inner\\r\\n    </div>\\r\\n</div>\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst outer = document.getElementById(\\\"outer\\\");\\r\\nconst inner = document.getElementById(\\\"inner\\\");\\r\\n\\r\\n// 冒泡阶段\\r\\nouter.addEventListener(\\\"click\\\", () => {\\r\\n    console.log(\\\"Outer clicked (bubbling)\\\");\\r\\n});\\r\\n\\r\\ninner.addEventListener(\\\"click\\\", () => {\\r\\n    console.log(\\\"Inner clicked (bubbling)\\\");\\r\\n});\\r\\n\\r\\n// 捕获阶段\\r\\nouter.addEventListener(\\\"click\\\", () => {\\r\\n    console.log(\\\"Outer clicked (capturing)\\\");\\r\\n}, true);\\r\\n\\r\\ninner.addEventListener(\\\"click\\\", () => {\\r\\n    console.log(\\\"Inner clicked (capturing)\\\");\\r\\n}, true);\\r\\n```\\r\\n\\r\\n点击 `Inner` 后输出顺序：\\r\\n\\r\\n```\\r\\nOuter clicked (capturing)\\r\\nInner clicked (capturing)\\r\\nInner clicked (bubbling)\\r\\nOuter clicked (bubbling)\\r\\n```\\r\\n\\r\\n#### **阻止事件冒泡**\\r\\n\\r\\n- 使用 `event.stopPropagation()` 阻止事件继续传播。\\r\\n- 示例：\\r\\n\\r\\n  ```javascript\\r\\n  inner.addEventListener(\\\"click\\\", (event) => {\\r\\n      event.stopPropagation();\\r\\n      console.log(\\\"Inner clicked\\\");\\r\\n  });\\r\\n\\r\\n  outer.addEventListener(\\\"click\\\", () => {\\r\\n      console.log(\\\"Outer clicked\\\");\\r\\n  });\\r\\n  ```\\r\\n\\r\\n#### **阻止默认行为**\\r\\n\\r\\n- 使用 `event.preventDefault()` 阻止默认行为（如链接跳转、表单提交等）。\\r\\n- 示例：\\r\\n\\r\\n  ```javascript\\r\\n  const link = document.querySelector(\\\"a\\\");\\r\\n  link.addEventListener(\\\"click\\\", (event) => {\\r\\n      event.preventDefault();\\r\\n      console.log(\\\"Link click prevented.\\\");\\r\\n  });\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}