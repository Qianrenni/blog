{"version":3,"file":"js/76202.2a06a00d.js","mappings":"qHAAA,kiE","sources":["webpack://myblog/./src/assets/md/java/content/054-3动态代理的使用步骤.md"],"sourcesContent":["export default \"## **🛠️ 3、动态代理的使用步骤**\\r\\n\\r\\n### ✅ 步骤 1：定义接口（必须）\\r\\n\\r\\n```java\\r\\npublic interface UserService {\\r\\n    void addUser();\\r\\n    void deleteUser();\\r\\n}\\r\\n```\\r\\n\\r\\n> ⚠️ 注意：Java 动态代理只能对接口进行代理！\\r\\n\\r\\n---\\r\\n\\r\\n### ✅ 步骤 2：实现接口类（真实对象）\\r\\n\\r\\n```java\\r\\npublic class UserServiceImpl implements UserService {\\r\\n    @Override\\r\\n    public void addUser() {\\r\\n        System.out.println(\\\"添加用户\\\");\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void deleteUser() {\\r\\n        System.out.println(\\\"删除用户\\\");\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### ✅ 步骤 3：实现 InvocationHandler 接口（定义代理逻辑）\\r\\n\\r\\n```java\\r\\nimport java.lang.reflect.InvocationHandler;\\r\\nimport java.lang.reflect.Method;\\r\\n\\r\\npublic class MyInvocationHandler implements InvocationHandler {\\r\\n\\r\\n    private Object target; // 被代理的对象\\r\\n\\r\\n    public MyInvocationHandler(Object target) {\\r\\n        this.target = target;\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\\r\\n        System.out.println(\\\"【前置增强】方法执行前：\\\" + method.getName());\\r\\n\\r\\n        // 执行真实对象的方法\\r\\n        Object result = method.invoke(target, args);\\r\\n\\r\\n        System.out.println(\\\"【后置增强】方法执行后：\\\" + method.getName());\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### ✅ 步骤 4：生成代理对象并调用\\r\\n\\r\\n```java\\r\\nimport java.lang.reflect.Proxy;\\r\\n\\r\\npublic class TestProxy {\\r\\n    public static void main(String[] args) {\\r\\n        // 创建真实对象\\r\\n        UserService userService = new UserServiceImpl();\\r\\n\\r\\n        // 创建代理处理器\\r\\n        MyInvocationHandler handler = new MyInvocationHandler(userService);\\r\\n\\r\\n        // 生成代理对象\\r\\n        UserService proxy = (UserService) Proxy.newProxyInstance(\\r\\n                userService.getClass().getClassLoader(),   // 类加载器\\r\\n                userService.getClass().getInterfaces(),   // 被代理对象实现的接口\\r\\n                handler                                   // 代理逻辑处理器\\r\\n        );\\r\\n\\r\\n        // 调用代理对象的方法\\r\\n        proxy.addUser();\\r\\n        proxy.deleteUser();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}