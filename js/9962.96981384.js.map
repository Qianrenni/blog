{"version":3,"file":"js/9962.96981384.js","mappings":"oHAAA,u3C","sources":["webpack://myblog/./src/assets/md/c/content/022-6 动态内存分配.md"],"sourcesContent":["export default \"## **6. 动态内存分配**\\r\\n\\r\\n### **6.1 常用函数**\\r\\n\\r\\n- **`malloc`**：\\r\\n  - 分配指定大小的内存块。\\r\\n  - 语法：`void *malloc(size_t size);`\\r\\n  - 示例：\\r\\n\\r\\n    ```c\\r\\n    int *arr = (int *)malloc(5 * sizeof(int));\\r\\n    ```\\r\\n\\r\\n- **`calloc`**：\\r\\n  - 分配并初始化内存块（所有字节初始化为 0）。\\r\\n  - 语法：`void *calloc(size_t num, size_t size);`\\r\\n  - 示例：\\r\\n\\r\\n    ```c\\r\\n    int *arr = (int *)calloc(5, sizeof(int));\\r\\n    ```\\r\\n\\r\\n- **`realloc`**：\\r\\n  - 调整已分配内存块的大小。\\r\\n  - 语法：`void *realloc(void *ptr, size_t new_size);`\\r\\n  - 示例：\\r\\n\\r\\n    ```c\\r\\n    arr = (int *)realloc(arr, 10 * sizeof(int));\\r\\n    ```\\r\\n\\r\\n- **`free`**：\\r\\n  - 释放动态分配的内存。\\r\\n  - 语法：`void free(void *ptr);`\\r\\n  - 示例：\\r\\n\\r\\n    ```c\\r\\n    free(arr);\\r\\n    ```\\r\\n\\r\\n### **6.2 动态数组的创建与释放**\\r\\n\\r\\n- 动态数组的创建和释放示例：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <stdlib.h>\\r\\n\\r\\n  int main() {\\r\\n      int n;\\r\\n      printf(\\\"Enter the number of elements: \\\");\\r\\n      scanf(\\\"%d\\\", &n);\\r\\n\\r\\n      int *arr = (int *)malloc(n * sizeof(int));  // 动态分配数组\\r\\n      if (arr == NULL) {\\r\\n          printf(\\\"Memory allocation failed.\\\\n\\\");\\r\\n          return -1;\\r\\n      }\\r\\n\\r\\n      for (int i = 0; i < n; i++) {\\r\\n          arr[i] = i + 1;\\r\\n      }\\r\\n\\r\\n      for (int i = 0; i < n; i++) {\\r\\n          printf(\\\"%d \\\", arr[i]);\\r\\n      }\\r\\n\\r\\n      free(arr);  // 释放内存\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}