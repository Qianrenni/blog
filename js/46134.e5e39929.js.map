{"version":3,"file":"js/46134.e5e39929.js","mappings":"qHAAA,2mC","sources":["webpack://myblog/./src/assets/md/algorithm/content/001-一算法基础理论.md"],"sourcesContent":["export default \"# **一、算法基础理论**\\r\\n\\r\\n1. **算法定义**  \\r\\n   - 有限步骤内解决特定问题的明确指令集  \\r\\n   - 五大特性：输入、输出、确定性、有限性、可行性  \\r\\n\\r\\n2. **复杂度分析**  \\r\\n   - **时间复杂度**：\\r\\n     - O(g(n)) 表示渐进上界\\r\\n     - Ω(g(n)) 表示渐进下界\\r\\n     - θ(g(n)) 表示渐进平均时间复杂度\\r\\n\\r\\n     ```text\\r\\n     O(1) < O(log n) < O(n) < O(n log n) < O(n²) < O(2ⁿ)\\r\\n     ```\\r\\n\\r\\n   - **空间复杂度**：递归调用栈、辅助空间计算  \\r\\n   - **分析方法**：\\r\\n     - 递归树\\r\\n     - 主定理（Master Theorem）:  \\r\\n        - 阐述:  \\r\\n          >如果$a>=1 $ 和$ b>1$ 且 $f(n)$ 是非负函数,$T(n) = aT(n/b)+f(n) $。\\r\\n          1. $若对某个常数 \\\\epsilon > 0 有  f(n) = O(n^{\\\\log_b a - \\\\epsilon}) ，则  T(n) = \\\\Theta(n^{\\\\log_b a})。$\\r\\n          2. $若有f(n)=\\\\Theta(n^{\\\\log_b a}),则 T(n) = \\\\Theta(n^{\\\\log_b a}\\\\lg n)$\\r\\n          3. $若对于某个常数\\\\epsilon>0 有 f(n)=\\\\Omega(n^{\\\\log_b a+\\\\epsilon}),且对于某个常数c<1和所有足够大的n有af(n/b)<=cf(n),则T(n)=\\\\Theta(f(n))$\\r\\n        - 举例:  \\r\\n         1. 二分查找:\\r\\n           $T(n)=T(n/2)+\\\\Theta(1),其中a=1,b=2,f(n)=\\\\Theta(1)$，则 $T(n)=\\\\Theta(\\\\lg n)$\\r\\n         2. 归并排序:\\r\\n           $T(n)=2T(n/2)+\\\\Theta(n),其中a=2,b=2,f(n)=\\\\Theta(n),其中f(n)=\\\\Theta(n^{\\\\log_b a}),所以T(n)=\\\\Theta(n{\\\\log^n})$\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}