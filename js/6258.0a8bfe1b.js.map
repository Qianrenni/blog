{"version":3,"file":"js/6258.0a8bfe1b.js","mappings":"oHAAA,wxH","sources":["webpack://myblog/./src/assets/md/java/content/039-1 JDBC.md"],"sourcesContent":["export default \"## **1. JDBC**\\r\\n\\r\\nJDBC（Java Database Connectivity）是 Java 提供的一组 API，用于与关系型数据库进行交互。它通过标准接口屏蔽了底层数据库的实现细节，使得开发者可以使用统一的方式操作不同的数据库。\\r\\n\\r\\n---\\r\\n\\r\\n### **1.1 JDBC 的基本使用**\\r\\n\\r\\nJDBC 操作数据库的基本步骤如下：\\r\\n\\r\\n1. **加载驱动程序**\\r\\n   - 使用 `Class.forName()` 方法加载数据库驱动程序。\\r\\n   - 现代 JDBC 驱动程序通常支持自动加载，因此在某些情况下可以省略这一步。\\r\\n\\r\\n   ```java\\r\\n   Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\");\\r\\n   ```\\r\\n\\r\\n2. **建立连接**\\r\\n   - 使用 `DriverManager.getConnection()` 方法创建数据库连接。\\r\\n   - URL 格式因数据库而异，例如 MySQL 的连接 URL 是：\\r\\n\\r\\n     ```\\r\\n     jdbc:mysql://[host]:[port]/[database]?user=[username]&password=[password]\\r\\n     ```\\r\\n\\r\\n   ```java\\r\\n   String url = \\\"jdbc:mysql://localhost:3306/testdb\\\";\\r\\n   String user = \\\"root\\\";\\r\\n   String password = \\\"password\\\";\\r\\n   Connection conn = DriverManager.getConnection(url, user, password);\\r\\n   ```\\r\\n\\r\\n3. **执行 SQL**\\r\\n   - 创建 `Statement` 或 `PreparedStatement` 对象来执行 SQL 查询。\\r\\n   - 使用 `executeQuery()` 执行查询语句，返回 `ResultSet`。\\r\\n   - 使用 `executeUpdate()` 执行更新、插入或删除语句，返回受影响的行数。\\r\\n\\r\\n   ```java\\r\\n   // 查询示例\\r\\n   Statement stmt = conn.createStatement();\\r\\n   ResultSet rs = stmt.executeQuery(\\\"SELECT * FROM users\\\");\\r\\n\\r\\n   while (rs.next()) {\\r\\n       System.out.println(rs.getString(\\\"name\\\"));\\r\\n   }\\r\\n\\r\\n   // 插入示例\\r\\n   PreparedStatement pstmt = conn.prepareStatement(\\\"INSERT INTO users(name, age) VALUES(?, ?)\\\");\\r\\n   pstmt.setString(1, \\\"Alice\\\");\\r\\n   pstmt.setInt(2, 25);\\r\\n   int rowsAffected = pstmt.executeUpdate();\\r\\n   ```\\r\\n\\r\\n4. **关闭资源**\\r\\n   - 按照打开顺序的逆序关闭资源（`ResultSet` -> `Statement` -> `Connection`）。\\r\\n   - 使用 try-with-resources 自动关闭资源。\\r\\n\\r\\n   ```java\\r\\n   try (Connection conn = DriverManager.getConnection(url, user, password);\\r\\n        Statement stmt = conn.createStatement();\\r\\n        ResultSet rs = stmt.executeQuery(\\\"SELECT * FROM users\\\")) {\\r\\n\\r\\n       while (rs.next()) {\\r\\n           System.out.println(rs.getString(\\\"name\\\"));\\r\\n       }\\r\\n   } catch (SQLException e) {\\r\\n       e.printStackTrace();\\r\\n   }\\r\\n   ```\\r\\n\\r\\n---\\r\\n\\r\\n### **1.2 事务管理**\\r\\n\\r\\n事务是一组逻辑操作单元，要么全部成功提交，要么全部回滚。JDBC 支持事务管理，主要通过以下方法实现：\\r\\n\\r\\n1. **设置自动提交模式**\\r\\n   - 默认情况下，JDBC 连接处于自动提交模式（`autoCommit=true`），即每条 SQL 语句都会立即生效。\\r\\n   - 可以通过 `conn.setAutoCommit(false)` 关闭自动提交模式，手动控制事务。\\r\\n\\r\\n   ```java\\r\\n   conn.setAutoCommit(false); // 关闭自动提交\\r\\n   ```\\r\\n\\r\\n2. **提交事务**\\r\\n   - 在所有操作完成后调用 `conn.commit()` 提交事务。\\r\\n\\r\\n   ```java\\r\\n   conn.commit(); // 提交事务\\r\\n   ```\\r\\n\\r\\n3. **回滚事务**\\r\\n   - 如果发生异常，调用 `conn.rollback()` 回滚事务。\\r\\n\\r\\n   ```java\\r\\n   try {\\r\\n       conn.setAutoCommit(false);\\r\\n       // 执行多个 SQL 操作\\r\\n       conn.commit();\\r\\n   } catch (SQLException e) {\\r\\n       conn.rollback(); // 发生异常时回滚\\r\\n       e.printStackTrace();\\r\\n   } finally {\\r\\n       conn.setAutoCommit(true); // 恢复默认的自动提交模式\\r\\n   }\\r\\n   ```\\r\\n\\r\\n---\\r\\n\\r\\n### **1.3 连接池**\\r\\n\\r\\n频繁地创建和关闭数据库连接会导致性能开销，因此引入了连接池技术。连接池预先创建一组数据库连接，并在需要时分配给应用程序使用，使用完毕后归还到池中。\\r\\n\\r\\n常见的连接池实现包括 HikariCP、C3P0 和 DBCP。\\r\\n\\r\\n#### **HikariCP 示例**\\r\\n\\r\\n```java\\r\\nimport com.zaxxer.hikari.HikariConfig;\\r\\nimport com.zaxxer.hikari.HikariDataSource;\\r\\n\\r\\npublic class HikariExample {\\r\\n    public static void main(String[] args) throws Exception {\\r\\n        HikariConfig config = new HikariConfig();\\r\\n        config.setJdbcUrl(\\\"jdbc:mysql://localhost:3306/testdb\\\");\\r\\n        config.setUsername(\\\"root\\\");\\r\\n        config.setPassword(\\\"password\\\");\\r\\n        config.setMaximumPoolSize(10);\\r\\n\\r\\n        try (HikariDataSource ds = new HikariDataSource(config);\\r\\n             Connection conn = ds.getConnection()) {\\r\\n\\r\\n            Statement stmt = conn.createStatement();\\r\\n            ResultSet rs = stmt.executeQuery(\\\"SELECT * FROM users\\\");\\r\\n\\r\\n            while (rs.next()) {\\r\\n                System.out.println(rs.getString(\\\"name\\\"));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\";"],"names":[],"sourceRoot":""}