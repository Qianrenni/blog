{"version":3,"file":"js/74674.d887b313.js","mappings":"qHAAA,2/D","sources":["webpack://myblog/./src/assets/md/c/content/051-1 错误检测与调试技巧.md"],"sourcesContent":["export default \"## **1. 错误检测与调试技巧**\\r\\n\\r\\n### **1.1 检测错误的常见方法**\\r\\n\\r\\n#### **1. 返回值检查**\\r\\n\\r\\n- 许多 C 标准库函数会通过返回值指示成功或失败。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  FILE *file = fopen(\\\"example.txt\\\", \\\"r\\\");\\r\\n  if (file == NULL) {\\r\\n      printf(\\\"Error: Could not open file.\\\\n\\\");\\r\\n      return -1;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n#### **2. 使用 `errno`**\\r\\n\\r\\n- `errno` 是一个全局变量，定义在 `<errno.h>` 中，用于存储最近一次系统调用或库函数发生的错误代码。\\r\\n- 常见的错误代码：\\r\\n  - `ENOENT`：文件或目录不存在。\\r\\n  - `ENOMEM`：内存不足。\\r\\n  - `EACCES`：权限不足。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <errno.h>\\r\\n  #include <string.h>\\r\\n\\r\\n  int main() {\\r\\n      FILE *file = fopen(\\\"nonexistent.txt\\\", \\\"r\\\");\\r\\n      if (file == NULL) {\\r\\n          printf(\\\"Error: %s\\\\n\\\", strerror(errno));  // 打印错误信息\\r\\n          return -1;\\r\\n      }\\r\\n      fclose(file);\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n#### **3. 断言（`assert`）**\\r\\n\\r\\n- `assert` 宏定义在 `<assert.h>` 中，用于在调试阶段验证条件是否为真。\\r\\n- 如果断言失败，程序会终止并输出错误信息。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <assert.h>\\r\\n\\r\\n  int main() {\\r\\n      int x = 5;\\r\\n      assert(x > 10);  // 断言失败时终止程序\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **1.2 调试技巧**\\r\\n\\r\\n#### **1. 使用调试工具**\\r\\n\\r\\n- **GDB**（GNU Debugger）是常用的调试工具，可以帮助定位程序中的错误。\\r\\n- 示例：\\r\\n\\r\\n  ```bash\\r\\n  gcc -g program.c -o program  # 编译时添加调试信息\\r\\n  gdb ./program               # 启动 GDB\\r\\n  ```\\r\\n\\r\\n#### **2. 打印调试信息**\\r\\n\\r\\n- 在关键位置插入 `printf` 输出变量值或状态信息。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  int result = someFunction();\\r\\n  printf(\\\"Result: %d\\\\n\\\", result);\\r\\n  ```\\r\\n\\r\\n#### **3. 日志记录**\\r\\n\\r\\n- 使用日志文件记录程序运行过程中的关键事件。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n\\r\\n  void logMessage(const char *message) {\\r\\n      FILE *logFile = fopen(\\\"log.txt\\\", \\\"a\\\");\\r\\n      if (logFile != NULL) {\\r\\n          fprintf(logFile, \\\"%s\\\\n\\\", message);\\r\\n          fclose(logFile);\\r\\n      }\\r\\n  }\\r\\n\\r\\n  int main() {\\r\\n      logMessage(\\\"Program started.\\\");\\r\\n      // 其他代码\\r\\n      logMessage(\\\"Program finished.\\\");\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}