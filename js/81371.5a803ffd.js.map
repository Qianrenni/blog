{"version":3,"file":"js/81371.5a803ffd.js","mappings":"qHAAA,o/E","sources":["webpack://myblog/./src/assets/md/database/content/052-2 MongoDB简介.md"],"sourcesContent":["export default \"## **2. MongoDB简介**\\r\\n\\r\\n**MongoDB** 是一种流行的 NoSQL 数据库，属于文档数据库的范畴。它以灵活的文档模型和强大的扩展性著称，广泛应用于现代应用程序开发中。MongoDB 使用 BSON（Binary JSON）格式存储数据，支持动态模式设计，允许开发者快速迭代和调整数据结构。\\r\\n\\r\\n---\\r\\n\\r\\n### **2.1 核心特点**\\r\\n\\r\\n- **文档模型**:\\r\\n  MongoDB 中的数据以 **文档** 的形式存储，每个文档是一个类似于 JSON 的键值对集合。文档可以嵌套复杂的数据结构，例如数组、子文档等。\\r\\n\\r\\n  ```json\\r\\n  {\\r\\n    \\\"_id\\\": ObjectId(\\\"653f8e2a9c8b4d1234abcd56\\\"),\\r\\n    \\\"name\\\": \\\"Alice\\\",\\r\\n    \\\"age\\\": 30,\\r\\n    \\\"address\\\": {\\r\\n      \\\"city\\\": \\\"New York\\\",\\r\\n      \\\"zip\\\": \\\"10001\\\"\\r\\n    },\\r\\n    \\\"hobbies\\\": [\\\"reading\\\", \\\"traveling\\\"]\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **动态模式**:\\r\\n  MongoDB 不需要预先定义固定的表结构（Schema），每个文档可以有不同的字段。这种灵活性使得 MongoDB 非常适合快速变化的应用场景。\\r\\n\\r\\n- **高可扩展性**:\\r\\n  MongoDB 支持水平扩展，通过分片（Sharding）技术将数据分布到多个服务器上，从而支持大规模数据集和高吞吐量的工作负载。\\r\\n\\r\\n- **丰富的查询语言**:\\r\\n  MongoDB 提供了强大的查询功能，支持复杂的过滤、聚合、排序等操作。其查询语言类似于 SQL，但更灵活，能够处理嵌套数据。\\r\\n\\r\\n- **内置复制和高可用性**:\\r\\n  MongoDB 支持副本集（Replica Set），即一组维护相同数据集的 MongoDB 实例。主节点负责写操作，从节点用于读操作或故障切换，确保系统的高可用性和容灾能力。\\r\\n\\r\\n- **持久化与安全性**:\\r\\n  数据存储在磁盘上，并通过日志（Journaling）机制保证数据的持久性。此外，MongoDB 提供了用户认证、角色管理、加密等功能，保障数据安全。\\r\\n\\r\\n---\\r\\n\\r\\n### **2.2 基本操作**\\r\\n\\r\\nMongoDB 提供了一个交互式 shell 和丰富的 API 来操作数据。以下是一些常见的基本操作：\\r\\n\\r\\n- **插入文档**:\\r\\n  使用 `insertOne` 或 `insertMany` 方法向集合中添加文档。\\r\\n\\r\\n  ```javascript\\r\\n  db.users.insertOne({\\r\\n    name: \\\"Bob\\\",\\r\\n    age: 25,\\r\\n    hobbies: [\\\"gaming\\\", \\\"cooking\\\"]\\r\\n  });\\r\\n  ```\\r\\n\\r\\n- **查询文档**:\\r\\n  使用 `find` 方法查询集合中的文档。\\r\\n\\r\\n  ```javascript\\r\\n  // 查询所有年龄大于 20 的用户\\r\\n  db.users.find({ age: { $gt: 20 } });\\r\\n  ```\\r\\n\\r\\n- **更新文档**:\\r\\n  使用 `updateOne` 或 `updateMany` 方法更新文档。\\r\\n\\r\\n  ```javascript\\r\\n  // 将名字为 \\\"Bob\\\" 的用户的年龄更新为 26\\r\\n  db.users.updateOne(\\r\\n    { name: \\\"Bob\\\" },\\r\\n    { $set: { age: 26 } }\\r\\n  );\\r\\n  ```\\r\\n\\r\\n- **删除文档**:\\r\\n  使用 `deleteOne` 或 `deleteMany` 方法删除文档。\\r\\n\\r\\n  ```javascript\\r\\n  // 删除名字为 \\\"Bob\\\" 的用户\\r\\n  db.users.deleteOne({ name: \\\"Bob\\\" });\\r\\n  ```\\r\\n\\r\\n- **聚合操作**:\\r\\n  使用 `aggregate` 方法进行复杂的数据分析。\\r\\n\\r\\n  ```javascript\\r\\n  // 按城市分组并统计每个城市的用户数量\\r\\n  db.users.aggregate([\\r\\n    { $group: { _id: \\\"$address.city\\\", count: { $sum: 1 } } }\\r\\n  ]);\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **2.3 应用场景**\\r\\n\\r\\nMongoDB 的灵活性和高性能使其适用于多种应用场景，包括但不限于：\\r\\n\\r\\n- **内容管理系统（CMS）**:\\r\\n  动态模式设计非常适合存储不同类型的文档，如文章、图片、评论等。\\r\\n\\r\\n- **实时分析**:\\r\\n  使用 MongoDB 的聚合框架进行实时数据分析，例如监控用户行为、生成统计报告等。\\r\\n\\r\\n- **物联网（IoT）**:\\r\\n  处理来自传感器设备的大量非结构化数据，支持高并发写入和快速查询。\\r\\n\\r\\n- **移动应用后端**:\\r\\n  提供灵活的数据存储方案，支持快速开发和迭代。\\r\\n\\r\\n- **电子商务**:\\r\\n  存储产品信息、订单数据和用户资料，支持复杂的查询和推荐算法。\\r\\n\\r\\n---\\r\\n\\r\\n以下是设计模式的基本大纲，涵盖了设计模式的核心内容和分类。此大纲可以帮助你系统地学习和理解设计模式的概念及其应用场景。\";"],"names":[],"sourceRoot":""}