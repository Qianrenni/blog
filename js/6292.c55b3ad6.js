"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[6292],{96292:function(n,r,e){e.r(r),r["default"]='## **3. Set**\r\n\r\n### **3.1 HashSet**\r\n\r\n- **特点**：\r\n  - 基于哈希表实现。\r\n  - 无序且不允许重复元素。\r\n- **适用场景**：\r\n  - 需要快速查找元素时。\r\n- **示例**：\r\n\r\n  ```java\r\n  Set<String> set = new HashSet<>();\r\n  set.add("A");\r\n  set.add("B");\r\n  set.add("A"); // 不会添加重复元素\r\n  System.out.println(set); // 输出：[A, B]\r\n  ```\r\n\r\n### **3.2 TreeSet**\r\n\r\n- **特点**：\r\n  - 基于红黑树实现。\r\n  - 按自然顺序或自定义顺序排序。\r\n- **适用场景**：\r\n  - 需要有序存储且不重复的元素时。\r\n- **示例**：\r\n\r\n  ```java\r\n  Set<Integer> set = new TreeSet<>();\r\n  set.add(3);\r\n  set.add(1);\r\n  set.add(2);\r\n  System.out.println(set); // 输出：[1, 2, 3]\r\n  ```\r\n\r\n### **3.3 LinkedHashSet**\r\n\r\n- **特点**：\r\n  - 基于哈希表和链表实现。\r\n  - 保持插入顺序且不允许重复元素。\r\n- **适用场景**：\r\n  - 需要保持插入顺序时。\r\n- **示例**：\r\n\r\n  ```java\r\n  Set<String> set = new LinkedHashSet<>();\r\n  set.add("A");\r\n  set.add("B");\r\n  set.add("C");\r\n  System.out.println(set); // 输出：[A, B, C]\r\n  ```\r\n\r\n---'}}]);
//# sourceMappingURL=6292.c55b3ad6.js.map