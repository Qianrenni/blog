"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[7545],{87545:function(e,r,s){s.r(r),r["default"]='## **6.3 观察者模式**\r\n\r\n### **定义与特点**\r\n\r\n观察者模式定义了一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都会收到通知并自动更新。\r\n\r\n### **发布-订阅机制**\r\n\r\n- 主题（Subject）维护观察者列表。\r\n- 观察者（Observer）实现更新接口。\r\n\r\n### **示例：事件监听器**\r\n\r\n```python\r\nclass Subject:\r\n    def __init__(self):\r\n        self._observers = []\r\n\r\n    def attach(self, observer):\r\n        self._observers.append(observer)\r\n\r\n    def notify(self, message):\r\n        for observer in self._observers:\r\n            observer.update(message)\r\n\r\nclass Observer:\r\n    def update(self, message):\r\n        pass\r\n\r\nclass ConcreteObserver(Observer):\r\n    def __init__(self, name):\r\n        self.name = name\r\n\r\n    def update(self, message):\r\n        print(f"{self.name} received message: {message}")\r\n\r\n# 使用示例\r\nsubject = Subject()\r\nobserver1 = ConcreteObserver("Observer1")\r\nobserver2 = ConcreteObserver("Observer2")\r\n\r\nsubject.attach(observer1)\r\nsubject.attach(observer2)\r\n\r\nsubject.notify("Hello Observers!")\r\n# 输出:\r\n# Observer1 received message: Hello Observers!\r\n# Observer2 received message: Hello Observers!\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=7545.b340102f.js.map