"use strict";(self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[]).push([[9497],{49497:function(n,r,a){a.r(r),r["default"]='## **1. Lambda 表达式**\r\n\r\nLambda 表达式是一种匿名函数，允许我们以简洁的方式定义内联函数对象，常用于 STL 算法中。\r\n\r\n### **1.1 Lambda 的定义与捕获列表**\r\n- **语法**：\r\n  ```cpp\r\n  [捕获列表](参数列表) -> 返回类型 {\r\n      函数体\r\n  }\r\n  ```\r\n  - **捕获列表**：指定 Lambda 表达式如何访问外部变量。\r\n    - `[=]`：按值捕获所有外部变量。\r\n    - `[&]`：按引用捕获所有外部变量。\r\n    - `[x, &y]`：按值捕获 `x`，按引用捕获 `y`。\r\n  - **参数列表**：类似于普通函数的参数列表。\r\n  - **返回类型**：可以省略，编译器会自动推导。\r\n\r\n**示例**：\r\n```cpp\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n    int x = 10, y = 20;\r\n\r\n    // 按值捕获 x 和 y\r\n    auto lambda = [x, y]() { return x + y; };\r\n    cout << "Sum: " << lambda() << endl; // 输出：30\r\n\r\n    // 按引用捕获 y\r\n    auto lambdaRef = [&y](int a) { y += a; };\r\n    lambdaRef(5);\r\n    cout << "New y: " << y << endl; // 输出：25\r\n}\r\n```\r\n\r\n### **1.2 Lambda 在 STL 中的应用**\r\nLambda 表达式广泛应用于 STL 算法中，例如 `std::for_each`, `std::sort` 等。\r\n\r\n**示例**：\r\n以下是一个使用 Lambda 表达式的例子，对 `vector` 进行排序和遍历：\r\n```cpp\r\n#include <vector>\r\n#include <algorithm>\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n    vector<int> v = {5, 2, 8, 1, 9};\r\n\r\n    // 使用 Lambda 表达式进行排序\r\n    sort(v.begin(), v.end(), [](int a, int b) { return a > b; }); // 降序排序\r\n    for (int x : v) cout << x << " "; // 输出：9 8 5 2 1\r\n    cout << endl;\r\n\r\n    // 使用 Lambda 表达式遍历\r\n    for_each(v.begin(), v.end(), [](int x) { cout << x * 2 << " "; }); // 输出每个元素的两倍\r\n    cout << endl;\r\n}\r\n```\r\n\r\n---'}}]);
//# sourceMappingURL=9497.e467d2b9.js.map