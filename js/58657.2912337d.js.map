{"version":3,"file":"js/58657.2912337d.js","mappings":"qHAAA,ihD","sources":["webpack://myblog/./src/assets/md/c/content/052-2 errno 的使用.md"],"sourcesContent":["export default \"## **2. `errno` 的使用**\\r\\n\\r\\n`errno` 是一个全局变量，用于存储错误代码。它通常与系统调用或标准库函数一起使用，帮助开发者识别错误类型。\\r\\n\\r\\n### **2.1 `errno` 的工作原理**\\r\\n\\r\\n- 当函数执行失败时，会将特定的错误代码写入 `errno`。\\r\\n- 程序可以通过检查 `errno` 来确定错误的具体原因。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <errno.h>\\r\\n  #include <string.h>\\r\\n\\r\\n  int main() {\\r\\n      FILE *file = fopen(\\\"missing_file.txt\\\", \\\"r\\\");\\r\\n      if (file == NULL) {\\r\\n          printf(\\\"Error code: %d\\\\n\\\", errno);       // 打印错误代码\\r\\n          printf(\\\"Error message: %s\\\\n\\\", strerror(errno));  // 打印错误描述\\r\\n      }\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **2.2 常见的 `errno` 错误代码**\\r\\n\\r\\n| 错误代码   | 描述                                   |\\r\\n|------------|----------------------------------------|\\r\\n| `EPERM`    | 操作不允许                            |\\r\\n| `ENOENT`   | 文件或目录不存在                      |\\r\\n| `ENOMEM`   | 内存不足                              |\\r\\n| `EACCES`   | 权限不足                              |\\r\\n| `EINVAL`   | 无效参数                              |\\r\\n| `EIO`      | 输入/输出错误                         |\\r\\n\\r\\n---\\r\\n\\r\\n### **2.3 清除 `errno`**\\r\\n\\r\\n- 在某些情况下，`errno` 可能会被设置为非零值，即使没有发生错误。\\r\\n- 因此，在检测错误之前应先将 `errno` 设置为 `0`。\\r\\n- 示例：\\r\\n\\r\\n  ```c\\r\\n  #include <stdio.h>\\r\\n  #include <errno.h>\\r\\n  #include <string.h>\\r\\n\\r\\n  int main() {\\r\\n      errno = 0;  // 初始化 errno\\r\\n      FILE *file = fopen(\\\"missing_file.txt\\\", \\\"r\\\");\\r\\n      if (file == NULL && errno != 0) {\\r\\n          printf(\\\"Error: %s\\\\n\\\", strerror(errno));\\r\\n      }\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}