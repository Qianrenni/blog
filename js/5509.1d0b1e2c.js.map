{"version":3,"file":"js/5509.1d0b1e2c.js","mappings":"oHAAA,45J","sources":["webpack://myblog/./src/assets/md/c-plus/content/003-基本语法.md"],"sourcesContent":["export default \"## **基本语法**\\r\\n\\r\\nC++ 的基本语法是学习这门语言的基础。它包括程序的结构、数据类型、变量与常量、输入输出等内容。以下将对这些内容进行详细讲解。\\r\\n\\r\\n---\\r\\n\\r\\n### **1. 程序结构：`main()` 函数、注释、头文件**\\r\\n\\r\\n#### **1.1 `main()` 函数**\\r\\n\\r\\n`main()` 是 C++ 程序的入口点，所有的 C++ 程序都从 `main()` 函数开始执行。`main()` 函数的返回值和参数有以下两种常见形式：\\r\\n\\r\\n- **无参数版本**：\\r\\n\\r\\n  ```cpp\\r\\n  int main() {\\r\\n      // 程序代码\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n  - 返回值为 `int` 类型，通常返回 `0` 表示程序成功执行。\\r\\n  \\r\\n- **带参数版本**（用于命令行参数）：\\r\\n\\r\\n  ```cpp\\r\\n  int main(int argc, char* argv[]) {\\r\\n      // argc: 参数个数\\r\\n      // argv: 参数数组\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n  - `argc` 表示命令行参数的数量，`argv` 是一个字符串数组，存储了每个参数的内容。\\r\\n\\r\\n#### **1.2 注释**\\r\\n\\r\\nC++ 提供了两种注释方式，用于解释代码或临时禁用某段代码：\\r\\n\\r\\n- **单行注释**：使用 `//` 开头，注释内容写在同一行。\\r\\n\\r\\n  ```cpp\\r\\n  // 这是一个单行注释\\r\\n  int x = 10; // 这也是注释\\r\\n  ```\\r\\n\\r\\n- **多行注释**：使用 `/*` 和 `*/` 包裹注释内容，可以跨越多行。\\r\\n\\r\\n  ```cpp\\r\\n  /* \\r\\n   * 这是一个多行注释\\r\\n   * 可以跨越多行书写\\r\\n   */\\r\\n  ```\\r\\n\\r\\n#### **1.3 头文件**\\r\\n\\r\\n头文件包含了函数声明、类定义和其他必要的信息，通常以 `.h` 或 `.hpp` 结尾。C++ 中常见的头文件包括：\\r\\n\\r\\n- **标准库头文件**：如 `<iostream>`, `<vector>`, `<string>` 等。\\r\\n- **自定义头文件**：用户自己编写的头文件，使用 `#include \\\"filename.h\\\"` 引入。\\r\\n\\r\\n例如：\\r\\n\\r\\n```cpp\\r\\n#include <iostream> // 标准输入输出库\\r\\n#include \\\"myheader.h\\\" // 自定义头文件\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### **2. 数据类型**\\r\\n\\r\\n#### **2.1 基本数据类型**\\r\\n\\r\\nC++ 提供了几种基本数据类型，用于存储不同类型的数据：\\r\\n\\r\\n- **整数类型**：\\r\\n  - `int`：用于存储整数，默认大小为 4 字节（32 位系统上）。\\r\\n  - 示例：`int x = 10;`\\r\\n  \\r\\n- **浮点数类型**：\\r\\n  - `float`：单精度浮点数，通常占用 4 字节。\\r\\n  - `double`：双精度浮点数，通常占用 8 字节。\\r\\n  - 示例：`float pi = 3.14f; double d = 2.718;`\\r\\n  \\r\\n- **字符类型**：\\r\\n  - `char`：用于存储单个字符，通常占用 1 字节。\\r\\n  - 示例：`char c = 'A';`\\r\\n  \\r\\n- **布尔类型**：\\r\\n  - `bool`：用于存储逻辑值，只有两个可能的值：`true` 或 `false`。\\r\\n  - 示例：`bool flag = true;`\\r\\n\\r\\n#### **2.2 类型修饰符**\\r\\n\\r\\n类型修饰符用于改变基本数据类型的特性，主要包括以下几种：\\r\\n\\r\\n- **`signed` 和 `unsigned`**：\\r\\n  - `signed`：表示有符号数（默认），可以存储正数和负数。\\r\\n  - `unsigned`：表示无符号数，只能存储非负数。\\r\\n  - 示例：`unsigned int x = 255; signed int y = -10;`\\r\\n  \\r\\n- **`short` 和 `long`**：\\r\\n  - `short`：短整型，通常占用 2 字节。\\r\\n  - `long`：长整型，通常占用 4 或 8 字节。\\r\\n  - 示例：`short s = 32767; long l = 123456789;`\\r\\n\\r\\n#### **2.3 枚举类型（`enum`）**\\r\\n\\r\\n枚举类型是一种用户定义的数据类型，用于定义一组命名的整数常量。\\r\\n\\r\\n- **定义枚举类型**：\\r\\n\\r\\n  ```cpp\\r\\n  enum Color { RED, GREEN, BLUE };\\r\\n  ```\\r\\n\\r\\n  - 默认情况下，`RED` 的值为 0，`GREEN` 为 1，`BLUE` 为 2。\\r\\n  \\r\\n- **指定枚举值**：\\r\\n\\r\\n  ```cpp\\r\\n  enum Color { RED = 1, GREEN = 2, BLUE = 3 };\\r\\n  ```\\r\\n\\r\\n- **使用枚举类型**：\\r\\n\\r\\n  ```cpp\\r\\n  Color c = GREEN;\\r\\n  if (c == GREEN) {\\r\\n      std::cout << \\\"The color is green.\\\" << std::endl;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **3. 变量与常量**\\r\\n\\r\\n#### **3.1 定义与初始化**\\r\\n\\r\\n- **定义变量**：在 C++ 中，变量必须先定义后使用。\\r\\n\\r\\n  ```cpp\\r\\n  int x;        // 定义一个整数变量\\r\\n  float f = 3.14; // 定义并初始化一个浮点数\\r\\n  ```\\r\\n\\r\\n- **自动类型推导（`auto`）**：\\r\\n  使用 `auto` 关键字可以让编译器自动推导变量的类型。\\r\\n\\r\\n  ```cpp\\r\\n  auto a = 10;    // 编译器推导为 int\\r\\n  auto b = 3.14;  // 编译器推导为 double\\r\\n  ```\\r\\n\\r\\n#### **3.2 常量**\\r\\n\\r\\n- **`const`**：用于定义不可修改的常量。\\r\\n\\r\\n  ```cpp\\r\\n  const int MAX_VALUE = 100;\\r\\n  // MAX_VALUE = 200; // 错误：不能修改 const 常量\\r\\n  ```\\r\\n\\r\\n- **`constexpr`**：用于定义编译时常量。\\r\\n\\r\\n  ```cpp\\r\\n  constexpr double PI = 3.14159;\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **4. 输入输出**\\r\\n\\r\\n#### **4.1 `cin` 和 `cout`**\\r\\n\\r\\nC++ 使用 `cin` 和 `cout` 分别进行输入和输出操作，它们属于 `<iostream>` 头文件。\\r\\n\\r\\n- **输出**：\\r\\n\\r\\n  ```cpp\\r\\n  #include <iostream>\\r\\n  using namespace std;\\r\\n\\r\\n  int main() {\\r\\n      cout << \\\"Hello, World!\\\" << endl; // 输出字符串\\r\\n      int x = 10;\\r\\n      cout << \\\"x = \\\" << x << endl;    // 输出变量\\r\\n      return 0;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **输入**：\\r\\n\\r\\n  ```cpp\\r\\n  int age;\\r\\n  cout << \\\"Enter your age: \\\";\\r\\n  cin >> age; // 从键盘读取输入\\r\\n  cout << \\\"Your age is: \\\" << age << endl;\\r\\n  ```\\r\\n\\r\\n#### **4.2 格式化输入输出（`iomanip`）**\\r\\n\\r\\n`<iomanip>` 头文件提供了多种格式化输入输出的功能。\\r\\n\\r\\n- **设置宽度**：\\r\\n\\r\\n  ```cpp\\r\\n  #include <iomanip>\\r\\n  cout << setw(10) << \\\"Hello\\\" << endl; // 设置输出宽度为 10\\r\\n  ```\\r\\n\\r\\n- **设置精度**：\\r\\n\\r\\n  ```cpp\\r\\n  double pi = 3.14159;\\r\\n  cout << setprecision(4) << pi << endl; // 输出保留 4 位小数\\r\\n  ```\\r\\n\\r\\n- **设置进制**：\\r\\n\\r\\n  ```cpp\\r\\n  int num = 255;\\r\\n  cout << hex << num << endl; // 输出十六进制\\r\\n  cout << oct << num << endl; // 输出八进制\\r\\n  ```\\r\\n\\r\\n---\\r\\n\\r\\n### **总结**\\r\\n\\r\\nC++ 的基本语法涵盖了程序的结构、数据类型、变量与常量、输入输出等核心概念。掌握这些基础知识是进一步学习 C++ 高级特性的前提。以下是关键点回顾：\\r\\n\\r\\n1. **程序结构**：`main()` 是程序的入口点，注释用于解释代码，头文件包含必要的声明。\\r\\n2. **数据类型**：C++ 提供了丰富的数据类型，包括整数、浮点数、字符、布尔等，并支持类型修饰符和枚举类型。\\r\\n3. **变量与常量**：变量需要定义和初始化，`const` 和 `constexpr` 用于定义不可变的常量。\\r\\n4. **输入输出**：`cin` 和 `cout` 是标准输入输出工具，`iomanip` 提供了格式化功能。\\r\\n\\r\\n通过熟练掌握这些基础内容，你将能够编写简单的 C++ 程序，并为进一步学习复杂特性打下坚实的基础。\\r\\n\\r\\n1. **运算符**\\r\\n   - 算术运算符、关系运算符、逻辑运算符\\r\\n   - 位运算符（`&`, `|`, `^`, `~`, `<<`, `>>`）\\r\\n   - 赋值运算符与复合赋值运算符\\r\\n   - 条件运算符（三元运算符）\\r\\n\\r\\n2. **控制结构**\\r\\n   - 条件语句：`if`, `else if`, `switch`\\r\\n   - 循环语句：`for`, `while`, `do-while`\\r\\n   - 跳转语句：`break`, `continue`, `goto`, `return`\\r\\n\\r\\n3. **数组与字符串**\\r\\n   - 数组定义与访问\\r\\n   - 多维数组\\r\\n   - 字符数组与字符串（C 风格字符串 vs `std::string`）\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}