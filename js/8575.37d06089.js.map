{"version":3,"file":"js/8575.37d06089.js","mappings":"oHAAA,6wD","sources":["webpack://myblog/./src/assets/md/javascript/content/026-5 装饰器.md"],"sourcesContent":["export default \"## **5. 装饰器**\\r\\n\\r\\n### **5.1 理解装饰器的作用**\\r\\n\\r\\n- **定义**：\\r\\n  - 装饰器是一种设计模式，用于动态地修改类或类成员的行为。\\r\\n  - 在 JavaScript 中，装饰器通常通过提案（Stage 3）实现，需使用 Babel 等工具支持。\\r\\n- **语法**：\\r\\n\\r\\n  ```javascript\\r\\n  @decorator\\r\\n  class MyClass {}\\r\\n\\r\\n  function decorator(target) {\\r\\n      target.decorated = true;\\r\\n  }\\r\\n\\r\\n  console.log(MyClass.decorated); // 输出：true\\r\\n  ```\\r\\n\\r\\n### **5.2 使用场景**\\r\\n\\r\\n1. **日志记录**：\\r\\n   - 在方法调用前后添加日志。\\r\\n\\r\\n   ```javascript\\r\\n   function log(target, name, descriptor) {\\r\\n       const original = descriptor.value;\\r\\n       descriptor.value = function (...args) {\\r\\n           console.log(`Calling ${name} with`, args);\\r\\n           return original.apply(this, args);\\r\\n       };\\r\\n       return descriptor;\\r\\n   }\\r\\n\\r\\n   class Calculator {\\r\\n       @log\\r\\n       add(a, b) {\\r\\n           return a + b;\\r\\n       }\\r\\n   }\\r\\n\\r\\n   const calc = new Calculator();\\r\\n   console.log(calc.add(2, 3)); // 输出：Calling add with [2, 3] 和 5\\r\\n   ```\\r\\n\\r\\n2. **权限控制**：\\r\\n   - 动态限制对某些方法的访问。\\r\\n\\r\\n   ```javascript\\r\\n   function readonly(target, name, descriptor) {\\r\\n       descriptor.writable = false;\\r\\n       return descriptor;\\r\\n   }\\r\\n\\r\\n   class User {\\r\\n       @readonly\\r\\n       admin() {\\r\\n           return \\\"Admin access granted.\\\";\\r\\n       }\\r\\n   }\\r\\n\\r\\n   const user = new User();\\r\\n   user.admin = function () {}; // 报错：Cannot assign to read-only property 'admin'\\r\\n   ```\\r\\n\\r\\n3. **依赖注入**：\\r\\n   - 动态注入依赖项。\\r\\n\\r\\n   ```javascript\\r\\n   function inject(dependency) {\\r\\n       return function (target) {\\r\\n           target.dependency = dependency;\\r\\n       };\\r\\n   }\\r\\n\\r\\n   @inject(\\\"DatabaseService\\\")\\r\\n   class Service {}\\r\\n\\r\\n   console.log(Service.dependency); // 输出：DatabaseService\\r\\n   ```\\r\\n\\r\\n---\";"],"names":[],"sourceRoot":""}